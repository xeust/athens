{"version":3,"sources":["stylefy/impl/dom.cljs"],"mappings":"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","names":["stylefy.impl.dom/styles-in-dom","cljs.core.atom","stylefy.impl.dom/dom-update-requested?","stylefy.impl.dom/styles-as-css","stylefy.impl.dom/keyframes-in-use","stylefy.impl.dom/font-faces-in-use","stylefy.impl.dom/custom-tags-in-use","stylefy.impl.dom/custom-classes-in-use","stylefy.impl.dom/stylefy-node-id","stylefy.impl.dom/stylefy-constant-node-id","stylefy.impl.dom/stylefy-base-node","stylefy.impl.dom/stylefy-instance-id","stylefy.impl.dom/style-by-hash","style-hash","cljs.core/deref","cljs.core.get","stylefy.impl.dom/update-style-tags!","node-stylefy","node-stylefy-constant","styles-in-css","cljs.core.map","cljs.core.comp","cljs.core/keys","keyframes-in-css","cljs.core/vals","font-faces-in-use","custom-tags-in-use","custom-classes-in-use","new-style-constant-css","cljs.core.apply","cljs.core/str","cljs.core.concat","new-style-css","cljs.core._EQ_","dommy.core/text","dommy.core/set-text!","stylefy.impl.dom/mark-all-styles-added-in-dom!","seq__94805","cljs.core/seq","chunk__94806","count__94807","i__94808","temp__5735__auto__","cljs.core/chunked-seq?","c__4556__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","cljs.core/reset!","stylefy.impl.dom/get-stylefy-node","id","base-node","instance-id","final-id","js/document","dommy.core/selector","stylefy.impl.dom/update-dom","and__4115__auto__","e94902","stylefy.impl.cache.cache_styles","e","stylefy.impl.log/warn","stylefy.impl.cache.clear_styles","stylefy.impl.log/error","stylefy.impl.dom/update-dom-if-requested","stylefy.impl.dom/request-asynchronous-dom-update","stylefy.impl.state/stylefy-initialised?","c__63830__auto__","cljs.core.async.chan","cljs.core.async.impl.dispatch/run","f__63831__auto__","switch__63608__auto__","state_95003","state_val_95004","inst_94996","cljs.core.async.impl.ioc-helpers/return-chan","statearr-95083","state-machine__63609__auto__","ret-value__63610__auto__","result__63611__auto__","cljs.core/keyword-identical?","ex__63612__auto__","e95087","statearr-95088","statearr-95092","state__63832__auto__","statearr-95131","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","p__95176","map__95216","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","stylefy.impl.dom/init-multi-instance","multi-instance","options","js/Error","cljs.core.pr_str","stylefy.impl.dom/init-cache","cljs.core.not_EQ_","stylefy.impl.cache.use_caching_BANG_","cached-styles","stylefy.impl.cache/read-cache-value","stylefy.impl.cache/cache-key-styles","or__4126__auto__","cljs.core/merge","p1__95317#","reagent.core.atom","p__95318","map__95319","stylefy.impl.dom/save-style!","css","hash","style","style-to-be-saved","cljs.core.swap_BANG_","cljs.core/assoc","stylefy.impl.dom/style-in-dom?","cljs.core/boolean","stylefy.impl.dom/add-keyframes","identifier","garden-syntax","garden.core.css","stylefy.impl.dom/add-font-face","cljs.core/conj","stylefy.impl.dom/add-tag","tag-css","stylefy.impl.dom/add-class","class-as-css"],"sourcesContent":["(ns stylefy.impl.dom\r\n  (:require [dommy.core :as dommy]\r\n            [reagent.core :as r]\r\n            [garden.core :refer [css]]\r\n            [cljs.core.async :refer [<! timeout]]\r\n            [stylefy.impl.cache :as cache]\r\n            [stylefy.impl.conversion :as conversion]\r\n            [garden.stylesheet :refer [at-media at-keyframes at-font-face]]\r\n            [stylefy.impl.log :as log]\r\n            [stylefy.impl.state :as state])\r\n  (:require-macros\r\n    [reagent.ratom :refer [run!]]\r\n    [cljs.core.async.macros :refer [go]]))\r\n\r\n\r\n(def styles-in-dom (atom {})) ; style hash -> r/atom with boolean value\r\n(def ^:private dom-update-requested? (atom false))\r\n\r\n(def styles-as-css (atom {})) ; style hash -> map containing keys: ::css\r\n\r\n(def keyframes-in-use (atom {})) ; keyframe identifier -> css\r\n(def font-faces-in-use (atom [])) ; Vector of maps containing keys: ::css\r\n(def custom-tags-in-use (atom [])) ; Vector of maps containing keys: ::css\r\n(def custom-classes-in-use (atom [])) ; Vector of maps containing keys: ::css\r\n\r\n(def ^:private stylefy-node-id \"#_stylefy-styles_\")\r\n(def ^:private stylefy-constant-node-id \"#_stylefy-constant-styles_\")\r\n(def ^:private stylefy-base-node (atom nil)) ; Used when running multiple instances of stylefy on the same page\r\n(def stylefy-instance-id (atom nil)) ; Used when running multiple instances of stylefy on the same page\r\n\r\n(defn style-by-hash [style-hash]\r\n  (when style-hash\r\n    (get @styles-as-css style-hash)))\r\n\r\n(defn- update-style-tags!\r\n  [node-stylefy node-stylefy-constant]\r\n  (let [styles-in-css          (map (comp ::css style-by-hash) (keys @styles-as-css))\r\n        keyframes-in-css       (vals @keyframes-in-use)\r\n        font-faces-in-use      (map ::css @font-faces-in-use)\r\n        custom-tags-in-use     (map ::css @custom-tags-in-use)\r\n        custom-classes-in-use  (map ::css @custom-classes-in-use)\r\n        new-style-constant-css (apply str (concat font-faces-in-use\r\n                                                  keyframes-in-css\r\n                                                  custom-tags-in-use\r\n                                                  custom-classes-in-use))\r\n        new-style-css          (apply str styles-in-css)]\r\n    ; Do not update this node contents if there are no new styles to be added.\r\n    ; This is important, because even if setting the same contents should have no effect,\r\n    ; it can cause font flickering in some browsers.\r\n    (when-not (= (dommy/text node-stylefy-constant) new-style-constant-css)\r\n      (dommy/set-text! node-stylefy-constant new-style-constant-css))\r\n\r\n    (dommy/set-text! node-stylefy new-style-css)))\r\n\r\n(defn- mark-all-styles-added-in-dom! []\r\n  (doseq [style-hash (keys @styles-in-dom)]\r\n    (reset! (get @styles-in-dom style-hash) true)))\r\n\r\n(defn- get-stylefy-node [id base-node instance-id]\r\n  (let [final-id (str id (when instance-id (str instance-id)))]\r\n    (if (nil? base-node)\r\n      (dommy/sel1 final-id)\r\n      (dommy/sel1 base-node final-id))))\r\n\r\n(defn update-dom\r\n  []\r\n  (let [node-stylefy (get-stylefy-node stylefy-node-id @stylefy-base-node @stylefy-instance-id)\r\n        node-stylefy-constant (get-stylefy-node stylefy-constant-node-id @stylefy-base-node @stylefy-instance-id)]\r\n    (if (and node-stylefy node-stylefy-constant)\r\n      (do (update-style-tags! node-stylefy node-stylefy-constant)\r\n          (reset! dom-update-requested? false)\r\n\r\n          (try\r\n            (cache/cache-styles @styles-as-css @stylefy-instance-id)\r\n            (catch :default e\r\n              (log/warn (str \"Unable to cache styles, error: \" e))\r\n              (cache/clear-styles @stylefy-instance-id)\r\n              e))\r\n\r\n          (mark-all-styles-added-in-dom!))\r\n      (log/error \"stylefy is unable to find the required <style> tags!\"))))\r\n\r\n(defn- update-dom-if-requested\r\n  []\r\n  (when @dom-update-requested?\r\n    (update-dom)))\r\n\r\n(defn- request-asynchronous-dom-update\r\n  []\r\n  (when @state/stylefy-initialised?\r\n    (when-not @dom-update-requested?\r\n      (reset! dom-update-requested? true)\r\n      (go\r\n        (update-dom))\r\n      nil)))\r\n\r\n(defn init-multi-instance [{:keys [multi-instance] :as options}]\r\n  (let [base-node (:base-node multi-instance)\r\n        instance-id (:instance-id multi-instance)]\r\n    (assert (or (nil? instance-id)\r\n                (string? instance-id))\r\n            (str \"instance-id must be string. Got: \" (pr-str base-node instance-id)))\r\n    (reset! stylefy-base-node base-node)\r\n    (reset! stylefy-instance-id instance-id)))\r\n\r\n(defn init-cache [options]\r\n  (when (not= (:use-caching? options) false)\r\n    (cache/use-caching! (:cache-options options) @stylefy-instance-id)\r\n\r\n    (when-let [cached-styles (cache/read-cache-value\r\n                               (cache/cache-key-styles @stylefy-instance-id))]\r\n      (reset! styles-as-css (or cached-styles {}))\r\n      (reset! styles-in-dom (apply merge (map\r\n                                           ; Note: r/atom, to be usable in component render methods.\r\n                                           #(-> {% (r/atom false)})\r\n                                           (keys cached-styles)))))))\r\n\r\n(defn save-style!\r\n  \"Stores the style in an atom. The style is going to be added into the DOM soon.\"\r\n  [{:keys [css hash] :as style}]\r\n  (assert css \"Unable to save empty style!\")\r\n  (assert hash \"Unable to save style without hash!\")\r\n  (let [style-to-be-saved {::css css}]\r\n    (swap! styles-as-css assoc hash style-to-be-saved)\r\n    (swap! styles-in-dom assoc hash (r/atom false)) ; Note: r/atom, to be usable in component render methods.\r\n    (request-asynchronous-dom-update)))\r\n\r\n(defn style-in-dom? [style-hash]\r\n  ; Note: This function does Reagent atom dereference.\r\n  ; If called inside a component render method (via use-style), it causes the component to re-render\r\n  ; itself if the \"CSS in DOM\" state of this specific style hash is changed.\r\n  (boolean @(get @styles-in-dom style-hash)))\r\n\r\n(defn add-keyframes [identifier garden-syntax]\r\n  (swap! keyframes-in-use assoc identifier (css garden-syntax))\r\n  (request-asynchronous-dom-update)\r\n  nil)\r\n\r\n(defn add-font-face [garden-syntax]\r\n  (swap! font-faces-in-use conj {::css (css garden-syntax)})\r\n  (request-asynchronous-dom-update)\r\n  nil)\r\n\r\n(defn add-tag [tag-css]\r\n  (swap! custom-tags-in-use conj {::css tag-css})\r\n  (request-asynchronous-dom-update)\r\n  nil)\r\n\r\n(defn add-class [class-as-css]\r\n  (swap! custom-classes-in-use conj {::css class-as-css})\r\n  (request-asynchronous-dom-update)\r\n  nil)\r\n"]}