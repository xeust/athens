{"version":3,"sources":["day8/re_frame_10x/inlined_deps/reagent/v0v9v1/reagent/impl/component.cljs"],"mappings":"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","names":["day8.re-frame-10x.inlined-deps.reagent.v0v9v1.reagent.impl.component/shallow-obj-to-map","o","ks","cljs.core/js-keys","len","m","i","k","cljs.core.assoc","cljs.core.keyword","goog.object/get","day8.re-frame-10x.inlined-deps.reagent.v0v9v1.reagent.impl.component/extract-props","v","p","cljs.core.nth","cljs.core/map?","day8.re-frame-10x.inlined-deps.reagent.v0v9v1.reagent.impl.component/extract-children","first-child","cljs.core/count","cljs.core.subvec","day8.re-frame-10x.inlined-deps.reagent.v0v9v1.reagent.impl.component/props-argv","c","temp__5737__auto__","a","day8.re-frame-10x.inlined-deps.reagent.v0v9v1.reagent.impl.component/get-argv","day8.re-frame-10x.inlined-deps.reagent.v0v9v1.reagent.impl.component/get-props","day8.re-frame-10x.inlined-deps.reagent.v0v9v1.reagent.impl.component/get-children","js/module$node_modules$react$index.Children.toArray","cljs.core.into","day8.re-frame-10x.inlined-deps.reagent.v0v9v1.reagent.impl.component/reagent-class?","cljs.core/fn?","G__53816","day8.re-frame-10x.inlined-deps.reagent.v0v9v1.reagent.impl.component/react-class?","G__53818","day8.re-frame-10x.inlined-deps.reagent.v0v9v1.reagent.impl.component/reagent-component?","day8.re-frame-10x.inlined-deps.reagent.v0v9v1.reagent.impl.component/cached-react-class","day8.re-frame-10x.inlined-deps.reagent.v0v9v1.reagent.impl.component/cache-react-class","constructor","day8.re-frame-10x.inlined-deps.reagent.v0v9v1.reagent.impl.component/state-atom","this","sa","day8.re_frame_10x.inlined_deps.reagent.v0v9v1.reagent.ratom.atom","js/day8","js/day8.re-frame-10x","js/day8.re-frame-10x.inlined-deps","js/day8.re-frame-10x.inlined-deps.reagent","js/day8.re-frame-10x.inlined-deps.reagent.v0v9v1","js/day8.re-frame-10x.inlined-deps.reagent.v0v9v1.reagent","js/day8.re-frame-10x.inlined-deps.reagent.v0v9v1.reagent.impl","js/day8.re-frame-10x.inlined-deps.reagent.v0v9v1.reagent.impl.component","js/day8.re-frame-10x.inlined-deps.reagent.v0v9v1.reagent.impl.component.as-element","day8.re-frame-10x.inlined-deps.reagent.v0v9v1.reagent.impl.component/as-element","day8.re-frame-10x.inlined-deps.reagent.v0v9v1.reagent.impl.component/wrap-render","f","_","cljs.core/ifn?","js/Error","cljs.core.pr_str","res","n","G__53825","cljs.core.into_array","cljs.core/vector?","args","G__53826","cljs.core.apply","cljs.core/vector","day8.re-frame-10x.inlined-deps.reagent.v0v9v1.reagent.impl.component/do-render","*current-component*-orig-val__53829","*current-component*-temp-val__53830","day8.re-frame-10x.inlined-deps.reagent.v0v9v1.reagent.impl.component/*current-component*","ok","reagent.debug/has-console","reagent.debug/tracking","reagent.debug/track-console","js/console","day8.re-frame-10x.inlined-deps.reagent.v0v9v1.reagent.impl.component/comp-name","day8.re-frame-10x.inlined-deps.reagent.v0v9v1.reagent.impl.component/rat-opts","day8.re-frame-10x.inlined-deps.reagent.v0v9v1.reagent.impl.component/static-fns","day8.re-frame-10x.inlined-deps.reagent.v0v9v1.reagent.impl.util/*non-reactive*","rat","day8.re-frame-10x.inlined-deps.reagent.v0v9v1.reagent.impl.batching/mark-rendered","day8.re-frame-10x.inlined-deps.reagent.v0v9v1.reagent.ratom/run-in-reaction","day8.re-frame-10x.inlined-deps.reagent.v0v9v1.reagent.impl.batching/queue-render","day8.re-frame-10x.inlined-deps.reagent.v0v9v1.reagent.impl.component/custom-wrapper","key","G__53859","cljs.core/Keyword","props","state","cljs.core/reset!","oldprops","oldstate","nextprops","nextstate","or__4126__auto__","day8.re-frame-10x.inlined-deps.reagent.v0v9v1.reagent.impl.util/*always-update*","old-argv","new-argv","noargv","e53861","cljs.core.not_EQ_","e","snapshot","G__53862","day8.re-frame-10x.inlined-deps.reagent.v0v9v1.reagent.ratom/dispose!","error","info","day8.re-frame-10x.inlined-deps.reagent.v0v9v1.reagent.impl.component/get-wrapper","wrap","and__4115__auto__","day8.re-frame-10x.inlined-deps.reagent.v0v9v1.reagent.impl.component/obligatory","day8.re-frame-10x.inlined-deps.reagent.v0v9v1.reagent.impl.component/dash-to-method-name","day8.re-frame-10x.inlined-deps.reagent.v0v9v1.reagent.impl.util/memoize-1","day8.re-frame-10x.inlined-deps.reagent.v0v9v1.reagent.impl.util/dash-to-method-name","day8.re-frame-10x.inlined-deps.reagent.v0v9v1.reagent.impl.component/camelify-map-keys","fun-map","cljs.core/reduce-kv","day8.re-frame-10x.inlined-deps.reagent.v0v9v1.reagent.impl.component/add-obligatory","cljs.core.merge","day8.re-frame-10x.inlined-deps.reagent.v0v9v1.reagent.impl.component/wrap-funs","fmap","renders","cljs.core/select-keys","render-fun","cljs.core/vals","cljs.core/first","cljs.core/not","legacy-render","name","day8.re-frame-10x.inlined-deps.reagent.v0v9v1.reagent.impl.util/fun-name","cljs.core.gensym","day8.re-frame-10x.inlined-deps.reagent.v0v9v1.reagent.impl.component/map-to-js","G__53870","goog.object/set","cljs.core/name","day8.re-frame-10x.inlined-deps.reagent.v0v9v1.reagent.impl.component/cljsify","body","day8.re-frame-10x.inlined-deps.reagent.v0v9v1.reagent.impl.component/built-in-static-method-names","day8.re-frame-10x.inlined-deps.reagent.v0v9v1.reagent.impl.component/create-class","methods","cljs.core/dissoc","static-methods","display-name","get-initial-state","construct","cmp","context","updater","js/module$node_modules$react$index.Component","day8.re-frame-10x.inlined-deps.reagent.v0v9v1.reagent.impl.batching/next-mount-count","goog.object/extend","writer","opt","cljs.core/-write","day8.re-frame-10x.inlined-deps.reagent.v0v9v1.reagent.impl.component/fiber-component-path","fiber","G__53879","parent","G__53880","path","G__53881","cljs.core/empty?","day8.re-frame-10x.inlined-deps.reagent.v0v9v1.reagent.impl.component/component-path","temp__5733__auto__","G__53884","G__53885","instance","G__53889","G__53891","elem","G__53894","G__53896","G__53897","owner","G__53899","G__53900","G__53901","G__53903","day8.re-frame-10x.inlined-deps.reagent.v0v9v1.reagent.impl.component/fn-to-class","spec","cljs.core/meta","withrender","day8.re-frame-10x.inlined-deps.reagent.v0v9v1.reagent.impl.component/as-class","tag","cached-class","day8.re-frame-10x.inlined-deps.reagent.v0v9v1.reagent.impl.component/reactify-component","comp"],"sourcesContent":["(ns ^{:mranderson/inlined true} day8.re-frame-10x.inlined-deps.reagent.v0v9v1.reagent.impl.component\n  (:require [goog.object :as gobj]\n            [react :as react]\n            [day8.re-frame-10x.inlined-deps.reagent.v0v9v1.reagent.impl.util :as util]\n            [day8.re-frame-10x.inlined-deps.reagent.v0v9v1.reagent.impl.batching :as batch]\n            [day8.re-frame-10x.inlined-deps.reagent.v0v9v1.reagent.ratom :as ratom]\n            [day8.re-frame-10x.inlined-deps.reagent.v0v9v1.reagent.debug :refer-macros [dbg prn dev? warn error warn-unless\n                                                                                        assert-callable]]\n            [goog.object :as gobj]))\n\n(declare ^:dynamic *current-component*)\n\n\n;;; Argv access\n\n(defn shallow-obj-to-map [o]\n  (let [ks (js-keys o)\n        len (alength ks)]\n    (loop [m {}\n           i 0]\n      (if (< i len)\n        (let [k (aget ks i)]\n          (recur (assoc m (keyword k) (gobj/get o k))\n                 (inc i)))\n        m))))\n\n(defn extract-props [v]\n  (let [p (nth v 1 nil)]\n    (if (map? p) p)))\n\n(defn extract-children [v]\n  (let [p (nth v 1 nil)\n        first-child (if (or (nil? p) (map? p)) 2 1)]\n    (if (> (count v) first-child)\n      (subvec v first-child))))\n\n(defn props-argv [^js/React.Component c p]\n  (if-some [a (.-argv p)]\n    a\n    [(.-constructor c) (shallow-obj-to-map p)]))\n\n(defn get-argv [^js/React.Component c]\n  (props-argv c (.-props c)))\n\n(defn get-props [^js/React.Component c]\n  (let [p (.-props c)]\n    (if-some [v (.-argv p)]\n      (extract-props v)\n      (shallow-obj-to-map p))))\n\n(defn get-children [^js/React.Component c]\n  (let [p (.-props c)]\n    (if-some [v (.-argv p)]\n      (extract-children v)\n      (->> (.-children p)\n           (react/Children.toArray)\n           (into [])))))\n\n(defn ^boolean reagent-class? [c]\n  (and (fn? c)\n       (some? (some-> c (.-prototype) (.-reagentRender)))))\n\n(defn ^boolean react-class? [c]\n  (and (fn? c)\n       (some? (some-> c (.-prototype) (.-render)))))\n\n(defn ^boolean reagent-component? [^clj c]\n  (some? (.-reagentRender c)))\n\n(defn cached-react-class [^clj c]\n  (.-cljsReactClass c))\n\n(defn cache-react-class [^clj c constructor]\n  (set! (.-cljsReactClass c) constructor))\n\n\n;;; State\n\n(defn state-atom [^clj this]\n  (let [sa (.-cljsState this)]\n    (if-not (nil? sa)\n      sa\n      (set! (.-cljsState this) (ratom/atom nil)))))\n\n;; avoid circular dependency: this gets set from template.cljs\n(defonce as-element nil)\n\n\n;;; Rendering\n\n(defn wrap-render\n  \"Calls the render function of the component `c`.  If result `res` evaluates to a:\n     1) Vector (form-1 component) - Treats the vector as hiccup and returns\n        a react element with a render function based on that hiccup\n     2) Function (form-2 component) - updates the render function to `res` i.e. the internal function\n        and calls wrap-render again (`recur`), until the render result doesn't evaluate to a function.\n     3) Anything else - Returns the result of evaluating `c`\"\n  [^clj c]\n  (let [f (.-reagentRender c)\n        _ (assert-callable f)\n        ;; cljsLegacyRender tells if this calls was defined\n        ;; using :render instead of :reagent-render\n        ;; in that case, the :render fn is called with just `this` as argument.\n        res (if (true? (.-cljsLegacyRender c))\n              (.call f c c)\n              (let [v (get-argv c)\n                    n (count v)]\n                (case n\n                  1 (.call f c)\n                  2 (.call f c (nth v 1))\n                  3 (.call f c (nth v 1) (nth v 2))\n                  4 (.call f c (nth v 1) (nth v 2) (nth v 3))\n                  5 (.call f c (nth v 1) (nth v 2) (nth v 3) (nth v 4))\n                  (.apply f c (.slice (into-array v) 1)))))]\n    (cond\n      (vector? res) (as-element res)\n      (ifn? res) (let [f (if (reagent-class? res)\n                           (fn [& args]\n                             (as-element (apply vector res args)))\n                           res)]\n                   (set! (.-reagentRender c) f)\n                   (recur c))\n      :else res)))\n\n(declare comp-name)\n\n(defn do-render [c]\n  (binding [*current-component* c]\n    (if (dev?)\n      ;; Log errors, without using try/catch (and mess up call stack)\n      (let [ok (array false)]\n        (try\n          (let [res (wrap-render c)]\n            (aset ok 0 true)\n            res)\n          (finally\n            (when-not (aget ok 0)\n              (error (str \"Error rendering component\"\n                          (comp-name)))))))\n      (wrap-render c))))\n\n\n;;; Method wrapping\n\n(def rat-opts {:no-cache true})\n\n(def static-fns\n  {:render\n   (fn render []\n     ;; TODO: Use static property for cljsRatom\n     (this-as c (if util/*non-reactive*\n                  (do-render c)\n                  (let [^clj rat (gobj/get c \"cljsRatom\")]\n                    (batch/mark-rendered c)\n                    (if (nil? rat)\n                      (ratom/run-in-reaction #(do-render c) c \"cljsRatom\"\n                                             batch/queue-render rat-opts)\n                      (._run rat false))))))})\n\n(defn custom-wrapper [key f]\n  (case key\n    :getDefaultProps\n    (throw (js/Error. \"getDefaultProps not supported\"))\n\n    :getDerivedStateFromProps\n    (fn getDerivedStateFromProps [props state]\n      ;; Read props from Reagent argv\n      (.call f nil (if-some [a (.-argv props)] (extract-props a) props) state))\n\n    ;; In ES6 React, this is now part of the constructor\n    :getInitialState\n    (fn getInitialState [c]\n      (reset! (state-atom c) (.call f c c)))\n\n    :getSnapshotBeforeUpdate\n    (fn getSnapshotBeforeUpdate [oldprops oldstate]\n      (this-as c (.call f c c (props-argv c oldprops) oldstate)))\n\n    ;; Deprecated - warning in 16.9 will work through 17.x\n    :componentWillReceiveProps\n    (fn componentWillReceiveProps [nextprops]\n      (this-as c (.call f c c (props-argv c nextprops))))\n\n    ;; Deprecated - will work in 17.x\n    :UNSAFE_componentWillReceiveProps\n    (fn componentWillReceiveProps [nextprops]\n      (this-as c (.call f c c (props-argv c nextprops))))\n\n    :shouldComponentUpdate\n    (fn shouldComponentUpdate [nextprops nextstate]\n      (or util/*always-update*\n          (this-as c\n                   ;; Don't care about nextstate here, we use forceUpdate\n                   ;; when only when state has changed anyway.\n                   (let [old-argv (.. c -props -argv)\n                         new-argv (.-argv nextprops)\n                         noargv (or (nil? old-argv) (nil? new-argv))]\n                     (cond\n                       (nil? f) (or noargv (try (not= old-argv new-argv)\n                                                (catch :default e\n                                                  (warn \"Exception thrown while comparing argv's in shouldComponentUpdate: \" old-argv \" \" new-argv \" \" e)\n                                                  false)))\n                       noargv (.call f c c (get-argv c) (props-argv c nextprops))\n                       :else  (.call f c c old-argv new-argv))))))\n\n    ;; Deprecated - warning in 16.9 will work through 17.x\n    :componentWillUpdate\n    (fn componentWillUpdate [nextprops nextstate]\n      (this-as c (.call f c c (props-argv c nextprops) nextstate)))\n\n    ;; Deprecated - will work in 17.x\n    :UNSAFE_componentWillUpdate\n    (fn componentWillUpdate [nextprops nextstate]\n      (this-as c (.call f c c (props-argv c nextprops) nextstate)))\n\n    :componentDidUpdate\n    (fn componentDidUpdate [oldprops oldstate snapshot]\n      (this-as c (.call f c c (props-argv c oldprops) oldstate snapshot)))\n\n    ;; Deprecated - warning in 16.9 will work through 17.x\n    :componentWillMount\n    (fn componentWillMount []\n      (this-as c (.call f c c)))\n\n    ;; Deprecated - will work in 17.x\n    :UNSAFE_componentWillMount\n    (fn componentWillMount []\n      (this-as c (.call f c c)))\n\n    :componentDidMount\n    (fn componentDidMount []\n      (this-as c (.call f c c)))\n\n    :componentWillUnmount\n    (fn componentWillUnmount []\n      (this-as c\n               (some-> (gobj/get c \"cljsRatom\") ratom/dispose!)\n               (batch/mark-rendered c)\n               (when-not (nil? f)\n                 (.call f c c))))\n\n    :componentDidCatch\n    (fn componentDidCatch [error info]\n      (this-as c (.call f c c error info)))\n\n    nil))\n\n(defn get-wrapper [key f]\n  (let [wrap (custom-wrapper key f)]\n    (when (and wrap f)\n      (assert-callable f))\n    (or wrap f)))\n\n;; Though the value is nil here, the wrapper function will be\n;; added to class to manage Reagent ratom lifecycle.\n(def obligatory {:shouldComponentUpdate nil\n                 :componentWillUnmount nil})\n\n(def dash-to-method-name (util/memoize-1 util/dash-to-method-name))\n\n(defn camelify-map-keys [fun-map]\n  (reduce-kv (fn [m k v]\n               (assoc m (-> k dash-to-method-name keyword) v))\n             {} fun-map))\n\n(defn add-obligatory [fun-map]\n  (merge obligatory fun-map))\n\n(defn wrap-funs [fmap]\n  (when (dev?)\n    (let [renders (select-keys fmap [:render :reagentRender])\n          render-fun (-> renders vals first)]\n      (assert (not (:componentFunction fmap)) \":component-function is no longer supported, use :reagent-render instead.\")\n      (assert (pos? (count renders)) \"Missing reagent-render\")\n      (assert (== 1 (count renders)) \"Too many render functions supplied\")\n      (assert-callable render-fun)))\n  (let [render-fun (or (:reagentRender fmap)\n                       (:render fmap))\n        legacy-render (nil? (:reagentRender fmap))\n        name (or (:displayName fmap)\n                 (util/fun-name render-fun)\n                 (str (gensym \"reagent\")))\n        fmap (reduce-kv (fn [m k v]\n                          (assoc m k (get-wrapper k v)))\n                        {} fmap)]\n    (assoc fmap\n           :displayName name\n           :cljsLegacyRender legacy-render\n           :reagentRender render-fun\n           :render (:render static-fns))))\n\n(defn map-to-js [m]\n  (reduce-kv (fn [o k v]\n               (doto o\n                 (gobj/set (name k) v)))\n             #js{} m))\n\n(defn cljsify [body]\n  (-> body\n      camelify-map-keys\n      add-obligatory\n      wrap-funs))\n\n;; Idea from:\n;; https://gist.github.com/pesterhazy/2a25c82db0519a28e415b40481f84554\n;; https://gist.github.com/thheller/7f530b34de1c44589f4e0671e1ef7533#file-es6-class-cljs-L18\n\n(def built-in-static-method-names\n  [:childContextTypes :contextTypes :contextType\n   :getDerivedStateFromProps :getDerivedStateFromError])\n\n(defn create-class\n  \"Creates JS class based on provided Clojure map.\n\n  Map keys should use `React.Component` method names (https://reactjs.org/docs/react-component.html),\n  and can be provided in snake-case or camelCase.\n  Constructor function is defined using key `:getInitialState`.\n\n  React built-in static methods or properties are automatically defined as statics.\"\n  [body]\n  {:pre [(map? body)]}\n  (let [body (cljsify body)\n        methods (map-to-js (apply dissoc body :displayName :getInitialState :constructor\n                                  :render :reagentRender\n                                  built-in-static-method-names))\n        static-methods (map-to-js (select-keys body built-in-static-method-names))\n        display-name (:displayName body)\n        get-initial-state (:getInitialState body)\n        construct (:constructor body)\n        cmp (fn [props context updater]\n              (this-as this\n                (.call react/Component this props context updater)\n                (when construct\n                  (construct this props))\n                (when get-initial-state\n                  (set! (.-state this) (get-initial-state this)))\n                (set! (.-cljsMountOrder ^clj this) (batch/next-mount-count))\n                this))]\n\n    (gobj/extend (.-prototype cmp) (.-prototype react/Component) methods)\n\n    ;; These names SHOULD be mangled by Closure so we can't use goog/extend\n\n    (when (:render body)\n      (set! (.-render ^js (.-prototype cmp)) (:render body)))\n\n    (when (:reagentRender body)\n      (set! (.-reagentRender ^clj (.-prototype cmp)) (:reagentRender body)))\n\n    (when (:cljsLegacyRender body)\n      (set! (.-cljsLegacyRender ^clj (.-prototype cmp)) (:cljsLegacyRender body)))\n\n    (gobj/extend cmp react/Component static-methods)\n\n    (when display-name\n      (set! (.-displayName cmp) display-name)\n      (set! (.-cljs$lang$ctorStr cmp) display-name)\n      (set! (.-cljs$lang$ctorPrWriter cmp)\n            (fn [this writer opt]\n              (cljs.core/-write writer display-name))))\n\n    (set! (.-cljs$lang$type cmp) true)\n    (set! (.. cmp -prototype -constructor) cmp)\n\n    cmp))\n\n(defn fiber-component-path [fiber]\n  (let [name (some-> fiber\n                     (.-type)\n                     (.-displayName))\n        parent (some-> fiber\n                       (.-return))\n        path (some-> parent\n                     fiber-component-path\n                     (str \" > \"))\n        res (str path name)]\n    (when-not (empty? res) res)))\n\n(defn component-path [c]\n  ;; Alternative branch for React 16\n  ;; Try both original name (for UMD foreign-lib) and manged name (property access, for Closure optimized React)\n  (if-let [fiber (or (some-> c (gobj/get \"_reactInternalFiber\"))\n                     (some-> c (.-_reactInternalFiber)))]\n    (fiber-component-path fiber)\n    (let [instance (or (some-> c (gobj/get \"_reactInternalInstance\"))\n                       (some-> c (.-_reactInternalInstance))\n                       c)\n          elem (or (some-> instance (gobj/get \"_currentElement\"))\n                   (some-> instance (.-_currentElement)))\n          name (some-> elem\n                       (.-type)\n                       (.-displayName))\n          owner (or (some-> elem (gobj/get \"_owner\"))\n                    (some-> elem (.-_owner)))\n          path (some-> owner\n                       component-path\n                       (str \" > \"))\n          res (str path name)]\n      (when-not (empty? res) res))))\n\n(defn comp-name []\n  (if (dev?)\n    (let [c *current-component*\n          n (or (component-path c)\n                (some-> c .-constructor util/fun-name))]\n      (if-not (empty? n)\n        (str \" (in \" n \")\")\n        \"\"))\n    \"\"))\n\n(defn fn-to-class [f]\n  (assert-callable f)\n  (warn-unless (not (and (react-class? f)\n                         (not (reagent-class? f))))\n               \"Using native React classes directly in Hiccup forms \"\n               \"is not supported. Use create-element or \"\n               \"adapt-react-class instead: \" (or (util/fun-name f)\n                                                 f)\n               (comp-name))\n  (if (reagent-class? f)\n    (cache-react-class f f)\n    (let [spec (meta f)\n          withrender (assoc spec :reagent-render f)\n          res (create-class withrender)]\n      (cache-react-class f res))))\n\n(defn as-class [tag]\n  (if-some [cached-class (cached-react-class tag)]\n    cached-class\n    (fn-to-class tag)))\n\n(defn reactify-component [comp]\n  (if (react-class? comp)\n    comp\n    (as-class comp)))\n"]}