shadow$provide.module$node_modules$d3_binarytree$dist$d3_binarytree=function(global$jscomp$0,require,module,exports$jscomp$0){(function(global,factory){"object"===typeof exports$jscomp$0&&"undefined"!==typeof module?factory(exports$jscomp$0):"function"===typeof define&&define.amd?define(["exports"],factory):(global=global||self,factory(global.d3=global.d3||{}))})(this,function(exports){function add(tree,x,d){if(isNaN(x))return tree;var parent,node=tree._root;d={data:d};var x0=tree._x0,x1=tree._x1,
xm,right,j;if(!node)return tree._root=d,tree;for(;node.length;)if((right=x>=(xm=(x0+x1)/2))?x0=xm:x1=xm,parent=node,!(node=node[right=+right]))return parent[right]=d,tree;var xp=+tree._x.call(null,node.data);if(x===xp)return d.next=node,parent?parent[right]=d:tree._root=d,tree;do parent=parent?parent[right]=Array(2):tree._root=Array(2),(right=x>=(xm=(x0+x1)/2))?x0=xm:x1=xm;while((right=+right)===(j=+(xp>=xm)));return parent[j]=node,parent[right]=d,tree}function Half(node,x0,x1){this.node=node;this.x0=
x0;this.x1=x1}function defaultX(d){return d[0]}function binarytree(nodes,x){x=new Binarytree(null==x?defaultX:x,NaN,NaN);return null==nodes?x:x.addAll(nodes)}function Binarytree(x,x0,x1){this._x=x;this._x0=x0;this._x1=x1;this._root=void 0}function leaf_copy(leaf){for(var copy={data:leaf.data},next=copy;leaf=leaf.next;)next=next.next={data:leaf.data};return copy}var treeProto=binarytree.prototype=Binarytree.prototype;treeProto.copy=function(){var copy=new Binarytree(this._x,this._x0,this._x1),node=
this._root,nodes,child;if(!node)return copy;if(!node.length)return copy._root=leaf_copy(node),copy;for(nodes=[{source:node,target:copy._root=Array(2)}];node=nodes.pop();)for(var i=0;2>i;++i)if(child=node.source[i])child.length?nodes.push({source:child,target:node.target[i]=Array(2)}):node.target[i]=leaf_copy(child);return copy};treeProto.add=function(d){var x=+this._x.call(null,d);return add(this.cover(x),x,d)};treeProto.addAll=function(data){var i,n=data.length,x,xz=Array(n),x0=Infinity,x1=-Infinity;
for(i=0;i<n;++i)isNaN(x=+this._x.call(null,data[i]))||(xz[i]=x,x<x0&&(x0=x),x>x1&&(x1=x));x1<x0&&(x0=this._x0,x1=this._x1);this.cover(x0).cover(x1);for(i=0;i<n;++i)add(this,xz[i],data[i]);return this};treeProto.cover=function(x){if(isNaN(x=+x))return this;var x0=this._x0,x1=this._x1;if(isNaN(x0))x1=(x0=Math.floor(x))+1;else if(x0>x||x>x1){var z=x1-x0,node=this._root,i;switch(i=+(x<(x0+x1)/2)){case 0:do{var parent=Array(2);parent[i]=node;node=parent}while(z*=2,x1=x0+z,x>x1);break;case 1:do parent=
Array(2),parent[i]=node,node=parent;while(z*=2,x0=x1-z,x0>x)}this._root&&this._root.length&&(this._root=node)}else return this;this._x0=x0;this._x1=x1;return this};treeProto.data=function(){var data=[];this.visit(function(node){if(!node.length){do data.push(node.data);while(node=node.next)}});return data};treeProto.extent=function(_){return arguments.length?this.cover(+_[0][0]).cover(+_[1][0]):isNaN(this._x0)?void 0:[[this._x0],[this._x1]]};treeProto.find=function(x,radius){var x0=this._x0,x1,x2,
x3=this._x1,halves=[],node=this._root,q;node&&halves.push(new Half(node,x0,x3));null==radius?radius=Infinity:(x0=x-radius,x3=x+radius);for(;q=halves.pop();)if(!(!(node=q.node)||(x1=q.x0)>x3||(x2=q.x1)<x0))if(node.length){if(q=(x1+x2)/2,halves.push(new Half(node[1],q,x2),new Half(node[0],x1,q)),node=+(x>=q))q=halves[halves.length-1],halves[halves.length-1]=halves[halves.length-1-node],halves[halves.length-1-node]=q}else if(q=Math.abs(x-+this._x.call(null,node.data)),q<radius){radius=q;x0=x-q;x3=x+
q;var data=node.data}return data};treeProto.remove=function(d){if(isNaN(x=+this._x.call(null,d)))return this;var parent,node=this._root,previous,x0=this._x0,x1=this._x1,x,xm,right;if(!node)return this;if(node.length)for(;;){(right=x>=(xm=(x0+x1)/2))?x0=xm:x1=xm;if(!(parent=node,node=node[right=+right]))return this;if(!node.length)break;if(parent[right+1&1]){var retainer=parent;var j=right}}for(;node.data!==d;)if(!(previous=node,node=node.next))return this;(d=node.next)&&delete node.next;if(previous)return d?
previous.next=d:delete previous.next,this;if(!parent)return this._root=d,this;d?parent[right]=d:delete parent[right];(node=parent[0]||parent[1])&&node===(parent[1]||parent[0])&&!node.length&&(retainer?retainer[j]=node:this._root=node);return this};treeProto.removeAll=function(data){for(var i=0,n=data.length;i<n;++i)this.remove(data[i]);return this};treeProto.root=function(){return this._root};treeProto.size=function(){var size=0;this.visit(function(node){if(!node.length){do++size;while(node=node.next)
}});return size};treeProto.visit=function(callback){var halves=[],q,node=this._root,child,x0;for(node&&halves.push(new Half(node,this._x0,this._x1));q=halves.pop();)if(!callback(node=q.node,x0=q.x0,q=q.x1)&&node.length){var xm=(x0+q)/2;(child=node[1])&&halves.push(new Half(child,xm,q));(child=node[0])&&halves.push(new Half(child,x0,xm))}return this};treeProto.visitAfter=function(callback){var halves=[],next=[],q;for(this._root&&halves.push(new Half(this._root,this._x0,this._x1));q=halves.pop();){var node=
q.node;if(node.length){var child,x0=q.x0,x1=q.x1,xm=(x0+x1)/2;(child=node[0])&&halves.push(new Half(child,x0,xm));(child=node[1])&&halves.push(new Half(child,xm,x1))}next.push(q)}for(;q=next.pop();)callback(q.node,q.x0,q.x1);return this};treeProto.x=function(_){return arguments.length?(this._x=_,this):this._x};exports.binarytree=binarytree;Object.defineProperty(exports,"__esModule",{value:!0})})}
//# sourceMappingURL=module$node_modules$d3_binarytree$dist$d3_binarytree.js.map
