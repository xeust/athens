{"version":3,"sources":["athens/keybindings.cljs"],"mappings":"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","names":["athens.keybindings/modifier-keys","e","shift","meta","ctrl","alt","athens.keybindings/get-end-points","target","cljs.core.js__GT_clj","goog.dom.selection/getEndPoints","athens.keybindings/set-cursor-position","idx","goog.dom.selection/setCursorPosition","athens.keybindings/destruct-target","vec__95348","cljs.core.nth","value","start","end","selection","goog.dom.selection/getText","head","cljs.core.subs","tail","cljs.core.merge","athens.keybindings/destruct-key-down","key","key-code","event","modifiers","target-data","athens.keybindings/ARROW-KEYS","goog.events.KeyCodes/UP","goog.events.KeyCodes/LEFT","goog.events.KeyCodes/DOWN","goog.events.KeyCodes/RIGHT","athens.keybindings/arrow-key-direction","cljs.core/contains?","athens.keybindings/slash-options","js/module$node_modules$$material_ui$icons$Done.default","js/module$node_modules$$material_ui$icons$Timer.default","js/Date","cljs.core/clj->js","js/module$node_modules$$material_ui$icons$Today.default","athens.util.get_day","js/module$node_modules$$material_ui$icons$YouTube.default","js/module$node_modules$$material_ui$icons$DesktopWindows.default","js/module$node_modules$$material_ui$icons$ViewDayRounded.default","athens.keybindings/filter-slash-options","query","clojure.string/blank?","cljs.core/filterv","p__95370","vec__95371","text","cljs.core/re-find","cljs.core/re-pattern","athens.keybindings/update-query","state","type","query-fn","G__95378","cljs.core/Keyword","js/Error","athens.db/search-in-block-content","athens.db/search-in-node-title","regex","G__95383","find","query-start-idx","cljs.core/count","new-query","results","cljs.core._EQ_","cljs.core/empty?","cljs.core.swap_BANG_","cljs.core/assoc","var_args","G__95391","athens.keybindings/auto-complete-slash","map__95392","cljs.core/deref","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","map__95393","vec__95394","index","n","_","expansion","pos","expand","cljs.core/fn?","start-idx","new-head","new-str","new-idx","item","map__95411","vec__95413","G__95422","athens.keybindings/auto-complete-hashtag","map__95426","map__95427","map__95428","title","uid","or__4126__auto__","map__95432","G__95435","athens.keybindings/auto-complete-inline","map__95440","map__95441","map__95442","vec__95443","block?","page?","athens.util/escape-str","head-pattern","tail-pattern","closing-str","replacement","replace-str","clojure.string/replace-first","matches","cljs.core/re-matches","after-closing-str","goog.dom.selection/setStart","map__95467","map__95468","vec__95469","athens.keybindings/block-start?","vec__95484","athens.keybindings/block-end?","map__95488","athens.keybindings/dec-cycle","min","max","athens.keybindings/inc-cycle","athens.keybindings/cycle-list","up?","down?","f","athens.keybindings/max-idx","coll","athens.keybindings/handle-arrow-key","map__95502","map__95503","map__95504","selection?","start?","end?","caret-position","textarea-height","top","height","rows","js/Math.round","row","js/Math.ceil","top-row?","bottom-row?","left?","right?","header","athens.db/v-by-ea","athens.db/e-by-av","re-frame.core/dispatch","vec__95515","athens.db/uid-and-embed-id","new-open-state","cur-index","min-index","max-index","next-index","container-el","goog.dom/getElement","target-el","athens.util/scroll-if-needed","athens.keybindings/handle-tab","_uid","_state","map__95536","d-key-down","selected-items","re_frame.core.subscribe","editing-uid","athens.keybindings/handle-escape","athens.keybindings/throttled-dispatch-sync","p1__95538#","goog.functions/throttle","re-frame.core/dispatch-sync","athens.keybindings/handle-enter","map__95539","map__95540","G__95543","athens.keybindings.auto_complete_slash","athens.keybindings.auto_complete_inline","athens.keybindings.auto_complete_hashtag","athens.util/shortcut-key?","first","new-tail","G__95544","athens.keybindings/PAIR-CHARS","athens.keybindings/surround","around","temp__5733__auto__","complement","athens.keybindings/handle-shortcuts","map__95560","cljs.core.not_EQ_","surround-and-set","surround-text","js/document","goog.dom.selection/setEnd","goog.events.KeyCodes/A","closest-node-page","closest-block-page","closest","block","athens.db/get-block","children","cljs.core.sort_by","cljs.core.mapv","goog.events.KeyCodes/Z","map__95579","local","previous","goog.events.KeyCodes/B","goog.events.KeyCodes/I","goog.events.KeyCodes/Y","goog.events.KeyCodes/U","goog.events.KeyCodes/H","goog.events.KeyCodes/O","vec__95581","link","hashtag","block-ref","athens.db/transact-state-for-uid","and__4115__auto__","eid","athens.router.navigate_uid","new-uid","athens.util/gen-block-uid","js/setTimeout","athens.keybindings/pair-char?","map__95586","pair-char-set","cljs.core/seq","cljs.core/flatten","cljs.core/set","athens.keybindings/handle-pair-char","map__95588","close-pair","lookbehind-char","four-char","double-brackets?","double-parens?","surround-selection","athens.keybindings/handle-backspace","map__95594","map__95595","no-selection?","sub-str","possible-pair","fexpr__95599","look-behind-char","athens.keybindings/is-character-key?","map__95601","cljs.core/not","goog.events.KeyCodes/isCharacterKey","athens.keybindings/write-char","map__95603","map__95604","athens.keybindings/handle-delete","map__95607","vec__95608","o-uid","embed-id","next-block-uid","athens.db.next_block_uid","next-block","cljs.core/first","G__95612","athens.keybindings/textarea-key-down","map__95613","d-event","athens.util/get-caret-position","goog.events.KeyCodes/TAB","goog.events.KeyCodes/ENTER","goog.events.KeyCodes/BACKSPACE","goog.events.KeyCodes/DELETE","goog.events.KeyCodes/ESC"],"sourcesContent":["(ns athens.keybindings\n  (:require\n    [\"@material-ui/icons/DesktopWindows\" :default DesktopWindows]\n    [\"@material-ui/icons/Done\" :default Done]\n    [\"@material-ui/icons/Timer\" :default Timer]\n    [\"@material-ui/icons/Today\" :default Today]\n    [\"@material-ui/icons/ViewDayRounded\" :default ViewDayRounded]\n    [\"@material-ui/icons/YouTube\" :default YouTube]\n    [athens.db :as db]\n    [athens.router :as router]\n    [athens.util :refer [scroll-if-needed get-day get-caret-position shortcut-key? escape-str]]\n    [cljsjs.react]\n    [cljsjs.react.dom]\n    [clojure.string :refer [replace-first blank?]]\n    [goog.dom :refer [getElement]]\n    [goog.dom.selection :refer [setStart setEnd getText setCursorPosition getEndPoints]]\n    [goog.events.KeyCodes :refer [isCharacterKey]]\n    [goog.functions :refer [throttle]]\n    [re-frame.core :refer [dispatch dispatch-sync subscribe]])\n  (:import\n    (goog.events\n      KeyCodes)))\n\n\n;;; Event Helpers\n\n\n(defn modifier-keys\n  [e]\n  (let [shift (.. e -shiftKey)\n        meta (.. e -metaKey)\n        ctrl (.. e -ctrlKey)\n        alt (.. e -altKey)]\n    {:shift shift :meta meta :ctrl ctrl :alt alt}))\n\n\n(defn get-end-points\n  [target]\n  (js->clj (getEndPoints target)))\n\n\n(defn set-cursor-position\n  [target idx]\n  (setCursorPosition target idx))\n\n\n(defn destruct-target\n  [target]\n  (let [value (.. target -value)\n        [start end] (get-end-points target)\n        selection (getText target)\n        head (subs value 0 start)\n        tail (subs value end)]\n    (merge {:value value}\n           {:start start :end end}\n           {:head head :tail tail}\n           {:selection selection})))\n\n\n(defn destruct-key-down\n  [e]\n  (let [key (.. e -key)\n        key-code (.. e -keyCode)\n        target (.. e -target)\n        value (.. target -value)\n        event {:key key :key-code key-code :target target :value value}\n        modifiers (modifier-keys e)\n        target-data (destruct-target target)]\n    (merge modifiers\n           event\n           target-data)))\n\n\n(def ARROW-KEYS\n  #{KeyCodes.UP\n    KeyCodes.LEFT\n    KeyCodes.DOWN\n    KeyCodes.RIGHT})\n\n\n(defn arrow-key-direction\n  [e]\n  (contains? ARROW-KEYS (.. e -keyCode)))\n\n\n;;; Dropdown: inline-search and slash commands\n\n;; TODO: some expansions require caret placement after\n(def slash-options\n  [[\"Add Todo\"      Done \"{{[[TODO]]}} \" \"cmd-enter\" nil]\n   [\"Current Time\"  Timer (fn [] (.. (js/Date.) (toLocaleTimeString [] (clj->js {\"timeStyle\" \"short\"})))) nil nil]\n   [\"Today\"         Today (fn [] (str \"[[\" (:title (get-day 0)) \"]] \")) nil nil]\n   [\"Tomorrow\"      Today (fn [] (str \"[[\" (:title (get-day -1)) \"]]\")) nil nil]\n   [\"Yesterday\"     Today (fn [] (str \"[[\" (:title (get-day 1)) \"]]\")) nil nil]\n   [\"YouTube Embed\" YouTube \"{{[[youtube]]: }}\" nil 2]\n   [\"iframe Embed\"  DesktopWindows \"{{iframe: }}\" nil 2]\n   [\"Block Embed\"   ViewDayRounded \"{{[[embed]]: (())}}\" nil 4]])\n\n;;[ \"Block Embed\" #(str \"[[\" (:title (get-day 1)) \"]]\")]\n;;[DateRange \"Date Picker\"]\n;;[Attachment \"Upload Image or File\"]\n;;[ExposurePlus1 \"Word Count\"]\n\n\n(defn filter-slash-options\n  [query]\n  (if (blank? query)\n    slash-options\n    (filterv (fn [[text]]\n               (re-find (re-pattern (str \"(?i)\" query)) text))\n             slash-options)))\n\n\n(defn update-query\n  \"Used by backspace and write-char.\n  write-char appends key character. Pass empty string during backspace.\n  query-start is determined by doing a greedy regex find up to head.\n  Head goes up to the text caret position.\"\n  [state head key type]\n  (let [query-fn        (case type\n                          :block db/search-in-block-content\n                          :page db/search-in-node-title\n                          :hashtag db/search-in-node-title\n                          :slash filter-slash-options)\n        regex           (case type\n                          :block #\"(?s).*\\(\\(\"\n                          :page #\"(?s).*\\[\\[\"\n                          :hashtag #\"(?s).*#\"\n                          :slash #\"(?s).*/\")\n        find            (re-find regex head)\n        query-start-idx (count find)\n        new-query       (str (subs head query-start-idx) key)\n        results         (query-fn new-query)]\n    (if (and (= type :slash) (empty? results))\n      (swap! state assoc :search/type nil)\n      (swap! state assoc\n             :search/index 0\n             :search/query new-query\n             :search/results results))))\n\n\n;; 1- if no results, just hide slash commands so this doesnt get triggered\n;; 2- if results, do find and replace properly\n(defn auto-complete-slash\n  ([state e]\n   (let [{:search/keys [index results]} @state\n         {:keys [value head tail target]} (destruct-key-down e)\n         [n _ expansion _ pos] (nth results index)\n         expand    (if (fn? expansion) (expansion) expansion)\n         start-idx (dec (count (re-find #\"(?s).*/\" head)))\n         new-head  (subs value 0 start-idx)\n         new-str   (str new-head expand tail)]\n     (swap! state assoc\n            :search/type nil\n            :string/local new-str)\n     (set! (.-value target) new-str)\n     (when pos\n       (let [new-idx (- (count (str new-head expand)) pos)]\n         (set-cursor-position target new-idx)\n         (when (= n \"Block Embed\")\n           (swap! state assoc :search/type :block\n                  :search/query \"\" :search/results []))))))\n  ([state target item]\n   (let [{:keys [value head tail]} (destruct-target target)\n         [_ _ expansion _ pos] item\n         expand    (if (fn? expansion) (expansion) expansion)\n         start-idx (dec (count (re-find #\"(?s).*/\" head)))\n         new-head  (subs value 0 start-idx)\n         new-str   (str new-head expand tail)]\n     (swap! state assoc\n            :search/type nil\n            :string/local new-str)\n     (set! (.-value target) new-str)\n     (when pos\n       (let [new-idx (- (count (str new-head expand)) pos)]\n         (set-cursor-position target new-idx))))))\n\n\n(defn auto-complete-hashtag\n  ([state e]\n   (let [{:search/keys [index results]} @state\n         {:keys [node/title block/uid]} (nth results index nil)\n         {:keys [value head tail]} (destruct-key-down e)\n         expansion (or title uid)\n         start-idx (count (re-find #\"(?s).*#\" head))\n         new-head  (subs value 0 start-idx)\n         new-str   (str new-head \"[[\" expansion \"]]\" tail)]\n     (if (nil? expansion)\n       (swap! state assoc :search/type nil)\n       (swap! state assoc\n              :search/type nil\n              :string/local new-str))))\n  ([state target expansion]\n   (let [{:keys [value head tail]} (destruct-target target)\n         start-idx (count (re-find #\"(?s).*#\" head))\n         new-head  (subs value 0 start-idx)\n         new-str   (str new-head \"[[\" expansion \"]]\" tail)]\n     (if (nil? expansion)\n       (swap! state assoc :search/type nil)\n       (swap! state assoc\n              :search/type nil\n              :string/local new-str)))))\n\n\n(defn auto-complete-inline\n  ([state e]\n   (let [{:search/keys [query type index results]} @state\n         {:keys [node/title block/uid]} (nth results index nil)\n         {:keys [start head tail target]} (destruct-key-down e)\n         expansion    (or title uid)\n         block?       (= type :block)\n         page?        (= type :page)\n         query        (escape-str query)\n         ;; rewrite this more cleanly\n         head-pattern (cond block? (re-pattern (str \"(?s)(.*)\\\\(\\\\(\" query))\n                            page? (re-pattern (str \"(?s)(.*)\\\\[\\\\[\" query)))\n         tail-pattern (cond block? #\"(?s)(\\)\\))?(.*)\"\n                            page? #\"(?s)(\\]\\])?(.*)\")\n         new-head     (cond block? \"$1((\"\n                            page? \"$1[[\")\n         closing-str  (cond block? \"))\"\n                            page? \"]]\")\n         replacement  (str new-head expansion closing-str)\n         replace-str  (replace-first head head-pattern replacement)\n         matches      (re-matches tail-pattern tail)\n         [_ _ after-closing-str] matches\n         new-str      (str replace-str after-closing-str)]\n     (if (nil? expansion)\n       (swap! state assoc :search/type nil)\n       (swap! state assoc :search/type nil :string/local new-str))\n     (setStart target (+ 2 start))))\n  ([state target expansion]\n   (let [{:search/keys [query type]} @state\n         {:keys [start head tail]} (destruct-target target)\n         block?       (= type :block)\n         page?        (= type :page)\n         query        (escape-str query)\n         ;; rewrite this more cleanly\n         head-pattern (cond block? (re-pattern (str \"(?s)(.*)\\\\(\\\\(\" query))\n                            page? (re-pattern (str \"(?s)(.*)\\\\[\\\\[\" query)))\n         tail-pattern (cond block? #\"(?s)(\\)\\))?(.*)\"\n                            page? #\"(?s)(\\]\\])?(.*)\")\n         new-head     (cond block? \"$1((\"\n                            page? \"$1[[\")\n         closing-str  (cond block? \"))\"\n                            page? \"]]\")\n         replacement  (str new-head expansion closing-str)\n         replace-str  (replace-first head head-pattern replacement)\n         matches      (re-matches tail-pattern tail)\n         [_ _ after-closing-str] matches\n         new-str      (str replace-str after-closing-str)]\n     (if (nil? expansion)\n       (swap! state assoc :search/type nil)\n       (swap! state assoc :search/type nil :string/local new-str))\n     (setStart target (+ 2 start)))))\n\n\n;;; Arrow Keys\n\n\n(defn block-start?\n  [e]\n  (let [[start _] (get-end-points (.. e -target))]\n    (zero? start)))\n\n\n(defn block-end?\n  [e]\n  (let [{:keys [value end]} (destruct-key-down e)]\n    (= end (count value))))\n\n\n(defn dec-cycle\n  [min max idx]\n  (if (<= idx min)\n    max\n    (dec idx)))\n\n\n(defn inc-cycle\n  [min max idx]\n  (if (>= idx max)\n    min\n    (inc idx)))\n\n\n(defn cycle-list\n  \"If user has slash menu or inline search dropdown open:\n  - pressing down increments index\n  - pressing up decrements index\n  0 is typically min index\n  max index is collection length minus 1\"\n  [min max idx up? down?]\n  (let [f (cond up? dec-cycle\n                down? inc-cycle)]\n    (f min max idx)))\n\n\n(defn max-idx\n  [coll]\n  (-> coll count dec))\n\n\n(defn handle-arrow-key\n  [e uid state]\n  (let [{:keys [key-code shift ctrl target selection]} (destruct-key-down e)\n        selection?      (not (blank? selection))\n        start?          (block-start? e)\n        end?            (block-end? e)\n        {:search/keys [results type index] caret-position :caret-position} @state\n        textarea-height (.. target -offsetHeight) ;; this height is accurate, but caret-position height is not updating\n        {:keys [top height]} caret-position\n        rows            (js/Math.round (/ textarea-height height))\n        row             (js/Math.ceil (/ top height))\n        top-row?        (= row 1)\n        bottom-row?     (= row rows)\n        up?             (= key-code KeyCodes.UP)\n        down?           (= key-code KeyCodes.DOWN)\n        left?           (= key-code KeyCodes.LEFT)\n        right?          (= key-code KeyCodes.RIGHT)\n        header          (db/v-by-ea (db/e-by-av :block/uid uid) :block/header)]\n\n    (cond\n      ;; Shift: select block if leaving block content boundaries (top or bottom rows). Otherwise select textarea text (default)\n      shift (cond\n              left? nil\n              right? nil\n              (or (and up? top-row?)\n                  (and down? bottom-row?)) (do\n                                             (.. target blur)\n                                             (dispatch [:selected/add-item uid])))\n\n      ;; Control: fold or unfold blocks\n      ctrl (cond\n             left? nil\n             right? nil\n             (or up? down?) (let [[uid _]        (db/uid-and-embed-id uid)\n                                  new-open-state (cond\n                                                   up? false\n                                                   down? true)\n                                  event [:transact [[:db/add [:block/uid uid] :block/open new-open-state]]]]\n                              (.. e preventDefault)\n                              (dispatch event)))\n\n      ;; Type, one of #{:slash :block :page}: If slash commands or inline search is open, cycle through options\n      type (cond\n             (or left? right?) (swap! state assoc :search/index 0 :search/type nil)\n             (or up? down?) (let [cur-index    index\n                                  min-index    0\n                                  max-index    (max-idx results)\n                                  next-index   (cycle-list min-index max-index cur-index up? down?)\n                                  container-el (getElement \"dropdown-menu\")\n                                  target-el    (getElement (str \"dropdown-item-\" next-index))]\n                              (.. e preventDefault)\n                              (swap! state assoc :search/index next-index)\n                              (scroll-if-needed target-el container-el)))\n\n      selection? nil\n\n      ;; Else: navigate across blocks\n      ;; FIX: always navigates up or down for header because get-caret-position for some reason returns the wrong value for top\n      (or (and up? top-row?)\n          (and left? start?)\n          (and up? header)) (do (.. e preventDefault)\n                                (dispatch [:up uid]))\n      (or (and down? bottom-row?)\n          (and right? end?)\n          (and down? header)) (do (.. e preventDefault)\n                                  (dispatch [:down uid])))))\n\n\n;;; Tab\n\n(defn handle-tab\n  \"Bug: indenting sets the cursor position to 0, likely because a new textarea element is created on the DOM. Set selection appropriately.\n  See :indent event for why value must be passed as well.\"\n  [e _uid _state]\n  (.. e preventDefault)\n  (let [{:keys [shift] :as d-key-down} (destruct-key-down e)\n        selected-items                 @(subscribe [:selected/items])\n        editing-uid                    @(subscribe [:editing/uid])]\n    (when (empty? selected-items)\n      (if shift\n        (dispatch [:unindent editing-uid d-key-down])\n        (dispatch [:indent editing-uid d-key-down])))))\n\n\n(defn handle-escape\n  \"BUG: escape is fired 24 times for some reason.\"\n  [e state]\n  (.. e preventDefault)\n  (swap! state assoc :search/type nil)\n  (dispatch [:editing/uid nil]))\n\n\n(def throttled-dispatch-sync\n  (throttle #(dispatch-sync %) 50))\n\n\n(defn handle-enter\n  [e uid state]\n  (let [{:keys [shift ctrl meta head tail value] :as d-key-down} (destruct-key-down e)\n        {:search/keys [type]} @state]\n    (.. e preventDefault)\n    (cond\n      type (case type\n             :slash (auto-complete-slash state e)\n             :page (auto-complete-inline state e)\n             :block (auto-complete-inline state e)\n             :hashtag (auto-complete-hashtag state e))\n      ;; shift-enter: add line break to textarea\n      shift (swap! state assoc :string/local (str head \"\\n\" tail))\n      ;; cmd-enter: cycle todo states. 13 is the length of the {{[[TODO]]}} string\n      (shortcut-key? meta ctrl) (let [first    (subs value 0 13)\n                                      new-tail (subs value 13)\n                                      new-str  (cond (= first \"{{[[TODO]]}} \") (str \"{{[[DONE]]}} \" new-tail)\n                                                     (= first \"{{[[DONE]]}} \") new-tail\n                                                     :else (str \"{{[[TODO]]}} \" value))]\n                                  (swap! state assoc :string/local new-str))\n      ;; default: may mutate blocks, important action, no delay on 1st event, then throttled\n      :else (throttled-dispatch-sync [:enter uid d-key-down]))))\n\n\n;;; Pair Chars: auto-balance for backspace and writing chars\n\n(def PAIR-CHARS\n  {\"(\" \")\"\n   \"[\" \"]\"\n   \"{\" \"}\"\n   \"\\\"\" \"\\\"\"})\n  ;;\"`\" \"`\"\n  ;;\"*\" \"*\"\n   ;;\"_\" \"_\"})\n\n\n(defn surround\n  \"https://github.com/tpope/vim-surround\"\n  [selection around]\n  (if-let [complement (get PAIR-CHARS around)]\n    (str around selection complement)\n    (str around selection around)))\n\n\n;; TODO: put text caret in correct position\n(defn handle-shortcuts\n  [e uid state]\n  (let [{:keys [key-code head tail selection start end target value]} (destruct-key-down e)\n        selection?       (not= start end)\n\n        surround-and-set (fn [surround-text]\n                           (.preventDefault e)\n                           (.stopPropagation e)\n                           (let [selection (surround selection surround-text)\n                                 new-str   (str head selection tail)]\n                             ;; https://developer.mozilla.org/en-US/docs/Web/API/Document/execCommand\n                             ;; textarea setval will lose ability to undo/redo\n\n                             ;; other note: execCommand is probably the simpler way\n                             ;; at least until a new standard comes around\n\n                             ;; be wary before updating electron - as chromium might drop support for execCommand\n                             ;; electron 11 - uses chromium < 90(latest) which supports execCommand\n                             (swap! state assoc :string/local new-str)\n                             (.. js/document (execCommand \"insertText\" false selection))\n                             (if selection?\n                               (do (setStart target (+ 2 start))\n                                   (setEnd target (+ 2 end)))\n                               (set-cursor-position target (+ start 2)))))]\n\n    (cond\n      (and (= key-code KeyCodes.A) (= selection value)) (let [closest-node-page  (.. target (closest \".node-page\"))\n                                                              closest-block-page (.. target (closest \".block-page\"))\n                                                              closest            (or closest-node-page closest-block-page)\n                                                              block              (db/get-block [:block/uid (.. closest -dataset -uid)])\n                                                              children           (->> (:block/children block)\n                                                                                      (sort-by :block/order)\n                                                                                      (mapv :block/uid))]\n                                                          (dispatch [:selected/add-items children]))\n      ;; When undo no longer makes changes for local textarea, do datascript undo.\n      (= key-code KeyCodes.Z) (let [{:string/keys [local previous]} @state]\n                                (when (= local previous)\n                                  (dispatch [:undo])))\n\n      (= key-code KeyCodes.B) (surround-and-set \"**\")\n\n      (= key-code KeyCodes.I) (surround-and-set \"__\")\n\n      (= key-code KeyCodes.Y) (surround-and-set \"~~\")\n\n      (= key-code KeyCodes.U) (surround-and-set \"--\")\n\n      (= key-code KeyCodes.H) (surround-and-set \"^^\")\n\n      ;; if caret within [[brackets]] or #[[brackets]], navigate to that page\n      ;; if caret on a #hashtag, navigate to that page\n      ;; if caret within ((uid)), navigate to that uid\n      ;; otherwise zoom into current block\n\n      (= key-code KeyCodes.O) (let [[uid _]   (db/uid-and-embed-id uid)\n                                    link      (str (replace-first head #\"(?s)(.*)\\[\\[\" \"\")\n                                                   (replace-first tail #\"(?s)\\]\\](.*)\" \"\"))\n                                    hashtag   (str (replace-first head #\"(?s).*#\" \"\")\n                                                   (replace-first tail #\"(?s)\\s(.*)\" \"\"))\n                                    block-ref (str (replace-first head #\"(?s)(.*)\\(\\(\" \"\")\n                                                   (replace-first tail #\"(?s)\\)\\)(.*)\" \"\"))]\n\n                                ;; save block before navigating away\n                                (db/transact-state-for-uid uid state)\n\n                                (cond\n                                  (and (re-find #\"(?s)\\[\\[\" head)\n                                       (re-find #\"(?s)\\]\\]\" tail)\n                                       (nil? (re-find #\"(?s)\\[\" link))\n                                       (nil? (re-find #\"(?s)\\]\" link)))\n                                  (let [eid (db/e-by-av :node/title link)\n                                        uid (db/v-by-ea eid :block/uid)]\n                                    (if eid\n                                      (router/navigate-uid uid e)\n                                      (let [new-uid (athens.util/gen-block-uid)]\n                                        (.blur target)\n                                        (dispatch [:page/create link new-uid])\n                                        (js/setTimeout #(router/navigate-uid new-uid e) 50))))\n\n                                  ;; same logic as link\n                                  (and (re-find #\"(?s)#\" head)\n                                       (re-find #\"(?s)\\s\" tail))\n                                  (let [eid (db/e-by-av :node/title hashtag)\n                                        uid (db/v-by-ea eid :block/uid)]\n                                    (if eid\n                                      (router/navigate-uid uid e)\n                                      (let [new-uid (athens.util/gen-block-uid)]\n                                        (.blur target)\n                                        (dispatch [:page/create link new-uid])\n                                        (js/setTimeout #(router/navigate-uid new-uid e) 50))))\n\n                                  (and (re-find #\"(?s)\\(\\(\" head)\n                                       (re-find #\"(?s)\\)\\)\" tail)\n                                       (nil? (re-find #\"(?s)\\(\" block-ref))\n                                       (nil? (re-find #\"(?s)\\)\" block-ref))\n                                       (db/e-by-av :block/uid block-ref))\n                                  (router/navigate-uid block-ref e)\n\n                                  :else (router/navigate-uid uid e))))))\n\n\n(defn pair-char?\n  [e]\n  (let [{:keys [key]} (destruct-key-down e)\n        pair-char-set (-> PAIR-CHARS\n                          seq\n                          flatten\n                          set)]\n    (pair-char-set key)))\n\n\n(defn handle-pair-char\n  [e _ state]\n  (let [{:keys [key head tail target start end selection value]} (destruct-key-down e)\n        close-pair (get PAIR-CHARS key)\n        lookbehind-char (nth value start nil)]\n    (.. e preventDefault)\n\n    (cond\n      ;; when close char, increment caret index without writing more\n      (or (= \")\" key lookbehind-char)\n          (= \"}\" key lookbehind-char)\n          (= \"\\\"\" key lookbehind-char)\n          (= \"]\" key lookbehind-char)) (do (setStart target (inc start))\n                                           (swap! state assoc :search/type nil))\n\n      (= selection \"\") (let [new-str (str head key close-pair tail)\n                             new-idx (inc start)]\n                         (swap! state assoc :string/local new-str)\n                         (set! (.-value target) new-str)\n                         (set-cursor-position target new-idx)\n                         (when (>= (count (:string/local @state)) 4)\n                           (let [four-char        (subs (:string/local @state) (dec start) (+ start 3))\n                                 double-brackets? (= \"[[]]\" four-char)\n                                 double-parens?   (= \"(())\" four-char)\n                                 type             (cond double-brackets? :page\n                                                        double-parens? :block)]\n                             (when type\n                               (swap! state assoc :search/type type :search/query \"\" :search/results [])))))\n\n      (not= selection \"\") (let [surround-selection (surround selection key)\n                                new-str            (str head surround-selection tail)]\n                            (swap! state assoc :string/local new-str)\n                            (set! (.-value target) new-str)\n                            (set! (.-selectionStart target) (inc start))\n                            (set! (.-selectionEnd target) (inc end))\n                            (let [four-char        (str (subs (:string/local @state) (dec start) (inc start))\n                                                        (subs (:string/local @state) (+ end 1) (+ end 3)))\n                                  double-brackets? (= \"[[]]\" four-char)\n                                  double-parens?   (= \"(())\" four-char)\n                                  type             (cond double-brackets? :page\n                                                         double-parens? :block)\n                                  query-fn         (cond double-brackets? db/search-in-node-title\n                                                         double-parens? db/search-in-block-content)]\n                              (when type\n                                (swap! state assoc :search/type type :search/query selection :search/results (query-fn selection))))))))\n\n\n;; Backspace\n\n(defn handle-backspace\n  [e uid state]\n  (let [{:keys [start value target end]} (destruct-key-down e)\n        no-selection? (= start end)\n        sub-str (subs value (dec start) (inc start))\n        possible-pair (#{\"[]\" \"{}\" \"()\"} sub-str)\n        head    (subs value 0 (dec start))\n        {:search/keys [type]} @state\n        look-behind-char (nth value (dec start) nil)]\n\n    (cond\n      (and (block-start? e) no-selection?) (dispatch [:backspace uid value])\n      ;; pair char: hide inline search and auto-balance\n      possible-pair (let [head    (subs value 0 (dec start))\n                          tail    (subs value (inc start))\n                          new-str (str head tail)\n                          new-idx (dec start)]\n                      (.. e preventDefault)\n                      (swap! state assoc\n                             :search/type nil\n                             :string/local new-str)\n                      (set! (.-value target) new-str)\n                      (set-cursor-position target new-idx))\n\n      ;; slash: close dropdown\n      (and (= \"/\" look-behind-char) (= type :slash)) (swap! state assoc :search/type nil)\n      ;; hashtag: close dropdown\n      (and (= \"#\" look-behind-char) (= type :hashtag)) (swap! state assoc :search/type nil)\n      ;; dropdown is open: update query\n      type (update-query state head \"\" type))))\n\n\n;; Character: for queries\n\n(defn is-character-key?\n  \"Closure returns true even when using modifier keys. We do not make that assumption.\"\n  [e]\n  (let [{:keys [meta ctrl alt key-code]} (destruct-key-down e)]\n    (and (not meta) (not ctrl) (not alt)\n         (isCharacterKey key-code))))\n\n\n(defn write-char\n  \"When user types /, trigger slash menu.\n  If user writes a character while there is a slash/type, update query and results.\"\n  [e _uid state]\n  (let [{:keys [head key]} (destruct-key-down e)\n        {:search/keys [type]} @state]\n    (cond\n      (and (= key \" \") (= type :hashtag)) (swap! state assoc\n                                                 :search/type nil\n                                                 :search/results [])\n      (and (= key \"/\") (nil? type)) (swap! state assoc\n                                           :search/index 0\n                                           :search/query \"\"\n                                           :search/type :slash\n                                           :search/results slash-options)\n      (and (= key \"#\") (nil? type)) (swap! state assoc\n                                           :search/index 0\n                                           :search/query \"\"\n                                           :search/type :hashtag\n                                           :search/results [])\n      type (update-query state head key type))))\n\n\n(defn handle-delete\n  \"Delete has the same behavior as pressing backspace on the next block.\"\n  [e uid state]\n  (let [{:keys [start end value]} (destruct-key-down e)\n        no-selection?             (= start end)\n        end?                      (= end (count value))\n        ;; using original block uid(o-uid) data to get next block\n        [o-uid embed-id]          (db/uid-and-embed-id uid)\n        next-block-uid            (db/next-block-uid o-uid)]\n    (when (and no-selection? end? next-block-uid)\n      (let [next-block (db/get-block [:block/uid (-> next-block-uid db/uid-and-embed-id first)])]\n        (dispatch [:backspace (cond-> next-block-uid\n                                embed-id (str \"-embed-\" embed-id))\n                   (str (:block/string state) (:block/string next-block))])))))\n\n\n(defn textarea-key-down\n  [e uid state]\n  ;; don't process key events from block that lost focus (quick Enter & Tab)\n  (when (= uid @(subscribe [:editing/uid]))\n    (let [d-event (destruct-key-down e)\n          {:keys [meta ctrl key-code]} d-event]\n\n      ;; used for paste, to determine if shift key was held down\n      (swap! state assoc :last-keydown d-event)\n\n      ;; update caret position for search dropdowns and for up/down\n      (when (nil? (:search/type @state))\n        (let [caret-position (get-caret-position (.. e -target))]\n          (swap! state assoc :caret-position caret-position)))\n\n      ;; dispatch center\n      ;; only when nothing is selected or duplicate/events dispatched\n      ;; after some ops(like delete) can cause errors\n      (when (empty? @(subscribe [:selected/items]))\n        (cond\n          (arrow-key-direction e)         (handle-arrow-key e uid state)\n          (pair-char? e)                  (handle-pair-char e uid state)\n          (= key-code KeyCodes.TAB)       (handle-tab e uid state)\n          (= key-code KeyCodes.ENTER)     (handle-enter e uid state)\n          (= key-code KeyCodes.BACKSPACE) (handle-backspace e uid state)\n          (= key-code KeyCodes.DELETE)    (handle-delete e uid state)\n          (= key-code KeyCodes.ESC)       (handle-escape e state)\n          (shortcut-key? meta ctrl)       (handle-shortcuts e uid state)\n          (is-character-key? e)           (write-char e uid state))))))\n\n"]}