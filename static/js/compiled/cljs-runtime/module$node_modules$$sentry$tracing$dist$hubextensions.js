shadow$provide.module$node_modules$$sentry$tracing$dist$hubextensions=function(global,require,module,exports){function traceHeaders(){var scope=this.getScope();return scope&&(scope=scope.getSpan())?{"sentry-trace":scope.toTraceparent()}:{}}function sample(hub,transaction,samplingContext){var _a,client=hub.getClient();hub=client&&client.getOptions()||{};if(!client||!utils_2.hasTracingEnabled(hub))return transaction.sampled=!1,transaction;if(void 0!==transaction.sampled)return transaction;"function"===
typeof hub.tracesSampler?samplingContext=hub.tracesSampler(samplingContext):(samplingContext=samplingContext.parentSampled,samplingContext=void 0!==samplingContext?samplingContext:hub.tracesSampleRate);isNaN(samplingContext)||"number"!==typeof samplingContext&&"boolean"!==typeof samplingContext?(utils_1.logger.warn("[Tracing] Given sample rate is invalid. Sample rate must be a boolean or a number between 0 and 1. Got "+JSON.stringify(samplingContext)+" of type "+JSON.stringify(typeof samplingContext)+
"."),client=!1):0>samplingContext||1<samplingContext?(utils_1.logger.warn("[Tracing] Given sample rate is invalid. Sample rate must be between 0 and 1. Got "+samplingContext+"."),client=!1):client=!0;if(!client)return utils_1.logger.warn("[Tracing] Discarding transaction because of invalid sample rate."),transaction.sampled=!1,transaction;if(!samplingContext)return utils_1.logger.log("[Tracing] Discarding transaction because "+("function"===typeof hub.tracesSampler?"tracesSampler returned 0 or false":
"tracesSampleRate is set to 0")),transaction.sampled=!1,transaction;transaction.sampled=Math.random()<samplingContext;if(!transaction.sampled)return utils_1.logger.log("[Tracing] Discarding transaction because it's not included in the random sample (sampling rate \x3d "+Number(samplingContext)+")"),transaction;transaction.initSpanRecorder(null===(_a=hub._experiments)||void 0===_a?void 0:_a.maxSpans);utils_1.logger.log("[Tracing] starting "+transaction.op+" transaction - "+transaction.name);return transaction}
function getDefaultSamplingContext(transactionContext){transactionContext={transactionContext,parentSampled:transactionContext.parentSampled};if(utils_1.isNodeEnv()){var domain=hub_1.getActiveDomain();if(domain){var requestType_1=utils_1.dynamicRequire(module,"http").IncomingMessage;if(domain=domain.members.find(function(member){return utils_1.isInstanceOf(member,requestType_1)}))transactionContext.request=utils_1.extractNodeRequestData(domain)}}else domain=utils_1.getGlobalObject(),"location"in domain&&
(transactionContext.location=tslib_1.__assign({},domain.location));return transactionContext}function _startTransaction(transactionContext,customSamplingContext){var transaction=new transaction_1.Transaction(transactionContext,this);return sample(this,transaction,tslib_1.__assign(tslib_1.__assign({},getDefaultSamplingContext(transactionContext)),customSamplingContext))}function _addTracingExtensions(){var carrier=hub_1.getMainCarrier();carrier.__SENTRY__&&(carrier.__SENTRY__.extensions=carrier.__SENTRY__.extensions||
{},carrier.__SENTRY__.extensions.startTransaction||(carrier.__SENTRY__.extensions.startTransaction=_startTransaction),carrier.__SENTRY__.extensions.traceHeaders||(carrier.__SENTRY__.extensions.traceHeaders=traceHeaders))}Object.defineProperty(exports,"__esModule",{value:!0});var tslib_1=require("module$node_modules$tslib$tslib"),hub_1=require("module$node_modules$$sentry$hub$dist$index"),utils_1=require("module$node_modules$$sentry$utils$dist$index"),errors_1=require("module$node_modules$$sentry$tracing$dist$errors"),
idletransaction_1=require("module$node_modules$$sentry$tracing$dist$idletransaction"),transaction_1=require("module$node_modules$$sentry$tracing$dist$transaction"),utils_2=require("module$node_modules$$sentry$tracing$dist$utils");exports.startIdleTransaction=function(hub,transactionContext,idleTimeout,onScope){idleTimeout=new idletransaction_1.IdleTransaction(transactionContext,hub,idleTimeout,onScope);return sample(hub,idleTimeout,getDefaultSamplingContext(transactionContext))};exports._addTracingExtensions=
_addTracingExtensions;exports.addExtensionMethods=function(){_addTracingExtensions();errors_1.registerErrorInstrumentation()}}
//# sourceMappingURL=module$node_modules$$sentry$tracing$dist$hubextensions.js.map
