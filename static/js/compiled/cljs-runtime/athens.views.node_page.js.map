{"version":3,"sources":["athens/views/node_page.cljs"],"mappings":"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","names":["athens.views.node-page/page-style","athens.views.node-page/title-style","athens.style.color","garden.selectors/+","athens.views.node-page/references-style","athens.views.node-page/references-heading-style","athens.views.node-page/references-list-style","athens.views.node-page/references-group-title-style","athens.views.node-page/references-group-style","athens.views.node-page/reference-breadcrumbs-style","athens.views.node-page/references-group-block-style","athens.views.node-page/page-menu-toggle-style","athens.views.node-page/handle-new-first-child-block-click","parent-uid","new-uid","athens.util/gen-block-uid","now","athens.util/now-ts","re-frame.core/dispatch","athens.views.node-page/handle-enter","e","uid","_state","children","map__60536","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","node-page","block-page","start","value","athens.keybindings/destruct-key-down","cljs.core/empty?","athens.views.node-page/handle-page-arrow-key","state","map__60538","map__60539","cljs.core/deref","map__60540","key-code","target","start?","athens.keybindings/block-start?","end?","athens.keybindings/block-end?","caret-position","textarea-height","top","height","rows","js/Math.round","row","js/Math.ceil","top-row?","cljs.core._EQ_","bottom-row?","up?","goog.events.KeyCodes/UP","down?","goog.events.KeyCodes/DOWN","left?","goog.events.KeyCodes/LEFT","right?","goog.events.KeyCodes/RIGHT","athens.views.node-page/handle-key-down","map__60547","shift","athens.util/get-caret-position","cljs.core.swap_BANG_","cljs.core/assoc","athens.keybindings/arrow-key-direction","cljs.core/not","goog.events.KeyCodes/ENTER","var_args","G__60560","athens.views.node-page/auto-inc-untitled","js/Error","athens.views.node_page.auto_inc_untitled","n","G__60561","G__60562","G__60563","datascript.core/q","athens.db/dsdb","athens.views.node-page/handle-change","athens.views.node-page/map-new-refs","linked-refs","old-title","new-title","cljs.core.map","p__60564","map__60565","string","new-str","clojure.string/replace","athens.patterns/linked","athens.views.node-page/get-existing-page","local-title","G__60567","G__60568","G__60569","athens.views.node-page/existing-block-count","cljs.core/count","G__60575","G__60576","G__60577","athens.views.node-page/handle-blur","node","map__60579","map__60580","dbid","initial","local","cljs.core.not_EQ_","existing-page","linked-ref-blocks","cljs.core.mapcat","cljs.core/second","new-linked-refs","new-page","new-datoms","cljs.core.concat","new-parent-uid","existing-page-block-count","reindex","p__60587","map__60588","order","delete-page","cancel-fn","cljs.core/merge","athens.views.node-page/init-state","confirm-fn","athens.router.navigate_uid","athens.views.node-page/placeholder-block-el","stylefy.core.use_style","athens.views.blocks/bullet-style","athens.views.node-page/sync-title","title","athens.views.node-page/menu-dropdown","_node","_daily-note?","ref","cljs.core.atom","handle-click-outside","and__4115__auto__","reagent.core/create-class","_this","goog.events/listen","js/document","goog.events/unlisten","daily-note?","map__60593","map__60594","sidebar","show","cljs.core.merge","p1__60591#","athens.views.dropdown/dropdown-style","cljs.core/reset!","athens.views.dropdown/menu-style","athens.views.buttons/button","js/module$node_modules$$material_ui$icons$BookmarkBorder.default","js/module$node_modules$$material_ui$icons$Bookmark.default","js/module$node_modules$$material_ui$icons$BubbleChart.default","athens.views.dropdown/menu-separator-style","athens.router/navigate","js/module$node_modules$$material_ui$icons$Delete.default","athens.views.node-page/ref-comp","block","reagent.core.atom","cljs.core/random-uuid","cljs.core/rest","linked-ref-data","cljs.core/set","_","map__60597","parents","embed-id","athens.db/get-block-document","athens.views.breadcrumbs/breadcrumbs-list","cljs.core.doall","iter__4529__auto__","s__60600","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","b__60602","cljs.core/chunk-buffer","i__60601","map__60603","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__60599","cljs.core/chunk-rest","map__60605","cljs.core/first","cljs.core/cons","athens.views.breadcrumbs/breadcrumb","new-B","new-P","cljs.core.drop_last","athens.parse-renderer/parse-and-render","or__4126__auto__","athens.views.blocks/block-el","athens.util/recursively-modify-block-for-embed","athens.views.node-page/linked-ref-el","daily-notes?","linked?","cljs.core/not-empty","cljs.core/update","js/module$node_modules$$material_ui$icons$KeyboardArrowDown.default","js/module$node_modules$$material_ui$icons$ChevronRight.default","reagent.core/adapt-react-class","js/module$node_modules$$material_ui$icons$Link.default","s__60608","b__60610","i__60609","vec__60611","cljs.core.nth","iter__60607","vec__60618","group-title","group","athens.parse-renderer/pull-node-from-string","s__60615","b__60617","i__60616","iter__60614","s__60622","b__60624","i__60623","iter__60621","athens.views.node-page/unlinked-ref-el","unlinked-refs","unlinked?","un-refs","athens.db/get-unlinked-references","athens.util/escape-str","s__60627","b__60629","i__60628","vec__60630","iter__60626","vec__60643","s__60634","b__60636","i__60635","iter__60633","s__60647","b__60649","i__60648","iter__60646","hm","cljs.core.into","cljs.core/PersistentHashMap","new-unlinked-refs","p1__60625#","cljs.core.update_in","cljs.core.filter","p__60637","map__60638","p__60640","map__60641","p__60650","map__60651","p__60653","map__60654","athens.views.node-page/node-page-el","editing-uid","map__60656","map__60657","message","alert-show","athens.util/is-daily-note","on-daily-notes?","re_frame.core.subscribe","athens.views.alerts/alert-component","js/module$node_modules$$material_ui$icons$MoreHoriz.default","komponentit.autosize/textarea","clojure.string/blank?","s__60661","b__60663","i__60662","map__60664","iter__60660","map__60666","child","athens.views.node-page/node-page-component","ident","map__60668","athens.db/get-node-document","athens.db/get-linked-references","cljs.core/chunk-first"],"sourcesContent":["(ns athens.views.node-page\n  (:require\n    [\"@material-ui/icons/Bookmark\" :default Bookmark]\n    [\"@material-ui/icons/BookmarkBorder\" :default BookmarkBorder]\n    [\"@material-ui/icons/BubbleChart\" :default BubbleChart]\n    [\"@material-ui/icons/ChevronRight\" :default ChevronRight]\n    [\"@material-ui/icons/Delete\" :default Delete]\n    [\"@material-ui/icons/KeyboardArrowDown\" :default KeyboardArrowDown]\n    [\"@material-ui/icons/Link\" :default Link]\n    [\"@material-ui/icons/MoreHoriz\" :default MoreHoriz]\n    [athens.db :as db :refer [get-linked-references get-unlinked-references]]\n    [athens.keybindings :refer [destruct-key-down arrow-key-direction block-start? block-end?]]\n    [athens.parse-renderer :as parse-renderer :refer [pull-node-from-string parse-and-render]]\n    [athens.patterns :as patterns]\n    [athens.router :refer [navigate-uid navigate]]\n    [athens.style :refer [color]]\n    [athens.util :refer [now-ts gen-block-uid escape-str is-daily-note get-caret-position recursively-modify-block-for-embed]]\n    [athens.views.alerts :refer [alert-component]]\n    [athens.views.blocks :refer [block-el bullet-style]]\n    [athens.views.breadcrumbs :refer [breadcrumbs-list breadcrumb]]\n    [athens.views.buttons :refer [button]]\n    [athens.views.dropdown :refer [dropdown-style menu-style menu-separator-style]]\n    [cljsjs.react]\n    [cljsjs.react.dom]\n    [clojure.string :as str]\n    [datascript.core :as d]\n    [garden.selectors :as selectors]\n    [goog.events :refer [listen unlisten]]\n    [komponentit.autosize :as autosize]\n    [re-frame.core :refer [dispatch subscribe]]\n    [reagent.core :as r]\n    [stylefy.core :as stylefy :refer [use-style]])\n  (:import\n    (goog.events\n      KeyCodes)))\n\n;;; Styles\n\n\n(def page-style\n  {:margin \"2rem auto\"\n   :padding \"1rem 2rem 10rem 2rem\"\n   :flex-basis \"100%\"\n   :max-width \"55rem\"})\n\n\n(def title-style\n  {:position \"relative\"\n   :overflow \"visible\"\n   :flex-grow \"1\"\n   :margin \"0.10em 0 0.10em 1rem\"\n   :letter-spacing \"-0.03em\"\n   :white-space \"pre-line\"\n   :word-break \"break-word\"\n   :line-height \"1.40em\"\n   ::stylefy/manual [[:textarea {:display \"none\"}]\n                     [:&:hover [:textarea {:display \"block\"\n                                           :z-index 1}]]\n                     [:textarea {:-webkit-appearance \"none\"\n                                 :cursor \"text\"\n                                 :resize \"none\"\n                                 :transform \"translate3d(0,0,0)\"\n                                 :color \"inherit\"\n                                 :font-weight \"inherit\"\n                                 :padding \"0\"\n                                 :letter-spacing \"inherit\"\n                                 :position \"absolute\"\n                                 :top \"0\"\n                                 :left \"0\"\n                                 :right \"0\"\n                                 :width \"100%\"\n                                 :min-height \"100%\"\n                                 :caret-color (color :link-color)\n                                 :background \"transparent\"\n                                 :margin \"0\"\n                                 :font-size \"inherit\"\n                                 :line-height \"inherit\"\n                                 :border-radius \"0.25rem\"\n                                 :transition \"opacity 0.15s ease\"\n                                 :border \"0\"\n                                 :opacity \"0\"\n                                 :font-family \"inherit\"}]\n                     [:textarea:focus\n                      :.is-editing {:outline \"none\"\n                                    :z-index 3\n                                    :display \"block\"\n                                    :opacity \"1\"}]\n                     [(selectors/+ :.is-editing :span) {:opacity 0}]]})\n\n\n(def references-style {:margin-top \"3em\"})\n\n\n(def references-heading-style\n  {:font-weight \"normal\"\n   :display \"flex\"\n   :padding \"0 0.5rem 0 0\"\n   :align-items \"center\"\n   ::stylefy/manual [[:svg {:margin-right \"0.25em\"\n                            :font-size \"1rem\"}]]})\n\n\n(def references-list-style\n  {:font-size \"14px\"})\n\n\n(def references-group-title-style\n  {:color (color :link-color)\n   :margin \"0 1.5rem\"\n   :font-weight \"500\"\n   ::stylefy/manual [[:a:hover {:cursor \"pointer\"\n                                :text-decoration \"underline\"}]]})\n\n\n(def references-group-style\n  {:background (color :background-minus-2 :opacity-med)\n   :padding \"1rem 0.5rem\"\n   :border-radius \"0.25rem\"\n   :margin \"0.5em 0\"})\n\n\n(def reference-breadcrumbs-style\n  {:font-size \"12px\"\n   :padding \"0.25rem calc(2rem - 0.5em)\"})\n\n\n(def references-group-block-style\n  {:border-top [[\"1px solid \" (color :border-color)]]\n   :width      \"100%\"\n   :padding-block-start \"1em\"\n   :margin-block-start \"1em\"\n   ::stylefy/manual [[:&:first-of-type {:border-top \"0\"\n                                        :margin-block-start \"0\"}]]})\n\n\n(def page-menu-toggle-style\n  {:position \"absolute\"\n   :left \"-0.5rem\"\n   :border-radius \"1000px\"\n   :padding \"0.375rem 0.5rem\"\n   :color (color :body-text-color :opacity-high)\n   :top \"50%\"\n   :transform \"translate(-100%, -50%)\"})\n\n\n;;; Helpers\n\n\n(defn handle-new-first-child-block-click\n  [parent-uid]\n  (let [new-uid   (gen-block-uid)\n        now       (now-ts)]\n    (dispatch [:transact [{:block/uid       parent-uid\n                           :edit/time       now\n                           :block/children  [{:block/order  0\n                                              :block/uid    new-uid\n                                              :block/open   true\n                                              :block/string \"\"}]}]])\n    (dispatch [:editing/uid new-uid])))\n\n\n(defn handle-enter\n  [e uid _state children]\n  (.. e preventDefault)\n  (let [node-page  (.. e -target (closest \".node-page\"))\n        block-page (.. e -target (closest \".block-page\"))\n        {:keys [start value]} (destruct-key-down e)]\n    (cond\n      block-page (dispatch [:split-block-to-children uid value start])\n      node-page (if (empty? children)\n                  (handle-new-first-child-block-click uid)\n                  (dispatch [:down uid])))))\n\n\n(defn handle-page-arrow-key\n  [e uid state]\n  (let [{:keys [key-code target]} (destruct-key-down e)\n        start?          (block-start? e)\n        end?            (block-end? e)\n        {caret-position :caret-position} @state\n        textarea-height (.. target -offsetHeight)\n        {:keys [top height]} caret-position\n        rows            (js/Math.round (/ textarea-height height))\n        row             (js/Math.ceil (/ top height))\n        top-row?        (= row 1)\n        bottom-row?     (= row rows)\n        up?             (= key-code KeyCodes.UP)\n        down?           (= key-code KeyCodes.DOWN)\n        left?           (= key-code KeyCodes.LEFT)\n        right?          (= key-code KeyCodes.RIGHT)]\n\n    (cond\n      (or (and up? top-row?)\n          (and left? start?)) (do (.. e preventDefault)\n                                  (dispatch [:up uid e]))\n      (or (and down? bottom-row?)\n          (and right? end?)) (do (.. e preventDefault)\n                                 (dispatch [:down uid e])))))\n\n\n(defn handle-key-down\n  [e uid state children]\n  (let [{:keys [key-code shift]} (destruct-key-down e)\n        caret-position (get-caret-position (.. e -target))]\n    (swap! state assoc :caret-position caret-position)\n    (cond\n      (arrow-key-direction e) (handle-page-arrow-key e uid state)\n      (and (not shift) (= key-code KeyCodes.ENTER)) (handle-enter e uid state children))))\n\n\n(defn auto-inc-untitled\n  ([] (auto-inc-untitled nil))\n  ([n]\n   (if (empty? (d/q '[:find [?e ...]\n                      :in $ ?t\n                      :where\n                      [?e :node/title ?t]]\n                    @db/dsdb (str \"Untitled\" (when n (str \"-\" n)))))\n     (str \"Untitled\" (when n (str \"-\" n)))\n     (auto-inc-untitled (+ n 1)))))\n\n\n(defn handle-change\n  [e state]\n  (let [value (.. e -target -value)]\n    (swap! state assoc :title/local value)))\n\n\n(defn map-new-refs\n  \"Find and replace linked ref with new linked ref, based on title change.\"\n  [linked-refs old-title new-title]\n  (map (fn [{:block/keys [uid string]}]\n         (let [new-str (str/replace string\n                                    (patterns/linked old-title)\n                                    (str \"$1$3$4\" new-title \"$2$5\"))]\n           {:db/id [:block/uid uid]\n            :block/string new-str}))\n       linked-refs))\n\n\n(defn get-existing-page\n  \"?uid used for navigate-uid. Go to existing page following the merge.\"\n  [local-title]\n  (d/q '[:find ?uid .\n         :in $ ?t\n         :where\n         [?e :node/title ?t]\n         [?e :block/uid ?uid]]\n       @db/dsdb local-title))\n\n\n(defn existing-block-count\n  \"Count is used to reindex blocks after merge.\"\n  [local-title]\n  (count (d/q '[:find [?ch ...]\n                :in $ ?t\n                :where\n                [?e :node/title ?t]\n                [?e :block/children ?ch]]\n              @db/dsdb local-title)))\n\n\n(declare init-state)\n\n\n(defn handle-blur\n  \"When textarea blurs and its value is different from initial page title:\n   - if no other page exists, rewrite page title and linked refs\n   - else page with same title does exists: prompt to merge\n     - confirm-fn: delete current page, rewrite linked refs, merge blocks, and navigate to existing page\n     - cancel-fn: reset state\n  The current blocks will be at the end of the existing page.\"\n  [node state linked-refs]\n  (let [{dbid :db/id children :block/children} node\n        {:keys [title/initial title/local]} @state]\n    (when (not= initial local)\n      (let [existing-page     (get-existing-page local)\n            linked-ref-blocks (mapcat second linked-refs)\n            new-linked-refs   (map-new-refs linked-ref-blocks initial local)]\n        (if (empty? existing-page)\n          (let [new-page   {:db/id dbid :node/title local}\n                new-datoms (concat [new-page] new-linked-refs)]\n            (swap! state assoc :title/initial local)\n            (dispatch [:transact new-datoms]))\n          (let [new-parent-uid            existing-page\n                existing-page-block-count (existing-block-count local)\n                reindex                   (map (fn [{:block/keys [order uid]}]\n                                                 {:db/id           [:block/uid uid]\n                                                  :block/order     (+ order existing-page-block-count)\n                                                  :block/_children [:block/uid new-parent-uid]})\n                                               children)\n                delete-page               [:db/retractEntity dbid]\n                new-datoms                (concat [delete-page]\n                                                  new-linked-refs\n                                                  reindex)\n                cancel-fn                 #(swap! state merge init-state)\n                confirm-fn                (fn []\n                                            (navigate-uid new-parent-uid)\n                                            (dispatch [:transact new-datoms])\n                                            (cancel-fn))]\n            (swap! state assoc\n                   :alert/show true\n                   :alert/message (str \"\\\"\" local \"\\\"\" \" already exists, merge pages?\")\n                   :alert/confirm-fn confirm-fn\n                   :alert/cancel-fn cancel-fn)))))))\n\n\n;;; Components\n\n(defn placeholder-block-el\n  [parent-uid]\n  [:div {:class \"block-container\"}\n   [:div {:style {:display \"flex\"}}\n    [:span (use-style bullet-style)]\n    [:span {:on-click #(handle-new-first-child-block-click parent-uid)} \"Click here to add content...\"]]])\n\n\n(defn sync-title\n  \"Ensures :title/initial is synced to node/title.\n  Cases:\n  - User opens a page for the first time.\n  - User navigates from a page to another page.\n  - User merges current page with existing page, navigating to existing page.\"\n  [title state]\n  (when (not= title (:title/initial @state))\n    (swap! state assoc :title/initial title :title/local title)))\n\n\n(def init-state\n  {:menu/show            false\n   :title/initial        nil\n   :title/local          nil\n   :alert/show           nil\n   :alert/message        nil\n   :alert/confirm-fn     nil\n   :alert/cancel-fn      nil\n   \"Linked References\"   true\n   \"Unlinked References\" false})\n\n\n(defn menu-dropdown\n  [_node state _daily-note?]\n  (let [ref                  (atom nil)\n        handle-click-outside (fn [e]\n                               (when (and (:menu/show @state)\n                                          (not (.. @ref (contains (.. e -target)))))\n                                 (swap! state assoc :menu/show false)))]\n    (r/create-class\n      {:display-name           \"node-page-menu\"\n       :component-did-mount    (fn [_this] (listen js/document \"mousedown\" handle-click-outside))\n       :component-will-unmount (fn [_this] (unlisten js/document \"mousedown\" handle-click-outside))\n       :reagent-render         (fn [node state daily-note?]\n                                 (let [{:block/keys [uid] sidebar :page/sidebar title :node/title} node\n                                       {:menu/keys [show]} @state]\n                                   (when show\n                                     [:div (merge (use-style dropdown-style\n                                                             {:ref #(reset! ref %)})\n                                                  {:style {:font-size \"14px\"\n                                                           :position  \"absolute\"\n                                                           :left      \"-3em\"\n                                                           :top       \"3.5em\"}})\n                                      [:div (use-style menu-style)\n                                       [:<>\n                                        (if sidebar\n                                          [button {:on-click #(dispatch [:page/remove-shortcut uid])}\n                                           [:<>\n                                            [:> BookmarkBorder]\n                                            [:span \"Remove Shortcut\"]]]\n                                          [button {:on-click #(dispatch [:page/add-shortcut uid])}\n                                           [:<>\n                                            [:> Bookmark]\n                                            [:span \"Add Shortcut\"]]])\n                                        [button {:on-click #(dispatch [:right-sidebar/open-item uid true])}\n                                         [:<>\n                                          [:> BubbleChart]\n                                          [:span \"Show Local Graph\"]]]]\n                                       [:hr (use-style menu-separator-style)]\n                                       [button {:on-click #(if daily-note?\n                                                             (dispatch [:daily-note/delete uid title])\n                                                             (do\n                                                               (navigate :pages)\n                                                               (dispatch [:page/delete uid title])))}\n                                        [:<> [:> Delete] [:span \"Delete Page\"]]]]])))})))\n\n\n(defn ref-comp\n  [block]\n  (let [state           (r/atom {:block     block\n                                 :embed-id  (random-uuid)\n                                 :parents   (rest (:block/parents block))})\n        linked-ref-data {:linked-ref     true\n                         :initial-open   true\n                         :linked-ref-uid (:block/uid block)\n                         :parent-uids    (set (map :block/uid (:block/parents block)))}]\n    (fn [_]\n      (let [{:keys [block parents embed-id]} @state\n            block (db/get-block-document (:db/id block))]\n        [:<>\n         [breadcrumbs-list {:style reference-breadcrumbs-style}\n          (doall\n            (for [{:keys [node/title block/string block/uid]} parents]\n              [breadcrumb {:key       (str \"breadcrumb-\" uid)\n                           :on-click #(do (let [new-B (db/get-block-document [:block/uid uid])\n                                                new-P (drop-last parents)]\n                                            (swap! state assoc :block new-B :parents new-P)))}\n               [parse-and-render (or title string) (:block/uid block)]]))]\n         [:div.block-embed\n          [block-el\n           (recursively-modify-block-for-embed block embed-id)\n           linked-ref-data\n           {:block-embed? true}]]]))))\n\n\n(defn linked-ref-el\n  [state daily-notes? linked-refs]\n  (let [linked? \"Linked References\"]\n    (when (or (and daily-notes? (not-empty linked-refs))\n              (not daily-notes?))\n      [:section (use-style references-style)\n       [:h4 (use-style references-heading-style)\n        [button {:on-click (fn [] (swap! state update linked? not))}\n         (if (get @state linked?)\n           [:> KeyboardArrowDown]\n           [:> ChevronRight])]\n        [(r/adapt-react-class Link)]\n        [:div {:style {:display \"flex\"\n                       :flex \"1 1 100%\"\n                       :justify-content \"space-between\"}}\n         [:span linked?]]]\n       (when (get @state linked?)\n         [:div (use-style references-list-style)\n          (doall\n            (for [[group-title group] linked-refs]\n              [:div (use-style references-group-style {:key (str \"group-\" group-title)})\n               [:h4 (use-style references-group-title-style)\n                [:a {:on-click #(navigate-uid (:block/uid @(pull-node-from-string group-title)))} group-title]]\n               (doall\n                 (for [block group]\n                   ^{:key (str \"ref-\" (:block/uid block))}\n                   [:div {:style {:display \"flex\"\n                                  :flex \"1 1 100%\"\n                                  :justify-content \"space-between\"\n                                  :align-items \"flex-start\"}}\n                    [:div (use-style references-group-block-style)\n                     [ref-comp block]]]))]))])])))\n\n\n(defn unlinked-ref-el\n  [state daily-notes? unlinked-refs title]\n  (let [unlinked? \"Unlinked References\"]\n    (when (not daily-notes?)\n      [:section (use-style references-style)\n       [:h4 (use-style references-heading-style)\n        [button {:on-click (fn []\n                             (if (get @state unlinked?)\n                               (swap! state assoc unlinked? false)\n                               (let [un-refs (get-unlinked-references (escape-str title))]\n                                 (swap! state assoc unlinked? true)\n                                 (reset! unlinked-refs un-refs))))}\n         (if (get @state unlinked?)\n           [:> KeyboardArrowDown]\n           [:> ChevronRight])]\n        [(r/adapt-react-class Link)]\n        [:div {:style {:display         \"flex\"\n                       :justify-content \"space-between\"\n                       :width \"100%\"}}\n         [:span unlinked?]\n         (when (and unlinked? (not-empty @unlinked-refs))\n           [button {:style    {:font-size \"14px\"}\n                    :on-click (fn []\n                                (dispatch [:unlinked-references/link-all @unlinked-refs title])\n                                (swap! state assoc unlinked? false)\n                                (reset! unlinked-refs []))}\n            \"Link All\"])]]\n       (when (get @state unlinked?)\n         [:div (use-style references-list-style)\n          (doall\n            (for [[group-title group] @unlinked-refs]\n              [:div (use-style references-group-style {:key (str \"group-\" group-title)})\n               [:h4 (use-style references-group-title-style)\n                [:a {:on-click #(navigate-uid (:block/uid @(pull-node-from-string group-title)))} group-title]]\n               (doall\n                 (for [block group]\n                   ^{:key (str \"ref-\" (:block/uid block))}\n                   [:div {:style {:display         \"flex\"\n                                  :justify-content \"space-between\"\n                                  :align-items     \"flex-start\"}}\n                    [:div (merge\n                            (use-style references-group-block-style)\n                            {:style {:max-width \"90%\"}})\n                     [ref-comp block]]\n                    (when unlinked?\n                      [button {:style    {:margin-top \"1.5em\"}\n                               :on-click (fn []\n                                           (let [hm                (into (hash-map) @unlinked-refs)\n                                                 new-unlinked-refs (->> (update-in hm [group-title] #(filter (fn [{:keys [block/uid]}]\n                                                                                                               (= uid (:block/uid block)))\n                                                                                                             %))\n                                                                        seq)]\n                                             ;; ctrl-z doesn't work though, because Unlinked Refs aren't reactive to datascript.\n                                             (reset! unlinked-refs new-unlinked-refs)\n                                             (dispatch [:unlinked-references/link block title])))}\n                       \"Link\"])]))]))])])))\n\n;; TODO: where to put page-level link filters?\n(defn node-page-el\n  \"title/initial is the title when a page is first loaded.\n  title/local is the value of the textarea.\n  We have both, because we want to be able to change the local title without transacting to the db until user confirms.\n  Similar to atom-string in blocks. Hacky, but state consistency is hard!\"\n  [_ _ _ _]\n  (let [state         (r/atom init-state)\n        unlinked-refs (r/atom [])]\n    (fn [node editing-uid linked-refs]\n      (let [{:block/keys [children uid] title :node/title} node\n            {:menu/keys [show] :alert/keys [message confirm-fn cancel-fn] alert-show :alert/show} @state\n            daily-note?  (is-daily-note uid)\n            on-daily-notes? (= :home @(subscribe [:current-route/name]))]\n\n\n        (sync-title title state)\n\n        [:div (use-style page-style {:class    [\"node-page\"]\n                                     :data-uid uid})\n\n         (when alert-show\n           [:div (use-style {:position \"absolute\"\n                             :top      \"50px\"\n                             :left     \"35%\"})\n            [alert-component message confirm-fn cancel-fn]])\n\n         ;; Header\n         [:h1 (use-style title-style\n                         {:data-uid uid\n                          :class    \"page-header\"\n                          :on-click (fn [e]\n                                      (.. e preventDefault)\n                                      (if (or daily-note? (.. e -shiftKey))\n                                        (navigate-uid uid e)\n                                        (dispatch [:editing/uid uid])))})\n          ;; Prevent editable textarea if a node/title is a date\n          ;; Don't allow title editing from daily notes, right sidebar, or node-page itself.\n          [button {:class    [(when show \"active\")]\n                   :on-click (fn [e]\n                               (.. e stopPropagation)\n                               (if show\n                                 (swap! state assoc :menu/show false)\n                                 (swap! state merge {:menu/show true})))\n                   :style    page-menu-toggle-style}\n           [:> MoreHoriz]]\n          (when-not daily-note?\n            [autosize/textarea\n             {:value       (:title/local @state)\n              :id          (str \"editable-uid-\" uid)\n              :class       (when (= editing-uid uid) \"is-editing\")\n              :on-blur     (fn [_]\n                             ;; add title Untitled-n for empty titles\n                             (when (empty? (:title/local @state))\n                               (swap! state assoc :title/local (auto-inc-untitled)))\n                             (handle-blur node state linked-refs))\n              :on-key-down (fn [e] (handle-key-down e uid state children))\n              :on-change   (fn [e] (handle-change e state))}])\n          ;; empty word break to keep span on full height else it will collapse to 0 height (weird ui)\n          (if (str/blank? (:title/local @state))\n            [:wbr]\n            [parse-renderer/parse-and-render (:title/local @state) uid])\n\n          ;; Dropdown\n          [menu-dropdown node state daily-note?]]\n\n         ;; Children\n         (if (empty? children)\n           [placeholder-block-el uid]\n           [:div\n            (for [{:block/keys [uid] :as child} children]\n              ^{:key uid}\n              [block-el child])])\n\n         ;; References\n         [linked-ref-el state on-daily-notes? linked-refs]\n         [unlinked-ref-el state on-daily-notes? unlinked-refs title]]))))\n\n\n(defn node-page-component\n  [ident]\n  (let [{:keys [#_block/uid node/title] :as node} (db/get-node-document ident)\n        editing-uid   @(subscribe [:editing/uid])\n        linked-refs   (get-linked-references title)]\n    [node-page-el node editing-uid linked-refs]))\n"]}