{"version":3,"sources":["athens/walk.cljc"],"mappings":";AAOA;;;AAAA,AAAMA,AAEHC;AAFH,AAGE,AAAME,AAAK,AAAA,AAACC;AAAZ,AACE,AAAAC,AAAA,AAAA,AACc;AAAOG;AAAP,AACE,AAAMC,AAAY,AAAA,AAACC,AAAYF;AAA/B,AACE,AAAA,AAAA,AAAAG,AAACC,AAAMT,AAAKU;AAAZ,AAAiC,AAAAF,AAACG,AAAOL;;;AACzC,AAAA,AAAA,AAAAM,AAACH,AAAMT,AAAKU;AAAZ,AAA+B,AAAAE,AAAA,AAAA,AAACD,AAAoBL;;;AACpD,AAAA,AAAA,AAAUA;;;AAJPD;;;;AAAAA;;AAAAA;;;AAAAA;AAAAA;;;;;AADrB,AAMc;AAAOA;AAAP,AACE,AAAMC,AAAY,AAAA,AAACC,AAAYF;AAA/B,AACE,AAAA,AAAA,AAAAQ,AAACJ,AAAMT,AAAKU;AAAZ,AAAiC,AAAAG,AAACF,AAAOL;;;AACzC,AAAA,AAAA,AAAAQ,AAACL,AAAMT,AAAKU;AAAZ,AAA+B,AAAAI,AAAA,AAAA,AAACH,AAAoBL;;;AACpD,AAAA,AAASA;;;AAJND;;;;AAAAA;;AAAAA;;;AAAAA;AAAAA;;;;;AANrB,AAWc,AAAKU;AAAL,AAAU,AAAA,AAAA,AAAAC,AAACP,AAAMT,AAAKU;AAAZ,AAAgC,AAAAM,AAACL,AAAOI;;;AAXhEZ,AAYE,AAACc,AAAoBnB;AAZvB,AAAA,AAAAI,AAAAC,AAAAD,AAAAC,AAACC,AAAAA,AAAAA;;AADH,AAAAL,AAcGC","names":["athens.walk/walk-string","string","cljs.core/deref","data","cljs.core.atom","G__95811","G__95812","instaparse.core/transform","title","inner-title","clojure.string.join","p1__95798#","cljs.core.swap_BANG_","cljs.core/update","cljs.core.conj","p1__95802#","p1__95803#","p1__95804#","uid","p1__95806#","athens.parser/parse-to-ast"],"sourcesContent":["(ns athens.walk\n  (:require\n    [athens.parser :as parser]\n    [clojure.string :as str]\n    [instaparse.core :as parse]))\n\n\n(defn walk-string\n  \"Walk previous and new strings to delete or add links, block references, etc. to datascript.\"\n  [string]\n  (let [data (atom {})]\n    (parse/transform\n      {:page-link (fn [& title]\n                    (let [inner-title (str/join \"\" title)]\n                      (swap! data update :node/titles #(conj % inner-title))\n                      (swap! data update :page/refs #(conj % [:node/title inner-title]))\n                      (str \"[[\" inner-title \"]]\")))\n       :hashtag   (fn [& title]\n                    (let [inner-title (str/join \"\" title)]\n                      (swap! data update :node/titles #(conj % inner-title))\n                      (swap! data update :page/refs #(conj % [:node/title inner-title]))\n                      (str \"#\" inner-title)))\n       :block-ref (fn [uid] (swap! data update :block/refs #(conj % uid)))}\n      (parser/parse-to-ast string))\n    @data))\n\n"]}