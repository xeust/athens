{"version":3,"sources":["stylefy/impl/styles.cljc"],"mappings":"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","names":["stylefy.impl.styles/global-vendor-prefixes","cljs.core.atom","stylefy.impl.styles/add-global-vendors","style","cljs.core.merge","clojure.set.union","cljs.core/deref","p__95344","map__95345","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","stylefy.impl.styles/create-style!","props","hash","style-created-handler","style-css","stylefy.impl.conversion.style__GT_css","G__95356","seq__95357","cljs.core/seq","chunk__95358","count__95359","i__95360","temp__5735__auto__","cljs.core/chunked-seq?","c__4556__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","sub-style","cljs.core/vals","G__95365","G__95366","G__95367","G__95368","stylefy.impl.hashing/hash-style","stylefy.impl.styles/class-into-string","class","cljs.core/Keyword","cljs.core/name","cljs.core/vector?","clojure.string.join","cljs.core.remove","cljs.core/nil?","cljs.core.mapv","stylefy.impl.styles/validate-class-definition","origin","js/Error","p1__95369#","cljs.core/every?","cljs.core.pr_str","stylefy.impl.styles/prepare-style-return-value","style-hash","options","stylefy.impl.log/warn","style-with-classes","html-attributes","stylefy.impl.utils/remove-special-keywords","html-attributes-class","html-attributes-inline-style","class-as-string","style-with-classes-as-string","final-class","clojure.string/trim","final-html-attributes","cljs.core/empty?","stylefy.impl.styles/style-return-value","return-map","stylefy.impl.dom/style-in-dom?","contains-media-queries?","contains-feature-queries?","contains-manual-mode?","excluded-modes","modes","mode-names","cljs.core/map?","cljs.core/set","cljs.core/keys","cljs.core.map","contains-modes-not-excluded?","cljs.core.filter","cljs.core.comp","cljs.core/not","inline-style","stylefy.impl.conversion/garden-units->css","stylefy.impl.styles/use-style!","stylefy.impl.state/check-stylefy-initialisation","style-with-global-vendors","already-created","stylefy.impl.dom/style-by-hash","stylefy.impl.styles/use-sub-style!","resolved-sub-style","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","stylefy.impl.styles/sub-style","seq95482","G__95483","self__4723__auto__","sub-styles","p1__95465#","p2__95474#","cljs.core.reduce","cljs.core.get_in","G__95495","stylefy.impl.styles/prepare-styles","p__95499","map__95500","styles","stylefy.impl.styles.prepare_styles","request-dom-update-after-done?","seq__95505","chunk__95506","count__95507","i__95508","stylefy.impl.dom/save-style!","stylefy.impl.dom/update-dom-if-requested","stylefy.impl.styles/init-global-vendor-prefixes","global-vendor-prefixes-options","cljs.core/reset!"],"sourcesContent":["(ns stylefy.impl.styles\r\n  (:require [garden.core :refer [css]]\r\n            [clojure.string :as str]\r\n            #?(:cljs [stylefy.impl.dom :as dom])\r\n            [stylefy.impl.hashing :as hashing]\r\n            [stylefy.impl.utils :as utils]\r\n            [stylefy.impl.state :as state]\r\n            [stylefy.impl.conversion :as conversion]\r\n            [stylefy.impl.log :as log]\r\n            [clojure.set :as set]))\r\n\r\n(def global-vendor-prefixes (atom {:stylefy.core/vendors #{}\r\n                                   :stylefy.core/auto-prefix #{}}))\r\n\r\n(defn- add-global-vendors [style]\r\n  (merge style\r\n         {:stylefy.core/vendors (set/union (:stylefy.core/vendors @global-vendor-prefixes)\r\n                                           (:stylefy.core/vendors style))\r\n          :stylefy.core/auto-prefix (set/union (:stylefy.core/auto-prefix @global-vendor-prefixes)\r\n                                               (:stylefy.core/auto-prefix style))}))\r\n\r\n(defn- create-style! [{:keys [props hash] :as style} style-created-handler]\r\n  (let [style-css (conversion/style->css style)]\r\n    (style-created-handler {:css style-css :hash hash})\r\n\r\n    ; Create sub-styles (if any)\r\n    (doseq [sub-style (vals (:stylefy.core/sub-styles props))]\r\n      (create-style!\r\n        {:props sub-style :hash (hashing/hash-style sub-style)}\r\n        style-created-handler))))\r\n\r\n(defn- class-into-string\r\n  \"Return class definition as string, or nil if the argument is nil.\"\r\n  [class]\r\n  (when class\r\n    (cond\r\n     (string? class) class\r\n     (keyword? class) (name class)\r\n     (vector? class) (str/join \" \"\r\n                               (remove nil? (mapv class-into-string class))))))\r\n\r\n(defn validate-class-definition [class origin]\r\n  (assert (or (nil? class)\r\n              (string? class)\r\n              (keyword? class)\r\n              (and (vector? class)\r\n                   (every? #(or (string? %) (keyword? %) (nil? %)) class)))\r\n          (str \"Unsupported \" origin \" type. It should be nil, keyword, string or vector of strings/keywords). Got: \" (pr-str class))))\r\n\r\n(defn- prepare-style-return-value\r\n  \"Given a style, hash and options, returns HTML attributes for a Hiccup component,\r\n   or nil if there are not any attributes.\"\r\n  [style style-hash options]\r\n\r\n  (when (:stylefy.core/with-classes options)\r\n    (log/warn \":stylefy.core/with-classes is deprecated in options map (since 1.3.0, removed in 2.0.0), use :class instead.\"))\r\n\r\n  (let [style-with-classes (:stylefy.core/with-classes style)\r\n        html-attributes (utils/remove-special-keywords options)\r\n        html-attributes-class (:class html-attributes)\r\n        html-attributes-inline-style (:style html-attributes)]\r\n\r\n    (validate-class-definition html-attributes-class \":class\")\r\n    (validate-class-definition style-with-classes \":stylefy.core/with-classes\")\r\n    (assert (nil? html-attributes-inline-style) \"HTML attribute :style is not supported in options map. Instead, you should provide your style definitions as the first argument when calling use-style.\")\r\n\r\n    (let [class-as-string (class-into-string html-attributes-class)\r\n          style-with-classes-as-string (class-into-string style-with-classes)\r\n          final-class (str/trim\r\n                        (str\r\n                          style-hash \" \"\r\n                          (str/join \" \" (remove nil? [class-as-string style-with-classes-as-string]))))\r\n          final-html-attributes (merge\r\n                                  html-attributes\r\n                                  (when (not (empty? final-class)) {:class final-class}))]\r\n\r\n      (when (not (empty? final-html-attributes))\r\n        final-html-attributes))))\r\n\r\n(defn style-return-value [style style-hash options]\r\n  (let [return-map (prepare-style-return-value style style-hash options)]\r\n    #?(:cljs (if (or (empty? style)\r\n                     (dom/style-in-dom? style-hash))\r\n               return-map\r\n               ; The style definition has not been added into the DOM yet, so return the style props\r\n               ; as inline style. Inline style gets replaced soon as the style definition\r\n               ; is added into the DOM and the component re-renders itself.\r\n               ; However, if there are media queries, specific mode definitions etc., inline styling is probably\r\n               ; going to look wrong. In that case, hide the component completely until the DOM is ready.\r\n               (let [contains-media-queries? (some? (:stylefy.core/media style))\r\n                     contains-feature-queries? (some? (:stylefy.core/supports style))\r\n                     contains-manual-mode? (some? (:stylefy.core/manual style))\r\n                     excluded-modes #{:hover}\r\n                     modes (:stylefy.core/mode style)\r\n                     mode-names (cond\r\n                                  (map? modes) (set (keys modes))\r\n                                  (vector? modes) (set (map first modes))\r\n                                  :default #{})\r\n                     contains-modes-not-excluded? (not (empty?\r\n                                                         (filter (comp not excluded-modes)\r\n                                                                 mode-names)))\r\n                     inline-style (-> style\r\n                                      (utils/remove-special-keywords)\r\n                                      (conversion/garden-units->css))]\r\n                 (if (or contains-media-queries?\r\n                         contains-feature-queries?\r\n                         contains-manual-mode?\r\n                         contains-modes-not-excluded?)\r\n                   (merge return-map {:style (merge inline-style {:visibility \"hidden\"})})\r\n                   (merge return-map {:style inline-style}))))\r\n       :clj  return-map)))\r\n\r\n(defn use-style! [style options style-created-handler]\r\n  (state/check-stylefy-initialisation)\r\n  (let [style-with-global-vendors (when-not (empty? style) (add-global-vendors style))\r\n        style-hash (hashing/hash-style style-with-global-vendors)\r\n        already-created #?(:cljs (dom/style-by-hash style-hash)\r\n                           :clj false)] ; TODO Read from css-in-context?\r\n\r\n    (when (and (not (empty? style-with-global-vendors))\r\n               (some? style-hash)\r\n               (not already-created))\r\n      (create-style!\r\n        {:props style-with-global-vendors :hash style-hash}\r\n        style-created-handler))\r\n\r\n    (style-return-value style-with-global-vendors style-hash options)))\r\n\r\n(defn use-sub-style! [style sub-style options style-created-handler]\r\n  (let [resolved-sub-style (get (:stylefy.core/sub-styles style) sub-style)]\r\n    (if resolved-sub-style\r\n      (use-style! resolved-sub-style options style-created-handler)\r\n      (log/warn (str \"Sub-style \" (pr-str sub-style) \" not found in style: \" (pr-str style))))))\r\n\r\n(defn sub-style\r\n  [style & sub-styles]\r\n  (let [resolved-sub-style (reduce #(get-in %1 [:stylefy.core/sub-styles %2])\r\n                                   style\r\n                                   sub-styles)]\r\n\r\n    (if resolved-sub-style\r\n      resolved-sub-style\r\n      (log/warn (str \"Sub-style \" (pr-str sub-styles) \" not found in style: \" (pr-str style))))))\r\n\r\n#?(:cljs\r\n   (defn prepare-styles\r\n     ([styles]\r\n      (prepare-styles styles {:request-dom-update-after-done? true}))\r\n     ([styles {:keys [request-dom-update-after-done?] :as options}]\r\n      (let [styles (remove nil? styles)]\r\n\r\n        (doseq [style styles]\r\n          (use-style! style {} dom/save-style!)\r\n          (when-let [sub-styles (vals (:stylefy.core/sub-styles style))]\r\n            (prepare-styles sub-styles {:request-dom-update-after-done? false}))))\r\n\r\n      (when request-dom-update-after-done?\r\n        (dom/update-dom-if-requested)))))\r\n\r\n(defn init-global-vendor-prefixes [options]\r\n  (let [global-vendor-prefixes-options (:global-vendor-prefixes options)]\r\n    (reset! global-vendor-prefixes\r\n            {:stylefy.core/vendors (:stylefy.core/vendors global-vendor-prefixes-options)\r\n             :stylefy.core/auto-prefix (:stylefy.core/auto-prefix global-vendor-prefixes-options)})))\r\n"]}