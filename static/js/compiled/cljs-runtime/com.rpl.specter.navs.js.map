{"version":3,"sources":["com/rpl/specter/navs.cljc"],"mappings":"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","names":["com.rpl.specter.navs/not-selected?*","compiled-path","vals","structure","com.rpl.specter.impl.compiled_select_any_STAR_","com.rpl.specter.impl/NONE","com.rpl.specter.navs/selected?*","com.rpl.specter.navs/all-select","next-fn","cljs.core.reduce","curr__66165__auto__","ret__66166__auto__","cljs.core/reduced?","cljs.core/reduced","e","com.rpl.specter.navs/queue?","coll","cljs.core._EQ_","cljs.core/type","cljs.core.into","cljs.core/PersistentQueue","com$rpl$specter$navs$AllTransformProtocol$all_transform$dyn","x__4428__auto__","m__4429__auto__","com.rpl.specter.navs/all-transform","goog/typeOf","m__4426__auto__","cljs.core/missing-protocol","com.rpl.specter.navs/AllTransformProtocol","com.rpl.specter.navs/void-transformed-kv-pair?","newkv","cljs.core/count","com.rpl.specter.navs/non-transient-map-all-transform","empty-map","cljs.core/reduce-kv","m","k","v","G__73198","cljs.core.assoc","cljs.core.nth","com.rpl.specter.navs/not-NONE?","com.rpl.specter.navs/all-transform-list","cljs.core.doall","cljs.core.sequence","cljs.core.comp","cljs.core.map","cljs.core.filter","com.rpl.specter.navs/all-transform-record","res","kv","cljs.core.conj","goog.object/set","cljs.core/PROTOCOL_SENTINEL","cljs.core/MapEntry","newk","G__73227","cljs.core/key","newv","G__73229","cljs.core/val","cljs.core/->MapEntry","cljs.core/PersistentVector","cljs.core/PersistentHashSet","cljs.core/PersistentArrayMap","cljs.core/PersistentTreeMap","cljs.core/empty","cljs.core/PersistentHashMap","cljs.core/persistent!","G__73250","cljs.core.assoc_BANG_","cljs.core/transient","cljs.core/record?","empty-structure","cljs.core/list?","cljs.core/map?","G__73257","com$rpl$specter$navs$MapTransformProtocol$map_vals_transform$dyn","com.rpl.specter.navs/map-vals-transform","com$rpl$specter$navs$MapTransformProtocol$map_keys_transform$dyn","com.rpl.specter.navs/map-keys-transform","com.rpl.specter.navs/MapTransformProtocol","com.rpl.specter.navs/map-vals-non-transient-transform","com.rpl.specter.navs/map-keys-non-transient-transform","com.rpl.specter.navs/srange-select","start","end","G__73299","cljs.core.subs","cljs.core/vec","cljs.core.subvec","com.rpl.specter.navs/srange-transform","com.rpl.specter.impl/srange-transform*","com.rpl.specter.navs/extract-basic-filter-fn","path","cljs.core/fn?","cljs.core/coll?","cljs.core/every?","combined","afn","and__4115__auto__","com.rpl.specter.navs/if-select","then-tester","then-nav","else-nav","com.rpl.specter.protocols/select*","com.rpl.specter.navs/if-transform","com.rpl.specter.protocols/transform*","com$rpl$specter$navs$AddExtremes$append_all$dyn","com.rpl.specter.navs/append-all","com$rpl$specter$navs$AddExtremes$prepend_all$dyn","com.rpl.specter.navs/prepend-all","com$rpl$specter$navs$AddExtremes$append_one$dyn","com.rpl.specter.navs/append-one","com$rpl$specter$navs$AddExtremes$prepend_one$dyn","com.rpl.specter.navs/prepend-one","com.rpl.specter.navs/AddExtremes","elements","elem","_","cljs.core/List","cljs.core/conj","ret","<>","cljs.core/conj!","cljs.core.concat","cljs.core/cons","com$rpl$specter$navs$UpdateExtremes$update_first$dyn","com.rpl.specter.navs/update-first","com$rpl$specter$navs$UpdateExtremes$update_last$dyn","com.rpl.specter.navs/update-last","com.rpl.specter.navs/UpdateExtremes","s","com$rpl$specter$navs$GetExtremes$get_first$dyn","com.rpl.specter.navs/get-first","com$rpl$specter$navs$GetExtremes$get_last$dyn","com.rpl.specter.navs/get-last","com.rpl.specter.navs/GetExtremes","com$rpl$specter$navs$FastEmpty$fast_empty_QMARK_$dyn","com.rpl.specter.navs/fast-empty?","com.rpl.specter.navs/FastEmpty","com.rpl.specter.navs/PosNavigator-select*","com.rpl.specter.navs/PosNavigator-transform*","com.rpl.specter.impl/direct-nav-obj","js/com","js/com.rpl","js/com.rpl.specter","js/com.rpl.specter.navs","js/com.rpl.specter.navs.t_com$rpl$specter$navs73351","com.rpl.specter.navs/t_com$rpl$specter$navs73351","_73353","meta73352","this__71450__auto__","vals__71451__auto__","next-fn__71452__auto__","s__71453__auto__","this__4369__auto__","writer__4370__auto__","opt__4371__auto__","cljs.core/-write","com.rpl.specter.navs/->t_com$rpl$specter$navs73351","com.rpl.specter.navs/PosNavigator","getter","updater","cljs.core/not","G__73350","com.rpl.specter.navs/update-first-list","l","newf","G__73391","cljs.core/first","restl","cljs.core/rest","com.rpl.specter.navs/update-last-list","lastl","G__73402","cljs.core/last","bl","cljs.core/butlast","com.rpl.specter.navs/vec-count","com.rpl.specter.navs/transient-vec-count","val","c","G__73417","vec__73418","newe","vec__73421","e1","e2","i","G__73424","cljs.core/pop","rests","newb","G__73428","last-idx","newl","G__73434","begins","G__73435","G__73436","cljs.core/peek","cljs.core/TransientVector","cljs.core/empty?","com.rpl.specter.navs/do-keypath-transform","key","G__73466","G__73467","cljs.core.get","cljs.core/sequential?","cljs.core.dissoc","js/com.rpl.specter.navs.t_com$rpl$specter$navs73478","com.rpl.specter.navs/t_com$rpl$specter$navs73478","_73480","meta73479","com.rpl.specter.navs/->t_com$rpl$specter$navs73478","com.rpl.specter.navs/keypath*","this","G__73492","G__73493","js/com.rpl.specter.navs.t_com$rpl$specter$navs73495","com.rpl.specter.navs/t_com$rpl$specter$navs73495","_73497","meta73496","com.rpl.specter.navs/->t_com$rpl$specter$navs73495","com.rpl.specter.navs/must*","cljs.core/contains?","G__73506","G__73507","js/com.rpl.specter.navs.t_com$rpl$specter$navs73511","com.rpl.specter.navs/t_com$rpl$specter$navs73511","_73513","meta73512","com.rpl.specter.navs/->t_com$rpl$specter$navs73511","com.rpl.specter.navs/nthpath*","G__73515","G__73516","cljs.core/vector?","G__73521","G__73522","p__73523","vec__73524","this__4380__auto__","k__4381__auto__","this__4382__auto__","k73534","else__4383__auto__","G__73541","cljs.core/Keyword","end-fn","__extmap","this__4399__auto__","f__4400__auto__","init__4401__auto__","ret__4402__auto__","p__73546","vec__73547","k__4403__auto__","v__4404__auto__","this__4394__auto__","writer__4395__auto__","opts__4396__auto__","pr-pair__4397__auto__","keyval__4398__auto__","cljs.core/pr-sequential-writer","G__73533","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4378__auto__","__meta","this__4375__auto__","__hash","this__4384__auto__","this__4376__auto__","h__4238__auto__","coll__4377__auto__","cljs.core/hash-unordered-coll","this73535","other73536","this__4389__auto__","k__4390__auto__","cljs.core/-with-meta","cljs.core/not-empty","this__4387__auto__","k__4388__auto__","pred__73587","cljs.core/keyword-identical?","expr__73588","this__4392__auto__","cljs.core/seq","this__4379__auto__","this__4385__auto__","entry__4386__auto__","cljs.core/-nth","cljs.core/-conj","com.rpl.specter.navs/SrangeEndFunction","this__4423__auto__","writer__4424__auto__","G__73538","extmap__4419__auto__","G__73601","com.rpl.specter.navs/->SrangeEndFunction","com.rpl.specter.navs/map->SrangeEndFunction","com.rpl.specter.navs/invoke-end-fn","fexpr__73604"],"sourcesContent":["(ns com.rpl.specter.navs\n  #?(:cljs (:require-macros\n            [com.rpl.specter\n              :refer\n              [defnav defrichnav]]\n            [com.rpl.specter.util-macros :refer\n              [doseqres]]))\n  #?(:clj (:use [com.rpl.specter.macros :only [defnav defrichnav]]\n                [com.rpl.specter.util-macros :only [doseqres]]))\n  (:require [com.rpl.specter.impl :as i]\n            #?(:clj [clojure.core.reducers :as r])))\n\n\n(defn not-selected?*\n  [compiled-path vals structure]\n  (->> structure\n       (i/compiled-select-any* compiled-path vals)\n       (identical? i/NONE)))\n\n(defn selected?*\n  [compiled-path vals structure]\n  (not (not-selected?* compiled-path vals structure)))\n\n\n(defn all-select [structure next-fn]\n  (doseqres i/NONE [e structure]\n    (next-fn e)))\n\n#?(\n   :clj\n   (defn queue? [coll]\n     (instance? clojure.lang.PersistentQueue coll))\n\n   :cljs\n   (defn queue? [coll]\n     (= (type coll) (type #queue []))))\n\n\n(defprotocol AllTransformProtocol\n  (all-transform [structure next-fn]))\n\n(defn void-transformed-kv-pair? [newkv]\n  (or (identical? newkv i/NONE) (< (count newkv) 2)))\n\n(defn- non-transient-map-all-transform [structure next-fn empty-map]\n  (reduce-kv\n    (fn [m k v]\n      (let [newkv (next-fn [k v])]\n        (if (void-transformed-kv-pair? newkv)\n          m\n          (assoc m (nth newkv 0) (nth newkv 1)))))\n\n    empty-map\n    structure))\n\n(defn not-NONE? [v]\n  (-> v (identical? i/NONE) not))\n\n\n(defn- all-transform-list [structure next-fn]\n  (doall (sequence (comp (map next-fn) (filter not-NONE?)) structure)))\n\n(defn- all-transform-record [structure next-fn]\n  (reduce\n    (fn [res kv] (conj res (next-fn kv)))\n    structure\n    structure\n    ))\n\n(extend-protocol AllTransformProtocol\n  nil\n  (all-transform [structure next-fn]\n    nil)\n\n\n  #?(:clj clojure.lang.MapEntry)\n  #?(:clj\n     (all-transform [structure next-fn]\n       (let [newk (next-fn (key structure))\n             newv (next-fn (val structure))]\n         (clojure.lang.MapEntry. newk newv))))\n\n\n  #?(:cljs cljs.core/MapEntry)\n  #?(:cljs\n     (all-transform [structure next-fn]\n       (let [newk (next-fn (key structure))\n             newv (next-fn (val structure))]\n         (cljs.core/->MapEntry newk newv nil))))\n\n  #?(:clj clojure.lang.IPersistentVector :cljs cljs.core/PersistentVector)\n  (all-transform [structure next-fn]\n    (into []\n      (comp (map next-fn)\n            (filter not-NONE?))\n      structure))\n\n  #?(:clj clojure.lang.PersistentHashSet :cljs cljs.core/PersistentHashSet)\n  (all-transform [structure next-fn]\n    (into #{}\n      (comp (map next-fn)\n            (filter not-NONE?))\n      structure))\n\n  #?(:clj clojure.lang.PersistentArrayMap)\n  #?(:clj\n     (all-transform [structure next-fn]\n       (let [k-it (.keyIterator structure)\n             v-it (.valIterator structure)\n             none-cell (i/mutable-cell 0)\n             len (.count structure)\n             array (i/fast-object-array (* 2 len))]\n         (loop [i 0\n                j 0]\n           (if (.hasNext k-it)\n             (let [k (.next k-it)\n                   v (.next v-it)\n                   newkv (next-fn [k v])]\n               (if (void-transformed-kv-pair? newkv)\n                (do\n                  (i/update-cell! none-cell inc)\n                  (recur (+ i 2) j))\n                (do\n                  (aset array j (nth newkv 0))\n                  (aset array (inc j) (nth newkv 1))\n                  (recur (+ i 2) (+ j 2)))))))\n         (let [none-count (i/get-cell none-cell)\n               array (if (not= 0 none-count)\n                       (java.util.Arrays/copyOf array (int (* 2 (- len none-count))))\n                       array\n                       )]\n          (clojure.lang.PersistentArrayMap/createAsIfByAssoc array)))))\n\n\n  #?(:cljs cljs.core/PersistentArrayMap)\n  #?(:cljs\n     (all-transform [structure next-fn]\n       (non-transient-map-all-transform structure next-fn {})))\n\n\n  #?(:clj clojure.lang.PersistentTreeMap :cljs cljs.core/PersistentTreeMap)\n  (all-transform [structure next-fn]\n    (non-transient-map-all-transform structure next-fn (empty structure)))\n\n  #?(:clj clojure.lang.IRecord)\n  #?(:clj\n  (all-transform [structure next-fn]\n    (all-transform-record structure next-fn)))\n\n  #?(:clj clojure.lang.PersistentHashMap :cljs cljs.core/PersistentHashMap)\n  (all-transform [structure next-fn]\n    (persistent!\n      (reduce-kv\n        (fn [m k v]\n          (let [newkv (next-fn [k v])]\n            (if (void-transformed-kv-pair? newkv)\n              m\n              (assoc! m (nth newkv 0) (nth newkv 1)))))\n\n        (transient\n          #?(:clj clojure.lang.PersistentHashMap/EMPTY :cljs cljs.core.PersistentHashMap.EMPTY))\n\n        structure)))\n\n\n\n  #?(:clj Object)\n  #?(:clj\n     (all-transform [structure next-fn]\n       (let [empty-structure (empty structure)]\n         (cond (and (list? empty-structure) (not (queue? empty-structure)))\n               (all-transform-list structure next-fn)\n\n               (map? structure)\n               ;; reduce-kv is much faster than doing r/map through call to (into ...)\n               (reduce-kv\n                 (fn [m k v]\n                   (let [newkv (next-fn [k v])]\n                     (if (void-transformed-kv-pair? newkv)\n                      m\n                      (assoc m (nth newkv 0) (nth newkv 1)))))\n\n                 empty-structure\n                 structure)\n\n\n               :else\n               (->> structure\n                    (r/map next-fn)\n                    (r/filter not-NONE?)\n                    (into empty-structure))))))\n\n\n  #?(:cljs default)\n  #?(:cljs\n     (all-transform [structure next-fn]\n       (if (record? structure)\n         ;; this case is solely for cljs since extending to IRecord doesn't work for cljs\n         (all-transform-record structure next-fn)\n         (let [empty-structure (empty structure)]\n           (cond\n             (and (list? empty-structure) (not (queue? empty-structure)))\n             (all-transform-list structure next-fn)\n\n             (map? structure)\n             (reduce-kv\n               (fn [m k v]\n                 (let [newkv (next-fn [k v])]\n                   (if (void-transformed-kv-pair? newkv)\n                    m\n                    (assoc m (nth newkv 0) (nth newkv 1)))))\n                    empty-structure\n                    structure)\n\n             :else\n             (into empty-structure\n                   (comp (map next-fn) (filter not-NONE?))\n                   structure)))))))\n\n\n\n(defprotocol MapTransformProtocol\n  (map-vals-transform [structure next-fn])\n  (map-keys-transform [structure next-fn])\n  )\n\n\n\n(defn map-vals-non-transient-transform [structure empty-map next-fn]\n  (reduce-kv\n    (fn [m k v]\n      (let [newv (next-fn v)]\n        (if (identical? newv i/NONE)\n          m\n          (assoc m k newv))))\n    empty-map\n    structure))\n\n(defn map-keys-non-transient-transform [structure empty-map next-fn]\n  (reduce-kv\n    (fn [m k v]\n      (let [newk (next-fn k)]\n        (if (identical? newk i/NONE)\n          m\n          (assoc m newk v))))\n    empty-map\n    structure))\n\n(extend-protocol MapTransformProtocol\n  nil\n  (map-vals-transform [structure next-fn]\n    nil)\n  (map-keys-transform [structure next-fn]\n    nil)\n\n\n  #?(:clj clojure.lang.PersistentArrayMap)\n  #?(:clj\n     (map-vals-transform [structure next-fn]\n       (let [k-it (.keyIterator structure)\n             v-it (.valIterator structure)\n             none-cell (i/mutable-cell 0)\n             len (.count structure)\n             array (i/fast-object-array (* 2 len))]\n         (loop [i 0\n                j 0]\n           (if (.hasNext k-it)\n             (let [k (.next k-it)\n                   v (.next v-it)\n                   newv (next-fn v)]\n               (if (identical? newv i/NONE)\n                (do\n                  (i/update-cell! none-cell inc)\n                  (recur (+ i 2) j))\n                (do\n                  (aset array j k)\n                  (aset array (inc j) newv)\n                  (recur (+ i 2) (+ j 2)))))))\n         (let [none-count (i/get-cell none-cell)\n               array (if (not= 0 none-count)\n                        (java.util.Arrays/copyOf array (int (* 2 (- len none-count))))\n                        array\n                        )]\n          (clojure.lang.PersistentArrayMap. array)))))\n  #?(:clj\n     (map-keys-transform [structure next-fn]\n       (let [k-it (.keyIterator structure)\n             v-it (.valIterator structure)\n             none-cell (i/mutable-cell 0)\n             len (.count structure)\n             array (i/fast-object-array (* 2 len))]\n         (loop [i 0\n                j 0]\n           (if (.hasNext k-it)\n             (let [k (.next k-it)\n                   v (.next v-it)\n                   newk (next-fn k)]\n               (if (identical? newk i/NONE)\n                (do\n                  (i/update-cell! none-cell inc)\n                  (recur (+ i 2) j))\n                (do\n                  (aset array j newk)\n                  (aset array (inc j) v)\n                  (recur (+ i 2) (+ j 2)))))))\n         (let [none-count (i/get-cell none-cell)\n               array (if (not= 0 none-count)\n                        (java.util.Arrays/copyOf array (int (* 2 (- len none-count))))\n                        array\n                        )]\n          (clojure.lang.PersistentArrayMap/createAsIfByAssoc array)))))\n\n  #?(:cljs cljs.core/PersistentArrayMap)\n  #?(:cljs\n     (map-vals-transform [structure next-fn]\n       (map-vals-non-transient-transform structure {} next-fn)))\n  #?(:cljs\n     (map-keys-transform [structure next-fn]\n       (map-keys-non-transient-transform structure {} next-fn)))\n\n\n  #?(:clj clojure.lang.PersistentTreeMap :cljs cljs.core/PersistentTreeMap)\n  (map-vals-transform [structure next-fn]\n    (map-vals-non-transient-transform structure (empty structure) next-fn))\n  (map-keys-transform [structure next-fn]\n    (map-keys-non-transient-transform structure (empty structure) next-fn))\n\n\n  #?(:clj clojure.lang.PersistentHashMap :cljs cljs.core/PersistentHashMap)\n  (map-vals-transform [structure next-fn]\n    (persistent!\n      (reduce-kv\n        (fn [m k v]\n          (let [newv (next-fn v)]\n            (if (identical? newv i/NONE)\n              m\n              (assoc! m k newv))))\n        (transient\n          #?(:clj clojure.lang.PersistentHashMap/EMPTY :cljs cljs.core.PersistentHashMap.EMPTY))\n\n        structure)))\n  (map-keys-transform [structure next-fn]\n    (persistent!\n      (reduce-kv\n        (fn [m k v]\n          (let [newk (next-fn k)]\n            (if (identical? newk i/NONE)\n              m\n              (assoc! m newk v))))\n        (transient\n          #?(:clj clojure.lang.PersistentHashMap/EMPTY :cljs cljs.core.PersistentHashMap.EMPTY))\n\n        structure)))\n\n  #?(:clj Object :cljs default)\n  (map-vals-transform [structure next-fn]\n    (reduce-kv\n      (fn [m k v]\n        (let [newv (next-fn v)]\n          (if (identical? newv i/NONE)\n            m\n            (assoc m k newv))))\n      (empty structure)\n      structure))\n  (map-keys-transform [structure next-fn]\n    (reduce-kv\n      (fn [m k v]\n        (let [newk (next-fn k)]\n          (if (identical? newk i/NONE)\n            m\n            (assoc m newk v))))\n      (empty structure)\n      structure)))\n\n(defn srange-select [structure start end next-fn]\n  (next-fn\n    (if (string? structure)\n      (subs structure start end)\n      (-> structure vec (subvec start end))\n      )))\n\n(def srange-transform i/srange-transform*)\n\n\n(defn extract-basic-filter-fn [path]\n  (cond (fn? path)\n        path\n\n        (and (coll? path)\n             (every? fn? path))\n        (reduce\n          (fn [combined afn]\n            (fn [structure]\n              (and (combined structure) (afn structure))))\n\n          path)))\n\n\n\n\n(defn if-select [vals structure next-fn then-tester then-nav else-nav]\n  (i/exec-select*\n    (if (then-tester structure) then-nav else-nav)\n    vals\n    structure\n    next-fn))\n\n\n\n(defn if-transform [vals structure next-fn then-tester then-nav else-nav]\n  (i/exec-transform*\n    (if (then-tester structure) then-nav else-nav)\n    vals\n    structure\n    next-fn))\n\n\n\n\n(defprotocol AddExtremes\n  (append-all [structure elements])\n  (prepend-all [structure elements])\n  (append-one [structure elem])\n  (prepend-one [structure elem])\n  )\n\n(extend-protocol AddExtremes\n  nil\n  (append-all [_ elements]\n    elements)\n  (prepend-all [_ elements]\n    elements)\n  (append-one [_ elem]\n    (list elem))\n  (prepend-one [_ elem]\n    (list elem))\n\n  #?(:clj clojure.lang.IPersistentVector :cljs cljs.core/PersistentVector)\n  (append-all [structure elements]\n    (reduce conj structure elements))\n  (prepend-all [structure elements]\n    (let [ret (transient [])]\n      (as-> ret <>\n            (reduce conj! <> elements)\n            (reduce conj! <> structure)\n            (persistent! <>))))\n  (append-one [structure elem]\n    (conj structure elem))\n  (prepend-one [structure elem]\n    (into [elem] structure))\n\n\n  #?(:clj Object :cljs default)\n  (append-all [structure elements]\n    (concat structure elements))\n  (prepend-all [structure elements]\n    (concat elements structure))\n  (append-one [structure elem]\n    (concat structure [elem]))\n  (prepend-one [structure elem]\n    (cons elem structure))\n  )\n\n\n\n(defprotocol UpdateExtremes\n  (update-first [s afn])\n  (update-last [s afn]))\n\n(defprotocol GetExtremes\n  (get-first [s])\n  (get-last [s]))\n\n(defprotocol FastEmpty\n  (fast-empty? [s]))\n\n(defnav PosNavigator [getter updater]\n  (select* [this structure next-fn]\n    (if-not (fast-empty? structure)\n      (next-fn (getter structure))\n      i/NONE))\n  (transform* [this structure next-fn]\n    (if (fast-empty? structure)\n      structure\n      (updater structure next-fn))))\n\n\n(defn- update-first-list [l afn]\n  (let [newf (afn (first l))\n        restl (rest l)]\n    (if (identical? i/NONE newf)\n      restl\n      (cons newf restl))))\n\n(defn- update-last-list [l afn]\n  (let [lastl (afn (last l))\n        bl (butlast l)]\n    (if (identical? i/NONE lastl)\n      (if (nil? bl) '() bl)\n      (concat bl [lastl]))))\n\n#?(\n   :clj\n   (defn vec-count [^clojure.lang.IPersistentVector v]\n     (.length v))\n\n   :cljs\n   (defn vec-count [v]\n     (count v)))\n\n\n#?(\n   :clj\n   (defn transient-vec-count [^clojure.lang.ITransientVector v]\n     (.count v))\n\n   :cljs\n   (defn transient-vec-count [v]\n     (count v)))\n\n\n(extend-protocol UpdateExtremes\n  #?(:clj clojure.lang.IPersistentVector :cljs cljs.core/PersistentVector)\n  (update-first [v afn]\n    (let [val (nth v 0)\n          newv (afn val)]\n      (if (identical? i/NONE newv)\n        (subvec v 1)\n        (assoc v 0 newv)\n        )))\n\n  (update-last [v afn]\n    ;; type-hinting vec-count to ^int caused weird errors with case\n    (let [c (int (vec-count v))]\n      (case c\n        1 (let [[e] v\n                newe (afn e)]\n                (if (identical? i/NONE newe)\n                  []\n                  [newe]))\n        2 (let [[e1 e2] v\n                 newe (afn e2)]\n            (if (identical? i/NONE newe)\n              [e1]\n              [e1 newe]))\n        (let [i (dec c)\n              newe (afn (nth v i))]\n          (if (identical? i/NONE newe)\n            (pop v)\n            (assoc v i newe))))))\n\n  #?(:clj String :cljs string)\n  (update-first [s afn]\n    (let [rests (subs s 1 (count s))\n          newb (afn (nth s 0))]\n      (if (identical? i/NONE newb)\n        rests\n        (str newb rests))))\n\n  (update-last [s afn]\n    (let [last-idx (-> s count dec)\n          newl (afn (nth s last-idx))\n          begins (subs s 0 last-idx)]\n      (if (identical? i/NONE newl)\n        begins\n        (str begins newl)\n        )))\n\n  #?(:cljs cljs.core/MapEntry)\n  #?(:cljs\n    (update-first [e afn]\n      (cljs.core/->MapEntry (-> e key afn) (val e) nil)))\n  #?(:cljs\n    (update-last [e afn]\n      (cljs.core/->MapEntry (key e) (-> e val afn) nil)))\n\n  #?(:clj Object :cljs default)\n  (update-first [l val]\n    (update-first-list l val))\n  (update-last [l val]\n    (update-last-list l val)))\n\n\n(extend-protocol GetExtremes\n  #?(:clj clojure.lang.IPersistentVector :cljs cljs.core/PersistentVector)\n  (get-first [v]\n    (nth v 0))\n  (get-last [v]\n    (peek v))\n\n  #?(:clj Object :cljs default)\n  (get-first [s]\n    (first s))\n  (get-last [s]\n    (last s))\n\n  #?(:cljs cljs.core/MapEntry)\n  #?(:cljs\n    (get-first [e]\n      (key e)))\n  #?(:cljs\n    (get-last [e]\n      (val e)))\n\n  #?(:clj String :cljs string)\n  (get-first [s]\n    (nth s 0))\n  (get-last [s]\n    (nth s (-> s count dec))\n    ))\n\n\n\n(extend-protocol FastEmpty\n  nil\n  (fast-empty? [_] true)\n\n  #?(:clj clojure.lang.IPersistentVector :cljs cljs.core/PersistentVector)\n  (fast-empty? [v]\n    (= 0 (vec-count v)))\n  #?(:clj clojure.lang.ITransientVector :cljs cljs.core/TransientVector)\n  (fast-empty? [v]\n    (= 0 (transient-vec-count v)))\n  #?(:clj Object :cljs default)\n  (fast-empty? [s]\n    (empty? s)))\n\n\n(defn- do-keypath-transform [vals structure key next-fn]\n  (let [newv (next-fn vals (get structure key))]\n    (if (identical? newv i/NONE)\n      (if (sequential? structure)\n        (i/srange-transform* structure key (inc key) (fn [_] []))\n        (dissoc structure key))\n      (assoc structure key newv))))\n\n(defrichnav\n  ^{:doc \"Navigates to the specified key, navigating to nil if it does not exist.\n          Setting the value to NONE will remove it from the collection.\"}\n  keypath*\n  [key]\n  (select* [this vals structure next-fn]\n    (next-fn vals (get structure key)))\n  (transform* [this vals structure next-fn]\n    (do-keypath-transform vals structure key next-fn)\n    ))\n\n\n(defrichnav\n  ^{:doc \"Navigates to the key only if it exists in the map. Setting the value to NONE\n          will remove it from the collection.\"}\n  must*\n  [k]\n  (select* [this vals structure next-fn]\n    (if (contains? structure k)\n      (next-fn vals (get structure k))\n      i/NONE))\n  (transform* [this vals structure next-fn]\n   (if (contains? structure k)\n     (do-keypath-transform vals structure k next-fn)\n     structure)))\n\n(defrichnav nthpath*\n  ^{:doc \"Navigates to the given position in the sequence. Setting the value to NONE\n          will remove it from the sequence. Works for all sequence types.\"}\n  [i]\n  (select* [this vals structure next-fn]\n    (next-fn vals (nth structure i)))\n  (transform* [this vals structure next-fn]\n    (if (vector? structure)\n      (let [newv (next-fn vals (nth structure i))]\n        (if (identical? newv i/NONE)\n          (i/srange-transform* structure i (inc i) (fn [_] []))\n            (assoc structure i newv)))\n      (i/srange-transform* ; can make this much more efficient with alternate impl\n        structure\n        i\n        (inc i)\n        (fn [[e]]\n          (let [v (next-fn vals e)]\n           (if (identical? v i/NONE)\n             []\n             [v])\n           ))))))\n\n(defrecord SrangeEndFunction [end-fn])\n\n;; done this way to maintain backwards compatibility\n(defn invoke-end-fn [end-fn structure start]\n  (if (instance? SrangeEndFunction end-fn)\n    ((:end-fn end-fn) structure start)\n    (end-fn structure)\n    ))\n"]}