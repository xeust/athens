{
"version":3,
"file":"module$node_modules$deta$internal$services$base.js",
"lineCount":6,
"mappings":"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",
"sources":["node_modules/deta/internal/services/base.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$deta$internal$services$base\"] = function(global,require,module,exports) {\nconst BaseService = require('./base-service');\n\nlet isObject = i => Object.prototype.toString.call(i) === \"[object Object]\";\n\nclass Trim{}\n\nclass Base extends BaseService {\n  constructor(deta, tableName) {\n    super(deta);\n    this.getTableName = () => tableName;\n    this.util = {\n      trim : () => new Trim()\n    };\n  }\n\n  get tableName() {\n    return this.getTableName();\n  }\n\n  async get(key) {\n    if (typeof key !== 'string') throw new TypeError('Key must be a string');\n\n    // request method is GET by default\n    const { status, response } = await this.request(\n      `/${this.tableName}/items/${key}`\n    );\n\n    if (status === 404) return null;\n    return response;\n  }\n\n  async put(item, key) {\n    /** store (put) an item in the database. Overrides an item if key already exists.\n     *\n     * `key` could be provided as function argument or a field in the data object.\n     * If `key` is not provided, the server will generate a random 12 chars key.\n     */\n    const payload = isObject(item) ? item : { value: item };\n\n    if (key) payload['key'] = key;\n\n    const { status, response } = await this.request(\n      `/${this.tableName}/items`,\n      {\n        items: [payload],\n      },\n      'PUT'\n    );\n\n    return response && status === 207\n      ? response['processed']['items'][0]\n      : null;\n  }\n\n  async putMany(items) {\n    if (!(items instanceof Array))\n      throw new TypeError('Items must be an array');\n\n    if (items.length >= 25)\n      throw new Error(\"We can't put more than 25 items at a time\");\n\n    const _items = [];\n\n    items.map((item) => {\n      if (isObject(item)) _items.push(item);\n      else _items.push({ value: item });\n    });\n\n    const { status, response } = await this.request(\n      `/${this.tableName}/items`,\n      {\n        items: _items,\n      },\n      'PUT'\n    );\n    return response;\n  }\n\n  async delete(key) {\n    /* Delete an item from the database\n     * key: the key of item to be deleted\n     */\n\n    if (typeof key !== 'string') throw new TypeError('Key must be a string');\n\n    const { response } = await this.request(\n      `/${this.tableName}/items/${key}`,\n      {},\n      'DELETE'\n    );\n\n    return null;\n  }\n\n  async insert(item, key) {\n\n    const payload = isObject(item) ? item : { value: item };\n    if (key) payload['key'] = key;\n\n    const { status, response } = await this.request(\n      `/${this.tableName}/items`,\n      {\n        item: payload,\n      },\n      'POST'\n    );\n\n    if (status === 201) return response;\n    else if (status == 409)\n      throw new Error(`Item with key ${key} already exists`);\n  }\n\n  async *fetch(query = [], pages = 10, buffer = undefined) {\n    /* Fetch items from the database.\n     *\n     * 'query' is a filter or a list of filters. Without filter, it'll return the whole db\n     * Returns a generator with all the result.\n     *  We will paginate the request based on `buffer`.\n     */\n    if (pages <= 0) return;\n    const _query = Array.isArray(query) ? query : [query];\n\n    let _status;\n    let _last;\n    let _items;\n    let _count = 0;\n\n    do {\n      const payload = {\n        query: _query,\n        limit: buffer,\n        last: _last,\n      };\n\n      const { status, response } = await this.request(\n        `/${this.tableName}/query`,\n        payload,\n        'POST'\n      );\n\n      const { paging, items } = response;\n      const { last } = paging;\n\n      yield items;\n\n      _last = last;\n      _status = status;\n      _items = items;\n      _count += 1;\n    } while (_status === 200 && _last && pages > _count);\n  }\n\n  async update(updates, key){\n    if(typeof key !== 'string') throw new TypeError('Key must be a string');\n    if(!isObject(updates)) throw new TypeError('Updates must be a JSON object');\n\n    const payload = {set: {}, delete: []};\n    \n    for (let [key, value] of Object.entries(updates)) {\n      if (value instanceof Trim){\n        payload.delete.push(key);\n      } else {\n        payload.set[key] = value;\n      }\n    }\n\n    const {status, response } = await this.request(\n      `/${this.tableName}/items/${key}`,\n      payload, \n      'PATCH'\n    );\n\n    if (status == 200){\n      return null;\n    } else if (status == 404){\n      throw new Error(`Key '${key}' not found`);\n    } else{\n      throw new Error(response.errors[0]);\n    }\n  }\n}\nmodule.exports = Base;\n};"],
"names":["shadow$provide","global","require","module","exports","BaseService","isObject","i","Object","prototype","toString","call","Trim","Base","constructor","deta","tableName","getTableName","this.getTableName","util","trim","get","key","TypeError","status","response","request","put","item","payload","value","items","putMany","Array","length","Error","_items","map","push","delete","insert","fetch","query","pages","buffer","_query","isArray","_last","_count","limit","last","paging","_status","update","updates","set","entries","errors"]
}
