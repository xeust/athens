{
"version":3,
"file":"module$node_modules$$sentry$integrations$dist$extraerrordata.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/@sentry/integrations/dist/extraerrordata.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$sentry$integrations$dist$extraerrordata\"] = function(global,require,module,exports) {\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar utils_1 = require(\"@sentry/utils\");\n/** Patch toString calls to return proper name for wrapped functions */\nvar ExtraErrorData = /** @class */ (function () {\n    /**\n     * @inheritDoc\n     */\n    function ExtraErrorData(_options) {\n        if (_options === void 0) { _options = { depth: 3 }; }\n        this._options = _options;\n        /**\n         * @inheritDoc\n         */\n        this.name = ExtraErrorData.id;\n    }\n    /**\n     * @inheritDoc\n     */\n    ExtraErrorData.prototype.setupOnce = function (addGlobalEventProcessor, getCurrentHub) {\n        addGlobalEventProcessor(function (event, hint) {\n            var self = getCurrentHub().getIntegration(ExtraErrorData);\n            if (!self) {\n                return event;\n            }\n            return self.enhanceEventWithErrorData(event, hint);\n        });\n    };\n    /**\n     * Attaches extracted information from the Error object to extra field in the Event\n     */\n    ExtraErrorData.prototype.enhanceEventWithErrorData = function (event, hint) {\n        var _a;\n        if (!hint || !hint.originalException || !utils_1.isError(hint.originalException)) {\n            return event;\n        }\n        var name = hint.originalException.name || hint.originalException.constructor.name;\n        var errorData = this._extractErrorData(hint.originalException);\n        if (errorData) {\n            var contexts = tslib_1.__assign({}, event.contexts);\n            var normalizedErrorData = utils_1.normalize(errorData, this._options.depth);\n            if (utils_1.isPlainObject(normalizedErrorData)) {\n                contexts = tslib_1.__assign(tslib_1.__assign({}, event.contexts), (_a = {}, _a[name] = tslib_1.__assign({}, normalizedErrorData), _a));\n            }\n            return tslib_1.__assign(tslib_1.__assign({}, event), { contexts: contexts });\n        }\n        return event;\n    };\n    /**\n     * Extract extra information from the Error object\n     */\n    ExtraErrorData.prototype._extractErrorData = function (error) {\n        var e_1, _a;\n        var result = null;\n        // We are trying to enhance already existing event, so no harm done if it won't succeed\n        try {\n            var nativeKeys_1 = ['name', 'message', 'stack', 'line', 'column', 'fileName', 'lineNumber', 'columnNumber'];\n            var errorKeys = Object.getOwnPropertyNames(error).filter(function (key) { return nativeKeys_1.indexOf(key) === -1; });\n            if (errorKeys.length) {\n                var extraErrorInfo = {};\n                try {\n                    for (var errorKeys_1 = tslib_1.__values(errorKeys), errorKeys_1_1 = errorKeys_1.next(); !errorKeys_1_1.done; errorKeys_1_1 = errorKeys_1.next()) {\n                        var key = errorKeys_1_1.value;\n                        var value = error[key];\n                        if (utils_1.isError(value)) {\n                            value = value.toString();\n                        }\n                        extraErrorInfo[key] = value;\n                    }\n                }\n                catch (e_1_1) { e_1 = { error: e_1_1 }; }\n                finally {\n                    try {\n                        if (errorKeys_1_1 && !errorKeys_1_1.done && (_a = errorKeys_1.return)) _a.call(errorKeys_1);\n                    }\n                    finally { if (e_1) throw e_1.error; }\n                }\n                result = extraErrorInfo;\n            }\n        }\n        catch (oO) {\n            utils_1.logger.error('Unable to extract extra data from the Error object:', oO);\n        }\n        return result;\n    };\n    /**\n     * @inheritDoc\n     */\n    ExtraErrorData.id = 'ExtraErrorData';\n    return ExtraErrorData;\n}());\nexports.ExtraErrorData = ExtraErrorData;\n//# sourceMappingURL=extraerrordata.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","tslib_1","utils_1","ExtraErrorData","_options","depth","name","id","prototype","setupOnce","ExtraErrorData.prototype.setupOnce","addGlobalEventProcessor","getCurrentHub","event","hint","self","getIntegration","enhanceEventWithErrorData","ExtraErrorData.prototype.enhanceEventWithErrorData","_a","originalException","isError","constructor","errorData","_extractErrorData","contexts","__assign","normalizedErrorData","normalize","isPlainObject","ExtraErrorData.prototype._extractErrorData","error","result","nativeKeys_1","errorKeys","getOwnPropertyNames","filter","key","indexOf","length","extraErrorInfo","errorKeys_1","__values","errorKeys_1_1","next","done","toString","e_1_1","e_1","return","call","oO","logger"]
}
