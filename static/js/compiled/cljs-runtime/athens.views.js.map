{"version":3,"sources":["athens/views.cljs"],"mappings":";AA2BA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKA;AAWL,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKC,AAQiD,AAAA,AAACC,AAGK,AAAA,AAACA;AAO7D,AAAA,AAAMC;AAAN,AAEE,AAAMC,AAAO,AAAA,AAAA,AAACC;AAAd,AACE,AAAU,AAAA,AAAAC,AAAA,AAAOF;AAAjB;;AAAA,AACE,AAACG,AAAS,AAAA,AAAAD,AAAMF;;AAChB,AAAA,AAAA,AAACI;;;AAMP,AAAA,AAAMC;AAAN,AAEE;AAAA,AAAA,AACGC,AAAMC;;;AAGX,AAAA,AAAMC;AAAN,AAEE,AAAMM,AAAI,AAAA,AAAA,AAACb;AAAXQ,AAAA,AAAAP,AAC+C,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAACgB,AAAKX,AAA0BO;AAD/EL,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AACcM;AADd,AAAAF,AAAAJ,AAAA,AACyBO;AADzB,AAAAH,AAAAJ,AAAA,AACsCQ;AADtC,AAEE,AACEF;AADF,AACSI,AAAoBF;;AAD7B,AAEED;AAFF,AAEUI,AAAqBH;;AAF/B,AAAA,AAAA,AAAA;;;;;AAMJ;;;;AAAA,AAAMI,AAGHC;AAHH,AAAA,AAIG,AAAAC,AAAMD;AAANC,AAAA,AAAA,AAAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAAA;AAAA;AACYE;;;AADZ;AAEQC;;;AAFR;AAGSrB;;;AAHT;AAIQG;;;AAJR;AAKSmB;;;;AACPD;;;;;AAGL,AAAA,AAAME;AAAN,AAEE,AAAMN,AAAW,AAAA,AAAA,AAACrB;AACZ4B,AAAW,AAAA,AAAA,AAAC5B;AACZ6B,AAAW,AAAA,AAAA,AAAC7B;AAFlB,AAGE;AAAA,AAAA,AAAA,AAAA,AAAA,AAEIF,AACAgC,AACD,AACE,AAAAC,AAAA,AAAA9B,AAAM2B;AAAN,AAAA,AAAAG;AAAA,AAAA9B,AAAe4B;;AAAfE;;AADF,AAAA,AAAA,AAAA9B,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACyB+B,AAEtBJ,AAASK,AAGH,AAAA,AAAAhC,AAAA,AAAA,AAAA,AAAO4B,AAAOG,AACR,AAACE,AAAUvC,AACfwC,AACAC,AACK,AAAA,AAAA,AAACF,AAAUtC,AACY,AAAA,AAAA,AAAAyC,AAAM,AAAA,AAAApC,AAAA,AAACqC,AAAGjB;AAAV,AACG,AAAAgB,AAAAA,AAACE,AAAAA,AAAAA;AAZ3C,AAAA,AAAAtC,AAAA,AAAA,AAWuC,AAE3BmB,AAAaC,AACdmB,AACAC","names":["athens.views/app-wrapper-style","athens.views/main-content-style","athens.style.color","athens.views/alert","alert-","re_frame.core.subscribe","cljs.core/deref","js/alert","re-frame.core/dispatch","athens.views/pages-panel","athens.views.all-pages/table","athens.db/dsdb","athens.views/page-panel","map__60747","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","uid","title","string","id","posh.reagent/pull","athens.views.node-page/node-page-component","athens.views.block-page/block-page-component","athens.views/match-panel","route-name","G__60749","cljs.core/Keyword","athens.views.settings-page/settings-page","athens.views.daily-notes/daily-notes-panel","athens.views.graph-page/graph-page","athens.views/main-panel","loading","modal","athens.views.athena/athena-component","and__4115__auto__","athens.views.filesystem/window","athens.views.spinner/initial-spinner-component","stylefy.core.use_style","athens.views.app-toolbar/app-toolbar","athens.views.left-sidebar/left-sidebar","p1__60750#","cljs.core._EQ_","athens.views.daily-notes/db-scroll-daily-notes","athens.views.right-sidebar/right-sidebar-component","athens.views.devtool/devtool-component"],"sourcesContent":["(ns athens.views\n  (:require\n    [athens.config]\n    [athens.db :as db]\n    [athens.style :refer [color]]\n    [athens.subs]\n    [athens.views.all-pages :refer [table]]\n    [athens.views.app-toolbar :refer [app-toolbar]]\n    [athens.views.athena :refer [athena-component]]\n    [athens.views.block-page :refer [block-page-component]]\n    [athens.views.daily-notes :refer [daily-notes-panel db-scroll-daily-notes]]\n    [athens.views.devtool :refer [devtool-component]]\n    [athens.views.filesystem :as filesystem]\n    [athens.views.graph-page :as graph-page]\n    [athens.views.left-sidebar :refer [left-sidebar]]\n    [athens.views.node-page :refer [node-page-component]]\n    [athens.views.right-sidebar :refer [right-sidebar-component]]\n    [athens.views.settings-page :as settings-page]\n    [athens.views.spinner :refer [initial-spinner-component]]\n    [posh.reagent :refer [pull]]\n    [re-frame.core :refer [subscribe dispatch]]\n    [stylefy.core :as stylefy :refer [use-style]]))\n\n\n;;; Styles\n\n\n(def app-wrapper-style\n  {:display \"grid\"\n   :grid-template-areas\n   \"'app-header app-header app-header'\n    'left-sidebar main-content secondary-content'\n   'devtool devtool devtool'\"\n   :grid-template-columns \"auto 1fr auto\"\n   :grid-template-rows \"auto 1fr auto\"\n   :height \"100vh\"})\n\n\n(def main-content-style\n  {:flex \"1 1 100%\"\n   :grid-area \"main-content\"\n   :align-items \"flex-start\"\n   :justify-content \"stretch\"\n   :padding-top \"2.5rem\"\n   :display \"flex\"\n   :overflow-y \"auto\"\n   ::stylefy/mode {\"::-webkit-scrollbar\" {:background (color :background-minus-1)\n                                          :width \"0.5rem\"\n                                          :height \"0.5rem\"}\n                   \"::-webkit-scrollbar-thumb\" {:background (color :background-minus-2)\n                                                :border-radius \"0.5rem\"}}})\n\n\n;;; Components\n\n\n(defn alert\n  []\n  (let [alert- (subscribe [:alert])]\n    (when-not (nil? @alert-)\n      (js/alert (str @alert-))\n      (dispatch [:alert/unset]))))\n\n\n;; Panels\n\n\n(defn pages-panel\n  []\n  (fn []\n    [table db/dsdb]))\n\n\n(defn page-panel\n  []\n  (let [uid (subscribe [:current-route/uid])\n        {:keys [node/title block/string db/id]} @(pull db/dsdb '[*] [:block/uid @uid])]\n    (cond\n      title [node-page-component id]\n      string [block-page-component id]\n      :else [:h3 \"404: This page doesn't exist\"])))\n\n\n(defn match-panel\n  \"When app initializes, `route-name` is `nil`. Side effect of this is that a daily page for today is automatically\n  created when app inits. This is expected, but perhaps shouldn't be a side effect here.\"\n  [route-name]\n  [(case route-name\n     :settings settings-page/settings-page\n     :home daily-notes-panel\n     :pages pages-panel\n     :page page-panel\n     :graph graph-page/graph-page\n     daily-notes-panel)])\n\n\n(defn main-panel\n  []\n  (let [route-name (subscribe [:current-route/name])\n        loading    (subscribe [:loading?])\n        modal      (subscribe [:modal])]\n    (fn []\n      [:<>\n       [alert]\n       [athena-component]\n       (cond\n         (and @loading @modal) [filesystem/window]\n\n         @loading [initial-spinner-component]\n\n         :else [:<>\n                (when @modal [filesystem/window])\n                [:div (use-style app-wrapper-style)\n                 [app-toolbar]\n                 [left-sidebar]\n                 [:div (use-style main-content-style\n                                  {:on-scroll (when (= @route-name :home)\n                                                #(db-scroll-daily-notes %))})\n                  [match-panel @route-name]]\n                 [right-sidebar-component]\n                 [devtool-component]]])])))\n"]}