{"version":3,"sources":["datascript/db.cljc"],"mappings":"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","names":["datascript.db/Exception","js/Error","datascript.db/IllegalArgumentException","datascript.db/UnsupportedOperationException","datascript.db/e0","datascript.db/tx0","datascript.db/emax","datascript.db/txmax","datascript.db/implicit-schema","datascript.db/seqable?","x","cljs.core/seqable?","me.tonsky.persistent-sorted-set.arrays/array?","datascript.db/conjv","cljs.core.fnil","cljs.core/conj","datascript.db/conjs","datascript.db/reduce-indexed","f","init","xs","cljs.core/first","cljs.core.reduce","p__75709","vec__75710","cljs.core.nth","acc","idx","res","cljs.core/reduced?","cljs.core/reduced","datascript.db/cljs-env?","env","cljs.core/boolean","datascript.db/combine-hashes","y","cljs.core/hash-combine","datascript$db$IDatom$datom_tx$dyn","x__4428__auto__","m__4429__auto__","datascript.db/datom-tx","goog/typeOf","m__4426__auto__","cljs.core/missing-protocol","datascript$db$IDatom$datom_added$dyn","datascript.db/datom-added","datascript.db/IDatom","this","cljs.core/PROTOCOL_SENTINEL","this__4369__auto__","writer__4370__auto__","opt__4371__auto__","cljs.core/-write","datascript.db/Datom","datascript.db/->Datom","e","a","v","tx","_hash","d","datascript.db/hash-datom","o","datascript.db/equiv-datom","datascript.db/seq-datom","k","datascript.db/val-at-datom","nf","i","datascript.db/nth-datom","not-found","datascript.db/assoc-datom","writer","opts","cljs.core/pr-sequential-writer","cljs.core/pr-writer","goog/exportSymbol","var_args","G__75740","datascript.db/datom","added","datascript.db/datom?","cljs.core/hash","cljs.core._EQ_","cljs.core/List","G__75744","G__75752","G__75754","G__75755","G__75760","cljs.core/Keyword","datascript.db.datom","datascript.db/datom-from-reader","vec","cljs.core.apply","datascript.db/cmp","cljs.core/compare","datascript.db/value-compare","cljs.core/native-satisfies?","cljs.core/IComparable","cljs.core/-compare","cljs.core/array?","cljs.core/type","goog.array/defaultCompare","datascript.db/value-cmp","datascript.db/cmp-datoms-eavt","d1","d2","c__75057__auto__","datascript.db/cmp-datoms-aevt","datascript.db/cmp-datoms-avet","datascript.db/cmp-attr-quick","a1","a2","datascript.db/cmp-datoms-eav-quick","datascript.db/cmp-datoms-eavt-quick","datascript.db/cmp-datoms-aevt-quick","datascript.db/cmp-datoms-avet-quick","datascript.db/diff-sorted","b","cmp","only-a","only-b","both","cljs.core/empty?","cljs.core/not-empty","cljs.core.into","first-a","first-b","diff","cljs.core.conj","cljs.core/next","datascript$db$ISearch$_search$dyn","datascript.db/-search","datascript.db/ISearch","data","pattern","datascript$db$IIndexAccess$_datoms$dyn","datascript.db/-datoms","datascript$db$IIndexAccess$_seek_datoms$dyn","datascript.db/-seek-datoms","datascript$db$IIndexAccess$_rseek_datoms$dyn","datascript.db/-rseek-datoms","datascript$db$IIndexAccess$_index_range$dyn","datascript.db/-index-range","datascript.db/IIndexAccess","db","index","components","attr","start","end","datascript.db/validate-indexed","temp__5739__auto__","datascript.db/indexing?","cljs.core.ex_info","cljs.core.pr_str","datascript$db$IDB$_schema$dyn","datascript.db/-schema","datascript$db$IDB$_attrs_by$dyn","datascript.db/-attrs-by","datascript.db/IDB","property","datascript.db/db-transient","cljs.core.update","cljs.core/transient","datascript.db/db-persistent!","cljs.core/persistent!","this__4380__auto__","k__4381__auto__","this__4382__auto__","k75815","else__4383__auto__","G__75819","schema","eavt","aevt","avet","max-eid","max-tx","rschema","hash","cljs.core.get","__extmap","this__4399__auto__","f__4400__auto__","init__4401__auto__","ret__4402__auto__","p__75820","vec__75821","k__4403__auto__","v__4404__auto__","this__4394__auto__","writer__4395__auto__","opts__4396__auto__","pr-pair__4397__auto__","keyval__4398__auto__","cljs.core.concat","cljs.core/PersistentVector","G__75814","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4378__auto__","__meta","this__4375__auto__","__hash","this__4384__auto__","cljs.core/count","this__4376__auto__","h__4238__auto__","coll__4377__auto__","cljs.core/hash-unordered-coll","this75816","other75817","this__4389__auto__","k__4390__auto__","cljs.core/contains?","cljs.core.dissoc","cljs.core/-with-meta","this__4387__auto__","k__4388__auto__","pred__75824","cljs.core/keyword-identical?","expr__75825","cljs.core.assoc","this__4392__auto__","cljs.core/seq","cljs.core/MapEntry","this__4379__auto__","this__4385__auto__","entry__4386__auto__","cljs.core/vector?","cljs.core/-nth","cljs.core/-conj","datascript.db/DB","this__4423__auto__","writer__4424__auto__","G__75818","extmap__4419__auto__","G__75827","cljs.core/record?","datascript.db/->DB","datascript.db/map->DB","datascript.db/hash-db","other","datascript.db/equiv-db","cljs.core/-seq","cljs.core/-rseq","cljs.core/with-meta","G__75828","datascript.db/empty-db","cljs.core/meta","w","datascript.db/pr-db","key","fexpr__75831","vec__75832","multival?","me.tonsky.persistent_sorted_set.slice","cljs.core.filter","cs","datascript.db/components->pattern","me.tonsky.persistent_sorted_set.rslice","G__75829","G__75830","datascript.db/validate-attr","datascript.db/resolve-datom","datascript.db/db?","k75846","G__75850","unfiltered-db","pred","p__75851","vec__75852","G__75845","this75847","other75848","pred__75855","expr__75856","datascript.db/FilteredDB","G__75849","G__75858","datascript.db/->FilteredDB","datascript.db/map->FilteredDB","datascript.db/hash-fdb","_","datascript.db/attr->properties","G__75859","datascript.db/attr-tuples","m","tuple-attr","src-attr","cljs.core/assoc","datascript.db/rschema","cljs.core/reduce-kv","attr-schema","value","prop","datascript.db/validate-schema-key","expected","datascript.db/validate-schema","seq__75860","chunk__75861","count__75862","i__75863","vec__75882","temp__5735__auto__","cljs.core/chunked-seq?","c__4556__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","vec__75891","kv","comp?","and__4115__auto__","cljs.core.not_EQ_","ex-data","attrs","cljs.core/sequential?","seq__75885","chunk__75887","count__75888","i__75889","seq__75894","chunk__75896","count__75897","i__75898","G__75901","datascript.db.empty_db","cljs.core/map?","cljs.core.merge","me.tonsky.persistent_sorted_set.sorted_set_by","cljs.core.atom","datascript.db/init-max-eid","or__4126__auto__","G__75903","datascript.db/init-db","datoms","datascript.db.init_db","not-datom","cljs.core.drop_while","indexed","arr","G__75904","me.tonsky.persistent-sorted-set.arrays/into-array","me.tonsky.persistent-sorted-set.arrays/asort","me.tonsky.persistent-sorted-set/from-sorted-array","avet-datoms","avet-arr","cljs.core/to-array","cljs.core.transduce","cljs.core.map","cljs.core/max","datascript.db/equiv-db-index","ys","cljs.core/deref","h","cljs.core/reset!","p__75905","map__75906","cljs.core/hash-map","datascript.db/db-from-reader","p__75908","vec__75909","t","default-e","default-tx","G__75912","G__75913","datascript.db/entid-some","datascript.db/ref?","datascript.db/entid-strict","p__75914","vec__75915","c0","c1","c2","c3","G__75918","k75920","G__75924","db-before","db-after","tx-data","tempids","tx-meta","p__75925","vec__75926","G__75919","this75921","other75922","pred__75929","expr__75930","datascript.db/TxReport","G__75923","G__75932","datascript.db/->TxReport","datascript.db/map->TxReport","datascript.db/is-attr?","datascript.db/multival?","datascript.db/component?","datascript.db/tuple?","datascript.db/tuple-source?","datascript.db/entid","eid","vec__75933","cljs.core.array_seq","datascript.db/validate-datom","datom","found","at","datascript.db/validate-val","datascript.db/current-tx","report","cljs.core.get_in","datascript.db/next-eid","datascript.db/tx-id?","datascript.db/tempid?","datascript.db/new-eid?","datascript.db/advance-max-eid","G__75936","G__75938","datascript.db/allocate-eid","G__75939","datascript.db/with-datom","indexing?","G__75940","me.tonsky.persistent-sorted-set/conj","temp__5737__auto__","removing","G__75941","me.tonsky.persistent-sorted-set/disj","datascript.db/queue-tuple","queue","tuple","tuple-value","cljs.core/vec","cljs.core.repeat","tuple-value'","datascript.db/queue-tuples","tuples","datascript.db/transact-report","report'","queue'","datascript.db/reverse-ref?","cljs.core/name","cljs.core/re-matches","datascript.db/reverse-ref","cljs.core.keyword","cljs.core/namespace","cljs.core.subs","vec__75942","ns","name","datascript.db/resolve-upserts","entity","idents","resolve","split","vs","p__75945","vec__75946","upserts","cljs.core/coll?","vec__75949","insert","upsert","G__75952","G__75953","datascript.db/validate-upserts","upsert-ids","v->e","vec__75954","vec__75957","vec__75960","vec__75963","e1","v1","e2","v2","cljs.core/second","vec__75966","vec__75969","upsert-id","datascript.db/maybe-wrap-multival","datascript.db/explode","iter__4529__auto__","s__75973","cljs.core/LazySeq","xs__6292__auto__","vec__75978","iterys__4525__auto__","s__75975","c__4527__auto__","size__4528__auto__","b__75977","cljs.core/chunk-buffer","i__75976","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__75974","cljs.core/cons","cljs.core/rest","fs__4526__auto__","iter__75972","reverse?","straight-a","p__75981","vec__75982","datascript.db/transact-add","ent","new-datom","old-datom","datascript.db/transact-retract-datom","datascript.db/retract-components","cljs.core.comp","datascript.db/retry-with-tempid","initial-report","es","tempid","upserted-eid","tempids'","datascript.db/transact-tx-data","datascript.db/builtin-fn?","datascript.db/flush-tuples","attr-tuples","entities","tuples+values","cljs.core/every?","cljs.core/nil?","current","datascript.db/check-value-tempids","all-tempids","reduce-fn","unused","cljs.core.sort","cljs.core/vals","initial-es","initial-report'","has-tuples?","initial-es'","cljs.core.interleave","vec__76003","seq__76004","first__76005","cljs.core/update","cljs.core/inc","old-eid","vec__76006","id","datascript.db.allocate_eid","entity'","new-eid","new-entity","vec__76009","op","vec__76012","seq__76013","first__76014","args","cljs.core/not","ident","fun","cljs.core/fn?","vec__76015","ov","nv","cljs.core/some","resolved","allocated-eid","e-datoms","v-datoms","cljs.core.mapcat","vec__76018"],"sourcesContent":["(ns ^:no-doc ^:lean-ns datascript.db\n  (:require\n    #?(:cljs [goog.array :as garray])\n    [clojure.walk]\n    [clojure.data]\n    [me.tonsky.persistent-sorted-set :as set]\n    [me.tonsky.persistent-sorted-set.arrays :as arrays])\n  #?(:cljs (:require-macros [datascript.db :refer [case-tree combine-cmp raise defrecord-updatable cond+]]))\n  (:refer-clojure :exclude [seqable?])) \n\n;; ----------------------------------------------------------------------------\n\n#?(:cljs\n   (do\n     (def Exception js/Error)\n     (def IllegalArgumentException js/Error)\n     (def UnsupportedOperationException js/Error)))\n\n(def ^:const e0    0)\n(def ^:const tx0   0x20000000)\n(def ^:const emax  0x7FFFFFFF)\n(def ^:const txmax 0x7FFFFFFF)\n(def ^:const implicit-schema {:db/ident {:db/unique :db.unique/identity}})\n\n;; ----------------------------------------------------------------------------\n\n#?(:clj\n  (defmacro raise [& fragments]\n    (let [msgs (butlast fragments)\n          data (last fragments)]\n      `(throw (ex-info (str ~@(map (fn [m#] (if (string? m#) m# (list 'pr-str m#))) msgs)) ~data)))))\n\n(defn #?@(:clj  [^Boolean seqable?]  \n          :cljs [^boolean seqable?])\n  [x]\n  (and (not (string? x))\n  #?(:cljs (or (cljs.core/seqable? x)\n               (arrays/array? x))\n     :clj  (or (seq? x)\n               (instance? clojure.lang.Seqable x)\n               (nil? x)\n               (instance? Iterable x)\n               (arrays/array? x)\n               (instance? java.util.Map x)))))\n\n#?(:clj\n  (defmacro cond+ [& clauses]\n    (when-some [[test expr & rest] clauses]\n      (case test\n        :let `(let ~expr (cond+ ~@rest))\n        `(if ~test ~expr (cond+ ~@rest))))))\n\n#?(:clj\n(defmacro some-of\n  ([] nil)\n  ([x] x)\n  ([x & more]\n    `(let [x# ~x] (if (nil? x#) (some-of ~@more) x#)))))\n\n(def conjv (fnil conj []))\n(def conjs (fnil conj #{}))\n\n(defn reduce-indexed\n  \"Same as reduce, but `f` takes [acc el idx]\"\n  [f init xs]\n  (first\n    (reduce\n      (fn [[acc idx] x]\n        (let [res (f acc x idx)]\n          (if (reduced? res)\n            (reduced [res idx])\n            [res (inc idx)])))\n      [init 0]\n      xs)))\n\n;; ----------------------------------------------------------------------------\n;; macros and funcs to support writing defrecords and updating\n;; (replacing) builtins, i.e., Object/hashCode, IHashEq hasheq, etc.\n;; code taken from prismatic:\n;;  https://github.com/Prismatic/schema/commit/e31c419c56555c83ef9ee834801e13ef3c112597\n;;\n\n(defn- cljs-env?\n  \"Take the &env from a macro, and tell whether we are expanding into cljs.\"\n  [env]\n  (boolean (:ns env)))\n\n#?(:clj\n   (defmacro if-cljs\n     \"Return then if we are generating cljs code and else for Clojure code.\n     https://groups.google.com/d/msg/clojurescript/iBY5HaQda4A/w1lAQi9_AwsJ\"\n     [then else]\n     (if (cljs-env? &env) then else)))\n\n(defn combine-hashes [x y]\n  #?(:clj  (clojure.lang.Util/hashCombine x y)\n     :cljs (hash-combine x y)))\n\n#?(:clj\n   (defn- get-sig [method]\n     ;; expects something like '(method-symbol [arg arg arg] ...)\n     ;; if the thing matches, returns [fully-qualified-symbol arity], otherwise nil\n     (and (sequential? method)\n          (symbol? (first method))\n          (vector? (second method))\n          (let [sym (first method)\n                ns  (or (some->> sym resolve meta :ns str) \"clojure.core\")]\n            [(symbol ns (name sym)) (-> method second count)]))))\n\n#?(:clj\n   (defn- dedupe-interfaces [deftype-form]\n     ;; get the interfaces list, remove any duplicates, similar to remove-nil-implements in potemkin\n     ;; verified w/ deftype impl in compiler:\n     ;; (deftype* tagname classname [fields] :implements [interfaces] :tag tagname methods*)\n     (let [[deftype* tagname classname fields implements interfaces & rest] deftype-form]\n       (when (or (not= deftype* 'deftype*) (not= implements :implements))\n         (throw (IllegalArgumentException. \"deftype-form mismatch\")))\n       (list* deftype* tagname classname fields implements (vec (distinct interfaces)) rest))))\n\n#?(:clj\n   (defn- make-record-updatable-clj [name fields & impls]\n     (let [impl-map (->> impls (map (juxt get-sig identity)) (filter first) (into {}))\n           body     (macroexpand-1 (list* 'defrecord name fields impls))]\n       (clojure.walk/postwalk\n        (fn [form]\n          (if (and (sequential? form) (= 'deftype* (first form)))\n            (->> form\n                 dedupe-interfaces\n                 (remove (fn [method]\n                           (when-some [impl (-> method get-sig impl-map)]\n                             (not= method impl)))))\n            form))\n        body))))\n\n#?(:clj\n   (defn- make-record-updatable-cljs [name fields & impls]\n     `(do\n        (defrecord ~name ~fields)\n        (extend-type ~name ~@impls))))\n\n#?(:clj\n   (defmacro defrecord-updatable [name fields & impls]\n     `(if-cljs\n       ~(apply make-record-updatable-cljs name fields impls)\n       ~(apply make-record-updatable-clj  name fields impls))))\n\n;; ----------------------------------------------------------------------------\n\n(declare hash-datom equiv-datom seq-datom nth-datom assoc-datom val-at-datom)\n\n(defprotocol IDatom\n  (datom-tx [this])\n  (datom-added [this]))\n\n(deftype Datom #?(:clj [^int e a v ^int tx ^:unsynchronized-mutable ^int _hash]\n                  :cljs [^number e a v ^number tx ^:mutable ^number _hash])\n  IDatom\n  (datom-tx [d] (if (pos? tx) tx (- tx)))\n  (datom-added [d] (pos? tx))\n\n  #?@(:cljs\n       [IHash\n        (-hash [d] (if (zero? _hash)\n                     (set! _hash (hash-datom d))\n                     _hash))\n        IEquiv\n        (-equiv [d o] (and (instance? Datom o) (equiv-datom d o)))\n\n        ISeqable\n        (-seq [d] (seq-datom d))\n\n        ILookup\n        (-lookup [d k] (val-at-datom d k nil))\n        (-lookup [d k nf] (val-at-datom d k nf))\n\n        IIndexed\n        (-nth [this i] (nth-datom this i))\n        (-nth [this i not-found] (nth-datom this i not-found))\n        \n        IAssociative\n        (-assoc [d k v] (assoc-datom d k v))\n\n        IPrintWithWriter\n        (-pr-writer [d writer opts]\n                    (pr-sequential-writer writer pr-writer\n                                          \"#datascript/Datom [\" \" \" \"]\"\n                                          opts [(.-e d) (.-a d) (.-v d) (datom-tx d) (datom-added d)]))]\n      :clj\n       [Object\n        (hashCode [d]\n          (if (zero? _hash)\n            (let [h (int (hash-datom d))]\n              (set! _hash h)\n              h)\n            _hash))\n        (toString [d] (pr-str d))\n\n        clojure.lang.IHashEq\n        (hasheq [d] (.hashCode d))\n\n        clojure.lang.Seqable\n        (seq [d] (seq-datom d))\n\n        clojure.lang.IPersistentCollection\n        (equiv [d o] (and (instance? Datom o) (equiv-datom d o)))\n        (empty [d] (throw (UnsupportedOperationException. \"empty is not supported on Datom\")))\n        (count [d] 5)\n        (cons [d [k v]] (assoc-datom d k v))\n        \n        clojure.lang.Indexed\n        (nth [this i]           (nth-datom this i))\n        (nth [this i not-found] (nth-datom this i not-found))\n\n        clojure.lang.ILookup\n        (valAt [d k] (val-at-datom d k nil))\n        (valAt [d k nf] (val-at-datom d k nf))\n\n        clojure.lang.Associative\n        (entryAt [d k] (some->> (val-at-datom d k nil) (clojure.lang.MapEntry k)))\n        (containsKey [e k] (#{:e :a :v :tx :added} k))\n        (assoc [d k v] (assoc-datom d k v))]\n))\n\n#?(:cljs (goog/exportSymbol \"datascript.db.Datom\" Datom))\n\n(defn ^Datom datom\n  ([e a v] (Datom. e a v tx0 0))\n  ([e a v tx] (Datom. e a v tx 0))\n  ([e a v tx added] (Datom. e a v (if added tx (- tx)) 0)))\n\n(defn datom? [x] (instance? Datom x))\n\n(defn- hash-datom [^Datom d]\n  (-> (hash (.-e d))\n      (combine-hashes (hash (.-a d)))\n      (combine-hashes (hash (.-v d)))))\n\n(defn- equiv-datom [^Datom d ^Datom o]\n  (and (== (.-e d) (.-e o))\n       (= (.-a d) (.-a o))\n       (= (.-v d) (.-v o))))\n\n(defn- seq-datom [^Datom d]\n  (list (.-e d) (.-a d) (.-v d) (datom-tx d) (datom-added d)))\n\n;; keep it fast by duplicating for both keyword and string cases\n;; instead of using sets or some other matching func\n(defn- val-at-datom [^Datom d k not-found]\n  (case k\n    :e      (.-e d) \"e\"     (.-e d)\n    :a      (.-a d) \"a\"     (.-a d)\n    :v      (.-v d) \"v\"     (.-v d)\n    :tx     (datom-tx d)\n    \"tx\"    (datom-tx d)\n    :added  (datom-added d)\n    \"added\" (datom-added d)\n    not-found))\n\n(defn- nth-datom\n  ([^Datom d ^long i]\n    (case i\n      0 (.-e d)\n      1 (.-a d)\n      2 (.-v d)\n      3 (datom-tx d)\n      4 (datom-added d)\n        #?(:clj  (throw (IndexOutOfBoundsException.))\n           :cljs (throw (js/Error. (str \"Datom/-nth: Index out of bounds: \" i))))))\n  ([^Datom d ^long i not-found]\n    (case i\n      0 (.-e d)\n      1 (.-a d)\n      2 (.-v d)\n      3 (datom-tx d)\n      4 (datom-added d)\n        not-found)))\n\n(defn- ^Datom assoc-datom [^Datom d k v]\n  (case k\n    :e     (datom v       (.-a d) (.-v d) (datom-tx d) (datom-added d))\n    :a     (datom (.-e d) v       (.-v d) (datom-tx d) (datom-added d))\n    :v     (datom (.-e d) (.-a d) v       (datom-tx d) (datom-added d))\n    :tx    (datom (.-e d) (.-a d) (.-v d) v            (datom-added d))\n    :added (datom (.-e d) (.-a d) (.-v d) (datom-tx d) v)\n    (throw (IllegalArgumentException. (str \"invalid key for #datascript/Datom: \" k)))))\n\n;; printing and reading\n;; #datomic/DB {:schema <map>, :datoms <vector of [e a v tx]>}\n\n(defn ^Datom datom-from-reader [vec]\n  (apply datom vec))\n\n#?(:clj\n   (defmethod print-method Datom [^Datom d, ^java.io.Writer w]\n     (.write w (str \"#datascript/Datom \"))\n     (binding [*out* w]\n       (pr [(.-e d) (.-a d) (.-v d) (datom-tx d) (datom-added d)]))))\n\n;; ----------------------------------------------------------------------------\n;; datom cmp macros/funcs\n;;\n\n#?(:clj\n  (defmacro combine-cmp [& comps]\n    (loop [comps (reverse comps)\n           res   (num 0)]\n      (if (not-empty comps)\n        (recur\n          (next comps)\n          `(let [c# ~(first comps)]\n             (if (== 0 c#)\n               ~res\n               c#)))\n        res))))\n\n#?(:clj\n   (defn- -case-tree [queries variants]\n     (if queries\n       (let [v1 (take (/ (count variants) 2) variants)\n             v2 (drop (/ (count variants) 2) variants)]\n         (list 'if (first queries)\n               (-case-tree (next queries) v1)\n               (-case-tree (next queries) v2)))\n       (first variants))))\n\n#?(:clj\n   (defmacro case-tree [qs vs]\n     (-case-tree qs vs)))\n\n(defn cmp [x y]\n  (if (nil? x) 0\n    (if (nil? y) 0\n      (compare x y))))\n\n(defn value-compare [x y]\n  (cond\n    (= x y) 0\n    #?@(:clj  [(instance? Number x)       (clojure.lang.Numbers/compare x y)])\n    #?@(:clj  [(instance? Comparable x)   (.compareTo ^Comparable x y)]\n        :cljs [(satisfies? IComparable x) (-compare x y)])\n    #?@(:cljs [(and (or (string? x) (array? x) (true? x) (false? x))\n                 (identical? (type x) (type y))) (garray/defaultCompare x y)])\n    :else (- (hash x) (hash y))))\n\n(defn value-cmp [x y]\n  (cond \n    (nil? x) 0\n    (nil? y) 0\n    :else     (value-compare x y)))\n\n;; Slower cmp-* fns allows for datom fields to be nil.\n;; Such datoms come from slice method where they are used as boundary markers.\n\n(defn cmp-datoms-eavt [^Datom d1, ^Datom d2]\n  (combine-cmp\n    (#?(:clj Integer/compare :cljs -) (.-e d1) (.-e d2))\n    (cmp (.-a d1) (.-a d2))\n    (value-cmp (.-v d1) (.-v d2))\n    (#?(:clj Integer/compare :cljs -) (datom-tx d1) (datom-tx d2))))\n\n(defn cmp-datoms-aevt [^Datom d1, ^Datom d2]\n  (combine-cmp\n    (cmp (.-a d1) (.-a d2))\n    (#?(:clj Integer/compare :cljs -) (.-e d1) (.-e d2))\n    (value-cmp (.-v d1) (.-v d2))\n    (#?(:clj Integer/compare :cljs -) (datom-tx d1) (datom-tx d2))))\n\n(defn cmp-datoms-avet [^Datom d1, ^Datom d2]\n  (combine-cmp\n    (cmp (.-a d1) (.-a d2))\n    (value-cmp (.-v d1) (.-v d2))\n    (#?(:clj Integer/compare :cljs -) (.-e d1) (.-e d2))\n    (#?(:clj Integer/compare :cljs -) (datom-tx d1) (datom-tx d2))))\n\n;; fast versions without nil checks\n\n(defn- cmp-attr-quick [a1 a2]\n  ;; either both are keywords or both are strings\n  #?(:cljs\n     (if (keyword? a1)\n       (-compare a1 a2)\n       (garray/defaultCompare a1 a2))\n     :clj\n     (.compareTo ^Comparable a1 a2)))\n\n(defn cmp-datoms-eav-quick [^Datom d1, ^Datom d2]\n  (combine-cmp\n    (#?(:clj Integer/compare :cljs -) (.-e d1) (.-e d2))\n    (cmp-attr-quick (.-a d1) (.-a d2))\n    (value-compare (.-v d1) (.-v d2))))\n\n(defn cmp-datoms-eavt-quick [^Datom d1, ^Datom d2]\n  (combine-cmp\n    (#?(:clj Integer/compare :cljs -) (.-e d1) (.-e d2))\n    (cmp-attr-quick (.-a d1) (.-a d2))\n    (value-compare (.-v d1) (.-v d2))\n    (#?(:clj Integer/compare :cljs -) (datom-tx d1) (datom-tx d2))))\n\n(defn cmp-datoms-aevt-quick [^Datom d1, ^Datom d2]\n  (combine-cmp\n    (cmp-attr-quick (.-a d1) (.-a d2))\n    (#?(:clj Integer/compare :cljs -) (.-e d1) (.-e d2))\n    (value-compare (.-v d1) (.-v d2))\n    (#?(:clj Integer/compare :cljs -) (datom-tx d1) (datom-tx d2))))\n\n(defn cmp-datoms-avet-quick [^Datom d1, ^Datom d2]\n  (combine-cmp\n    (cmp-attr-quick (.-a d1) (.-a d2))\n    (value-compare (.-v d1) (.-v d2))\n    (#?(:clj Integer/compare :cljs -) (.-e d1) (.-e d2))\n    (#?(:clj Integer/compare :cljs -) (datom-tx d1) (datom-tx d2))))\n\n(defn- diff-sorted [a b cmp]\n  (loop [only-a []\n         only-b []\n         both   []\n         a      a\n         b      b]\n    (cond\n      (empty? a) [(not-empty only-a) (not-empty (into only-b b)) (not-empty both)]\n      (empty? b) [(not-empty (into only-a a)) (not-empty only-b) (not-empty both)]\n      :else\n      (let [first-a (first a)\n            first-b (first b)\n            diff (cmp first-a first-b)]\n        (cond\n          (== diff 0) (recur only-a                only-b                (conj both first-a) (next a) (next b))\n          (< diff 0)  (recur (conj only-a first-a) only-b                both                (next a) b)\n          (> diff 0)  (recur only-a                (conj only-b first-b) both                a        (next b)))))))\n\n;; ----------------------------------------------------------------------------\n\n(declare hash-db hash-fdb equiv-db empty-db resolve-datom validate-attr components->pattern indexing?)\n#?(:cljs (declare pr-db))\n\n;;;;;;;;;; Searching\n\n(defprotocol ISearch\n  (-search [data pattern]))\n\n(defprotocol IIndexAccess\n  (-datoms [db index components])\n  (-seek-datoms [db index components])\n  (-rseek-datoms [db index components])\n  (-index-range [db attr start end]))\n\n(defn validate-indexed [db index components]\n  (when (= index :avet)\n    (when-some [attr (first components)]\n      (when-not (indexing? db attr)\n        (raise \"Attribute \" attr \" should be marked as :db/index true\"\n          {:error :index-access :index :avet :components components})))))\n\n(defprotocol IDB\n  (-schema [db])\n  (-attrs-by [db property]))\n\n;; ----------------------------------------------------------------------------\n\n(defn db-transient [db]\n  (-> db\n    (update :eavt transient)\n    (update :aevt transient)\n    (update :avet transient)))\n\n(defn db-persistent! [db]\n  (-> db\n    (update :eavt persistent!)\n    (update :aevt persistent!)\n    (update :avet persistent!)))\n\n(defrecord-updatable DB [schema eavt aevt avet max-eid max-tx rschema hash]\n  #?@(:cljs\n      [IHash                (-hash  [db]        (hash-db db))\n       IEquiv               (-equiv [db other]  (equiv-db db other))\n       ISeqable             (-seq   [db]        (-seq  (.-eavt db)))\n       IReversible          (-rseq  [db]        (-rseq (.-eavt db)))\n       ICounted             (-count [db]        (count (.-eavt db)))\n       IEmptyableCollection (-empty [db]        (with-meta (empty-db (.-schema db)) (meta db)))\n       IPrintWithWriter     (-pr-writer [db w opts] (pr-db db w opts))\n       IEditableCollection  (-as-transient [db] (db-transient db))\n       ITransientCollection (-conj! [db key] (throw (ex-info \"datascript.DB/conj! is not supported\" {})))\n                            (-persistent! [db] (db-persistent! db))]\n\n      :clj\n      [Object               (hashCode [db]      (hash-db db))\n       clojure.lang.IHashEq (hasheq [db]        (hash-db db))\n       clojure.lang.Seqable (seq [db]           (seq eavt))\n       clojure.lang.IPersistentCollection\n                            (count [db]         (count eavt))\n                            (equiv [db other]   (equiv-db db other))\n       clojure.lang.IEditableCollection \n                            (empty [db]         (with-meta (empty-db schema) (meta db)))\n                            (asTransient [db] (db-transient db))\n       clojure.lang.ITransientCollection\n                            (conj [db key] (throw (ex-info \"datascript.DB/conj! is not supported\" {})))\n                            (persistent [db] (db-persistent! db))])\n\n  IDB\n  (-schema [db] (.-schema db))\n  (-attrs-by [db property] ((.-rschema db) property))\n\n  ISearch\n  (-search [db pattern]\n    (let [[e a v tx] pattern\n          eavt       (.-eavt db)\n          aevt       (.-aevt db)\n          avet       (.-avet db)\n          multival?  (contains? (-attrs-by db :db.cardinality/many) a)]\n      (case-tree [e a (some? v) tx]\n        [(set/slice eavt (datom e a v tx) (datom e a v tx))                   ;; e a v tx\n         (set/slice eavt (datom e a v tx0) (datom e a v txmax))               ;; e a v _\n         (->> (set/slice eavt (datom e a nil tx0) (datom e a nil txmax))      ;; e a _ tx\n              (filter (fn [^Datom d] (= tx (datom-tx d)))))\n         (set/slice eavt (datom e a nil tx0) (datom e a nil txmax))           ;; e a _ _\n         (->> (set/slice eavt (datom e nil nil tx0) (datom e nil nil txmax))  ;; e _ v tx\n              (filter (fn [^Datom d] (and (= v (.-v d))\n                                          (= tx (datom-tx d))))))\n         (->> (set/slice eavt (datom e nil nil tx0) (datom e nil nil txmax))  ;; e _ v _\n              (filter (fn [^Datom d] (= v (.-v d)))))\n         (->> (set/slice eavt (datom e nil nil tx0) (datom e nil nil txmax))  ;; e _ _ tx\n              (filter (fn [^Datom d] (= tx (datom-tx d)))))\n         (set/slice eavt (datom e nil nil tx0) (datom e nil nil txmax))       ;; e _ _ _\n         (if (indexing? db a)                                                   ;; _ a v tx\n           (->> (set/slice avet (datom e0 a v tx0) (datom emax a v txmax))      \n                (filter (fn [^Datom d] (= tx (datom-tx d)))))\n           (->> (set/slice aevt (datom e0 a nil tx0) (datom emax a nil txmax))\n                (filter (fn [^Datom d] (and (= v (.-v d))\n                                            (= tx (datom-tx d)))))))\n         (if (indexing? db a)                                                   ;; _ a v _\n           (set/slice avet (datom e0 a v tx0) (datom emax a v txmax))\n           (->> (set/slice aevt (datom e0 a nil tx0) (datom emax a nil txmax))\n                (filter (fn [^Datom d] (= v (.-v d))))))\n         (->> (set/slice aevt (datom e0 a nil tx0) (datom emax a nil txmax))  ;; _ a _ tx\n              (filter (fn [^Datom d] (= tx (datom-tx d)))))\n         (set/slice aevt (datom e0 a nil tx0) (datom emax a nil txmax))       ;; _ a _ _\n         (filter (fn [^Datom d] (and (= v (.-v d))\n                                     (= tx (datom-tx d)))) eavt)                ;; _ _ v tx\n         (filter (fn [^Datom d] (= v (.-v d))) eavt)                            ;; _ _ v _\n         (filter (fn [^Datom d] (= tx (datom-tx d))) eavt)                      ;; _ _ _ tx\n         eavt])))                                                               ;; _ _ _ _\n\n  IIndexAccess\n  (-datoms [db index cs]\n    (validate-indexed db index cs)\n    (set/slice (get db index) (components->pattern db index cs e0 tx0) (components->pattern db index cs emax txmax)))\n\n  (-seek-datoms [db index cs]\n    (validate-indexed db index cs)\n    (set/slice (get db index) (components->pattern db index cs e0 tx0) (datom emax nil nil txmax)))\n\n  (-rseek-datoms [db index cs]\n    (validate-indexed db index cs)\n    (set/rslice (get db index) (components->pattern db index cs emax txmax) (datom e0 nil nil tx0)))\n\n  (-index-range [db attr start end]\n    (validate-indexed db :avet [attr])\n    (validate-attr attr (list '-index-range 'db attr start end))\n    (set/slice (.-avet db)\n      (resolve-datom db nil attr start nil e0 tx0)\n      (resolve-datom db nil attr end nil emax txmax)))\n                \n  clojure.data/EqualityPartition\n  (equality-partition [x] :datascript/db)\n\n  clojure.data/Diff\n  (diff-similar [a b]\n    (diff-sorted (:eavt a) (:eavt b) cmp-datoms-eav-quick)))\n\n(defn db? [x]\n  (and (satisfies? ISearch x)\n       (satisfies? IIndexAccess x)\n       (satisfies? IDB x)))\n\n;; ----------------------------------------------------------------------------\n(defrecord-updatable FilteredDB [unfiltered-db pred hash]\n  #?@(:cljs\n      [IHash                (-hash  [db]        (hash-fdb db))\n       IEquiv               (-equiv [db other]  (equiv-db db other))\n       ISeqable             (-seq   [db]        (seq (-datoms db :eavt [])))\n       ICounted             (-count [db]        (count (-datoms db :eavt [])))\n       IPrintWithWriter     (-pr-writer [db w opts] (pr-db db w opts))\n\n       IEmptyableCollection (-empty [_]         (throw (js/Error. \"-empty is not supported on FilteredDB\")))\n\n       ILookup              (-lookup ([_ _]     (throw (js/Error. \"-lookup is not supported on FilteredDB\")))\n                                     ([_ _ _]   (throw (js/Error. \"-lookup is not supported on FilteredDB\"))))\n\n\n       IAssociative         (-contains-key? [_ _] (throw (js/Error. \"-contains-key? is not supported on FilteredDB\")))\n                            (-assoc [_ _ _]       (throw (js/Error. \"-assoc is not supported on FilteredDB\")))]\n\n      :clj\n      [Object               (hashCode [db]      (hash-fdb db))\n\n       clojure.lang.IHashEq (hasheq [db]        (hash-fdb db))\n\n       clojure.lang.IPersistentCollection\n                            (count [db]         (count (-datoms db :eavt [])))\n                            (equiv [db o]       (equiv-db db o))\n                            (cons [db [k v]]    (throw (UnsupportedOperationException. \"cons is not supported on FilteredDB\")))\n                            (empty [db]         (throw (UnsupportedOperationException. \"empty is not supported on FilteredDB\")))\n\n       clojure.lang.Seqable (seq [db]           (seq (-datoms db :eavt [])))\n\n       clojure.lang.ILookup (valAt [db k]       (throw (UnsupportedOperationException. \"valAt/2 is not supported on FilteredDB\")))\n                            (valAt [db k nf]    (throw (UnsupportedOperationException. \"valAt/3 is not supported on FilteredDB\")))\n       clojure.lang.IKeywordLookup (getLookupThunk [db k]\n                                                (throw (UnsupportedOperationException. \"getLookupThunk is not supported on FilteredDB\")))\n\n       clojure.lang.Associative\n                            (containsKey [e k]  (throw (UnsupportedOperationException. \"containsKey is not supported on FilteredDB\")))\n                            (entryAt [db k]     (throw (UnsupportedOperationException. \"entryAt is not supported on FilteredDB\")))\n                            (assoc [db k v]     (throw (UnsupportedOperationException. \"assoc is not supported on FilteredDB\")))])\n\n  IDB\n  (-schema [db]\n    (-schema (.-unfiltered-db db)))\n\n  (-attrs-by [db property]\n    (-attrs-by (.-unfiltered-db db) property))\n\n  ISearch\n  (-search [db pattern]\n    (filter (.-pred db) (-search (.-unfiltered-db db) pattern)))\n\n  IIndexAccess\n  (-datoms [db index cs]\n    (filter (.-pred db) (-datoms (.-unfiltered-db db) index cs)))\n\n  (-seek-datoms [db index cs]\n    (filter (.-pred db) (-seek-datoms (.-unfiltered-db db) index cs)))\n\n  (-rseek-datoms [db index cs]\n    (filter (.-pred db) (-rseek-datoms (.-unfiltered-db db) index cs)))\n\n  (-index-range [db attr start end]\n    (filter (.-pred db) (-index-range (.-unfiltered-db db) attr start end))))\n\n;; ----------------------------------------------------------------------------\n\n(defn attr->properties [k v]\n  (case v\n    :db.unique/identity  [:db/unique :db.unique/identity :db/index]\n    :db.unique/value     [:db/unique :db.unique/value :db/index]\n    :db.cardinality/many [:db.cardinality/many]\n    :db.type/ref         [:db.type/ref :db/index]\n    (cond\n      (and (= :db/isComponent k) (true? v)) [:db/isComponent]\n      (and (= :db/index k) (true? v))       [:db/index]\n      (= :db/tupleAttrs k)                  [:db.type/tuple :db/index]\n      :else [])))\n\n(defn attr-tuples\n  \"e.g. :reg/semester => #{:reg/semester+course+student ...}\"\n  [schema rschema]\n  (reduce\n    (fn [m tuple-attr] ;; e.g. :reg/semester+course+student\n      (reduce-indexed\n        (fn [m src-attr idx] ;; e.g. :reg/semester\n          (update m src-attr assoc tuple-attr idx))\n        m\n        (-> schema tuple-attr :db/tupleAttrs)))\n    {}\n    (:db.type/tuple rschema)))\n\n(defn- rschema\n  \":db/unique           => #{attr ...}\n   :db.unique/identity  => #{attr ...}\n   :db.unique/value     => #{attr ...}\n   :db/index            => #{attr ...}\n   :db.cardinality/many => #{attr ...}\n   :db.type/ref         => #{attr ...}\n   :db/isComponent      => #{attr ...}\n   :db.type/tuple       => #{attr ...}\n   :db/attrTuples       => {attr => {tuple-attr => idx}}\"\n  [schema]\n  (let [rschema (reduce-kv\n                  (fn [rschema attr attr-schema]\n                    (reduce-kv\n                      (fn [rschema key value]\n                        (reduce\n                          (fn [rschema prop]\n                            (update rschema prop conjs attr))\n                          rschema (attr->properties key value)))\n                      rschema attr-schema))\n                  {} schema)]\n    (assoc rschema :db/attrTuples (attr-tuples schema rschema))))\n\n(defn- validate-schema-key [a k v expected]\n  (when-not (or (nil? v)\n                (contains? expected v))\n    (throw (ex-info (str \"Bad attribute specification for \" (pr-str {a {k v}}) \", expected one of \" expected)\n                    {:error :schema/validation\n                     :attribute a\n                     :key k\n                     :value v}))))\n\n(defn- validate-schema [schema]\n  (doseq [[a kv] schema]\n\n    ;; isComponent\n    (let [comp? (:db/isComponent kv false)]\n      (validate-schema-key a :db/isComponent (:db/isComponent kv) #{true false})\n      (when (and comp? (not= (:db/valueType kv) :db.type/ref))\n        (raise \"Bad attribute specification for \" a \": {:db/isComponent true} should also have {:db/valueType :db.type/ref}\"\n          {:error     :schema/validation\n           :attribute a\n           :key       :db/isComponent})))\n\n    (validate-schema-key a :db/unique (:db/unique kv) #{:db.unique/value :db.unique/identity})\n    (validate-schema-key a :db/valueType (:db/valueType kv) #{:db.type/ref})\n    (validate-schema-key a :db/cardinality (:db/cardinality kv) #{:db.cardinality/one :db.cardinality/many})\n\n    ;; :db/tupleAttrs is a non-empty sequential coll\n    (when (contains? kv :db/tupleAttrs)\n      (let [ex-data {:error :schema/validation\n                     :attribute a\n                     :key :db/tupleAttrs}]\n        (when (= :db.cardinality/many (:db/cardinality kv))\n          (raise a \" has :db/tupleAttrs, must be :db.cardinality/one\" ex-data))\n\n        (let [attrs (:db/tupleAttrs kv)]\n          (when-not (sequential? attrs)\n            (raise a \" :db/tupleAttrs must be a sequential collection, got: \" attrs ex-data))\n\n          (when (empty? attrs)\n            (raise a \" :db/tupleAttrs can\u2019t be empty\" ex-data))\n\n          (doseq [attr attrs\n                  :let [ex-data (assoc ex-data :value attr)]]\n            (when (contains? (get schema attr) :db/tupleAttrs)\n              (raise a \" :db/tupleAttrs can\u2019t depend on another tuple attribute: \" attr ex-data))\n\n            (when (= :db.cardinality/many (:db/cardinality (get schema attr)))\n              (raise a \" :db/tupleAttrs can\u2019t depend on :db.cardinality/many attribute: \" attr ex-data))))))))\n\n(defn ^DB empty-db\n  ([] (empty-db nil))\n  ([schema]\n    {:pre [(or (nil? schema) (map? schema))]}\n    (validate-schema schema)\n    (map->DB\n      {:schema  schema\n       :rschema (rschema (merge implicit-schema schema))\n       :eavt    (set/sorted-set-by cmp-datoms-eavt)\n       :aevt    (set/sorted-set-by cmp-datoms-aevt)\n       :avet    (set/sorted-set-by cmp-datoms-avet)\n       :max-eid e0\n       :max-tx  tx0\n       :hash    (atom 0)})))\n\n(defn- init-max-eid [eavt]\n  (or (-> (set/rslice eavt (datom (dec tx0) nil nil txmax) (datom e0 nil nil tx0))\n        (first)\n        (:e))\n    e0))\n\n(defn ^DB init-db\n  ([datoms] (init-db datoms nil))\n  ([datoms schema]\n    (when-some [not-datom (first (drop-while datom? datoms))]\n      (raise \"init-db expects list of Datoms, got \" (type not-datom)\n        {:error :init-db}))\n    (validate-schema schema)\n    (let [rschema     (rschema (merge implicit-schema schema))\n          indexed     (:db/index rschema)\n          arr         (cond-> datoms\n                        (not (arrays/array? datoms)) (arrays/into-array))\n          _           (arrays/asort arr cmp-datoms-eavt-quick)\n          eavt        (set/from-sorted-array cmp-datoms-eavt arr)\n          _           (arrays/asort arr cmp-datoms-aevt-quick)\n          aevt        (set/from-sorted-array cmp-datoms-aevt arr)\n          avet-datoms (filter (fn [^Datom d] (contains? indexed (.-a d))) datoms)\n          avet-arr    (to-array avet-datoms)\n          _           (arrays/asort avet-arr cmp-datoms-avet-quick)\n          avet        (set/from-sorted-array cmp-datoms-avet avet-arr)\n          max-eid     (init-max-eid eavt)\n          max-tx      (transduce (map (fn [^Datom d] (datom-tx d))) max tx0 eavt)]\n      (map->DB {\n        :schema  schema\n        :rschema rschema\n        :eavt    eavt\n        :aevt    aevt\n        :avet    avet\n        :max-eid max-eid\n        :max-tx  max-tx\n        :hash    (atom 0)}))))\n\n(defn- equiv-db-index [x y]\n  (loop [xs (seq x)\n         ys (seq y)]\n    (cond\n      (nil? xs) (nil? ys)\n      (= (first xs) (first ys)) (recur (next xs) (next ys))\n      :else false)))\n\n(defn- hash-db [^DB db]\n  (let [h @(.-hash db)]\n    (if (zero? h)\n      (reset! (.-hash db) (combine-hashes (hash (.-schema db))\n                                          (hash (.-eavt db))))\n      h)))\n\n(defn- hash-fdb [^FilteredDB db]\n  (let [h @(.-hash db)\n        datoms (or (-datoms db :eavt []) #{})]\n    (if (zero? h)\n      (let [datoms (or (-datoms db :eavt []) #{})]\n        (reset! (.-hash db) (combine-hashes (hash (-schema db))\n                                            (hash-unordered-coll datoms))))\n      h)))\n\n(defn- equiv-db [db other]\n  (and (or (instance? DB other) (instance? FilteredDB other))\n       (= (-schema db) (-schema other))\n       (equiv-db-index (-datoms db :eavt []) (-datoms other :eavt []))))\n\n#?(:cljs\n   (defn pr-db [db w opts]\n     (-write w \"#datascript/DB {\")\n     (-write w \":schema \")\n     (pr-writer (-schema db) w opts)\n     (-write w \", :datoms \")\n     (pr-sequential-writer w\n                           (fn [d w opts]\n                             (pr-sequential-writer w pr-writer \"[\" \" \" \"]\" opts [(.-e d) (.-a d) (.-v d) (datom-tx d)]))\n                           \"[\" \" \" \"]\" opts (-datoms db :eavt []))\n     (-write w \"}\")))\n\n#?(:clj\n   (do\n     (defn pr-db [db, ^java.io.Writer w]\n       (.write w (str \"#datascript/DB {\"))\n       (.write w \":schema \")\n       (binding [*out* w]\n         (pr (-schema db))\n         (.write w \", :datoms [\")\n         (apply pr (map (fn [^Datom d] [(.-e d) (.-a d) (.-v d) (datom-tx d)]) (-datoms db :eavt []))))\n       (.write w \"]}\"))\n\n     (defmethod print-method DB [db w] (pr-db db w))\n     (defmethod print-method FilteredDB [db w] (pr-db db w))     \n))\n\n(defn db-from-reader [{:keys [schema datoms]}]\n  (init-db (map (fn [[e a v tx]] (datom e a v tx)) datoms) schema))\n\n;; ----------------------------------------------------------------------------\n\n(declare entid-strict entid-some ref?)\n\n(defn- resolve-datom [db e a v t default-e default-tx]\n  (when a (validate-attr a (list 'resolve-datom 'db e a v t)))\n  (datom\n    (or (entid-some db e) default-e)  ;; e\n    a                                 ;; a\n    (if (and (some? v) (ref? db a))   ;; v\n      (entid-strict db v)\n      v)\n    (or (entid-some db t) default-tx))) ;; t\n\n(defn- components->pattern [db index [c0 c1 c2 c3] default-e default-tx]\n  (case index\n    :eavt (resolve-datom db c0 c1 c2 c3 default-e default-tx)\n    :aevt (resolve-datom db c1 c0 c2 c3 default-e default-tx)\n    :avet (resolve-datom db c2 c0 c1 c3 default-e default-tx)))\n\n;; ----------------------------------------------------------------------------\n\n(defrecord TxReport [db-before db-after tx-data tempids tx-meta])\n\n(defn #?@(:clj  [^Boolean is-attr?]\n          :cljs [^boolean is-attr?]) [db attr property]\n  (contains? (-attrs-by db property) attr))\n\n(defn #?@(:clj  [^Boolean multival?]\n          :cljs [^boolean multival?]) [db attr]\n  (is-attr? db attr :db.cardinality/many))\n\n(defn #?@(:clj  [^Boolean ref?]\n          :cljs [^boolean ref?]) [db attr]\n  (is-attr? db attr :db.type/ref))\n\n(defn #?@(:clj  [^Boolean component?]\n          :cljs [^boolean component?]) [db attr]\n  (is-attr? db attr :db/isComponent))\n\n(defn #?@(:clj  [^Boolean indexing?]\n          :cljs [^boolean indexing?]) [db attr]\n  (is-attr? db attr :db/index))\n\n(defn #?@(:clj  [^Boolean tuple?]\n          :cljs [^boolean tuple?]) [db attr]\n  (is-attr? db attr :db.type/tuple))\n\n(defn #?@(:clj  [^Boolean tuple-source?]\n          :cljs [^boolean tuple-source?]) [db attr]\n  (is-attr? db attr :db/attrTuples))\n\n(defn entid [db eid]\n  {:pre [(db? db)]}\n  (cond\n    (and (number? eid) (pos? eid))\n    (if (> eid emax)\n      (raise \"Highest supported entity id is \" emax \", got \" eid {:error :entity-id :value eid})\n      eid)\n    \n    (sequential? eid)\n    (let [[attr value] eid]\n      (cond\n        (not= (count eid) 2)\n          (raise \"Lookup ref should contain 2 elements: \" eid\n            {:error :lookup-ref/syntax, :entity-id eid})\n        (not (is-attr? db attr :db/unique))\n          (raise \"Lookup ref attribute should be marked as :db/unique: \" eid\n            {:error :lookup-ref/unique, :entity-id eid})\n        (nil? value)\n          nil\n        :else\n          (-> (-datoms db :avet eid) first :e)))\n    \n    #?@(:cljs [(array? eid) (recur db (array-seq eid))])\n    \n    (keyword? eid)\n    (-> (-datoms db :avet [:db/ident eid]) first :e)\n\n    :else\n    (raise \"Expected number or lookup ref for entity id, got \" eid\n      {:error :entity-id/syntax, :entity-id eid})))\n\n(defn entid-strict [db eid]\n  (or (entid db eid)\n      (raise \"Nothing found for entity id \" eid\n             {:error :entity-id/missing\n              :entity-id eid})))\n\n(defn entid-some [db eid]\n  (when eid\n    (entid-strict db eid)))\n\n;;;;;;;;;; Transacting\n\n(defn validate-datom [db ^Datom datom]\n  (when (and (datom-added datom)\n             (is-attr? db (.-a datom) :db/unique))\n    (when-some [found (not-empty (-datoms db :avet [(.-a datom) (.-v datom)]))]\n      (raise \"Cannot add \" datom \" because of unique constraint: \" found\n             {:error :transact/unique\n              :attribute (.-a datom)\n              :datom datom}))))\n\n(defn- validate-attr [attr at]\n  (when-not (or (keyword? attr) (string? attr))\n    (raise \"Bad entity attribute \" attr \" at \" at \", expected keyword or string\"\n           {:error :transact/syntax, :attribute attr, :context at})))\n\n(defn- validate-val [v at]\n  (when (nil? v)\n    (raise \"Cannot store nil as a value at \" at\n           {:error :transact/syntax, :value v, :context at})))\n\n(defn- current-tx [report]\n  (inc (get-in report [:db-before :max-tx])))\n\n(defn- next-eid [db]\n  (inc (:max-eid db)))\n\n(defn- #?@(:clj  [^Boolean tx-id?]\n           :cljs [^boolean tx-id?])\n  [e]\n  (or (= e :db/current-tx)\n      (= e \":db/current-tx\") ;; for datascript.js interop\n      (= e \"datomic.tx\")\n      (= e \"datascript.tx\")))\n\n(defn- #?@(:clj  [^Boolean tempid?]\n           :cljs [^boolean tempid?])\n  [x]\n  (or (and (number? x) (neg? x)) (string? x)))\n\n(defn- new-eid? [db eid]\n  (and (> eid (:max-eid db))\n       (< eid tx0))) ;; tx0 is max eid\n\n(defn- advance-max-eid [db eid]\n  (cond-> db\n    (new-eid? db eid)\n      (assoc :max-eid eid)))\n\n(defn- allocate-eid\n  ([report eid]\n    (update report :db-after advance-max-eid eid))\n  ([report e eid]\n    (cond-> report\n      (tx-id? e)\n      (update :tempids assoc e eid)\n\n      (tempid? e)\n      (update :tempids assoc e eid)\n\n      (and (not (tempid? e)) (new-eid? (:db-after report) eid))\n      (update :tempids assoc eid eid)\n\n      true\n      (update :db-after advance-max-eid eid))))\n\n;; In context of `with-datom` we can use faster comparators which\n;; do not check for nil (~10-15% performance gain in `transact`)\n\n(defn- with-datom [db ^Datom datom]\n  (validate-datom db datom)\n  (let [indexing? (indexing? db (.-a datom))]\n    (if (datom-added datom)\n      (cond-> db\n        true      (update :eavt set/conj datom cmp-datoms-eavt-quick)\n        true      (update :aevt set/conj datom cmp-datoms-aevt-quick)\n        indexing? (update :avet set/conj datom cmp-datoms-avet-quick)\n        true      (advance-max-eid (.-e datom))\n        true      (assoc :hash (atom 0)))\n      (if-some [removing (first (-search db [(.-e datom) (.-a datom) (.-v datom)]))]\n        (cond-> db\n          true      (update :eavt set/disj removing cmp-datoms-eavt-quick)\n          true      (update :aevt set/disj removing cmp-datoms-aevt-quick)\n          indexing? (update :avet set/disj removing cmp-datoms-avet-quick)\n          true      (assoc :hash (atom 0)))\n        db))))\n\n(defn- queue-tuple [queue tuple idx db e a v]\n  (let [tuple-value  (or (get queue tuple)\n                       (:v (first (-datoms db :eavt [e tuple])))\n                       (vec (repeat (-> db (-schema) (get tuple) :db/tupleAttrs count) nil)))\n        tuple-value' (assoc tuple-value idx v)]\n    (assoc queue tuple tuple-value')))\n\n(defn- queue-tuples [queue tuples db e a v]\n  (reduce-kv\n    (fn [queue tuple idx]\n      (queue-tuple queue tuple idx db e a v))\n    queue\n    tuples))\n\n(defn- transact-report [report datom]\n  (let [db      (:db-after report)\n        a       (:a datom)\n        report' (-> report\n                  (assoc :db-after (with-datom db datom))\n                  (update :tx-data conj datom))]\n    (if (tuple-source? db a)\n      (let [e      (:e datom)\n            v      (if (datom-added datom) (:v datom) nil)\n            queue  (or (-> report' ::queued-tuples (get e)) {})\n            tuples (get (-attrs-by db :db/attrTuples) a)\n            queue' (queue-tuples queue tuples db e a v)]\n        (update report' ::queued-tuples assoc e queue'))\n      report')))\n\n(defn #?@(:clj  [^Boolean reverse-ref?]\n          :cljs [^boolean reverse-ref?]) [attr]\n  (cond\n    (keyword? attr)\n    (= \\_ (nth (name attr) 0))\n    \n    (string? attr)\n    (boolean (re-matches #\"(?:([^/]+)/)?_([^/]+)\" attr))\n   \n    :else\n    (raise \"Bad attribute type: \" attr \", expected keyword or string\"\n           {:error :transact/syntax, :attribute attr})))\n\n(defn reverse-ref [attr]\n  (cond\n    (keyword? attr)\n    (if (reverse-ref? attr)\n      (keyword (namespace attr) (subs (name attr) 1))\n      (keyword (namespace attr) (str \"_\" (name attr))))\n\n   (string? attr)\n   (let [[_ ns name] (re-matches #\"(?:([^/]+)/)?([^/]+)\" attr)]\n     (if (= \\_ (nth name 0))\n       (if ns (str ns \"/\" (subs name 1)) (subs name 1))\n       (if ns (str ns \"/_\" name) (str \"_\" name))))\n   \n   :else\n    (raise \"Bad attribute type: \" attr \", expected keyword or string\"\n           {:error :transact/syntax, :attribute attr})))\n\n(defn- resolve-upserts\n  \"Returns [entity' upserts]. Upsert attributes that resolve to existing entities\n   are removed from entity, rest are kept in entity for insertion. No validation is performed.\n\n   upserts :: {:name  {\\\"Ivan\\\"  1}\n               :email {\\\"ivan@\\\" 2}\n               :alias {\\\"abc\\\"   3\n                       \\\"def\\\"   4}}}\"\n  [db entity]\n  (if-some [idents (not-empty (-attrs-by db :db.unique/identity))]\n    (let [resolve (fn [a v]\n                    (:e (first (-datoms db :avet [a v]))))\n          split   (fn [a vs]\n                    (reduce\n                      (fn [acc v]\n                        (if-some [e (resolve a v)]\n                          (update acc 1 assoc v e)\n                          (update acc 0 conj v)))\n                      [[] {}] vs))]\n      (reduce-kv\n        (fn [[entity upserts] a v]\n          (cond\n            (not (contains? idents a))\n            [(assoc entity a v) upserts]\n\n            (and\n              (multival? db a)\n              (or\n                (arrays/array? v)\n                (and (coll? v) (not (map? v)))))\n            (let [[insert upsert] (split a v)]\n              [(cond-> entity\n                 (not (empty? insert)) (assoc a insert))\n               (cond-> upserts\n                 (not (empty? upsert)) (assoc a upsert))])\n\n            :else\n            (if-some [e (resolve a v)]\n              [entity (assoc upserts a {v e})]\n              [(assoc entity a v) upserts])))\n        [{} {}]\n        entity))\n    [entity nil]))\n\n(defn validate-upserts\n  \"Throws if not all upserts point to the same entity. \n   Returns single eid that all upserts point to, or null.\"\n  [entity upserts]\n  (let [upsert-ids (reduce-kv\n                     (fn [m a v->e]\n                       (reduce-kv\n                         (fn [m v e]\n                           (assoc m e [a v]))\n                         m v->e))\n                     {} upserts)]\n    (if (<= 2 (count upsert-ids))\n      (let [[e1 [a1 v1]] (first upsert-ids)\n            [e2 [a2 v2]] (second upsert-ids)]\n        (raise \"Conflicting upserts: \" [a1 v1] \" resolves to \" e1 \", but \" [a2 v2] \" resolves to \" e2\n          {:error     :transact/upsert\n           :assertion [e1 a1 v1]\n           :conflict  [e2 a2 v2]}))\n      (let [[upsert-id [a v]] (first upsert-ids)\n            eid (:db/id entity)]\n        (when (and\n                (some? upsert-id)\n                (some? eid)\n                (not (tempid? eid))\n                (not= upsert-id eid))\n          (raise \"Conflicting upsert: \" [a v] \" resolves to \" upsert-id \", but entity already has :db/id \" eid\n            {:error     :transact/upsert\n             :assertion [upsert-id a v]\n             :conflict  {:db/id eid}}))\n        upsert-id))))\n\n;; multivals/reverse can be specified as coll or as a single value, trying to guess\n(defn- maybe-wrap-multival [db a vs]\n  (cond\n    ;; not a multival context\n    (not (or (reverse-ref? a)\n             (multival? db a)))\n    [vs]\n\n    ;; not a collection at all, so definitely a single value\n    (not (or (arrays/array? vs)\n             (and (coll? vs) (not (map? vs)))))\n    [vs]\n    \n    ;; probably lookup ref\n    (and (= (count vs) 2)\n         (is-attr? db (first vs) :db.unique/identity))\n    [vs]\n    \n    :else vs))\n\n(defn- explode [db entity]\n  (let [eid (:db/id entity)]\n    (for [[a vs] entity\n          :when  (not= a :db/id)\n          :let   [_          (validate-attr a {:db/id eid, a vs})\n                  reverse?   (reverse-ref? a)\n                  straight-a (if reverse? (reverse-ref a) a)\n                  _          (when (and reverse? (not (ref? db straight-a)))\n                               (raise \"Bad attribute \" a \": reverse attribute name requires {:db/valueType :db.type/ref} in schema\"\n                                      {:error :transact/syntax, :attribute a, :context {:db/id eid, a vs}}))]\n          v      (maybe-wrap-multival db a vs)]\n      (if (and (ref? db straight-a) (map? v)) ;; another entity specified as nested map\n        (assoc v (reverse-ref a) eid)\n        (if reverse?\n          [:db/add v   straight-a eid]\n          [:db/add eid straight-a v])))))\n\n(defn- transact-add [report [_ e a v tx :as ent]]\n  (validate-attr a ent)\n  (validate-val  v ent)\n  (let [tx        (or tx (current-tx report))\n        db        (:db-after report)\n        e         (entid-strict db e)\n        v         (if (ref? db a) (entid-strict db v) v)\n        new-datom (datom e a v tx)]\n    (if (multival? db a)\n      (if (empty? (-search db [e a v]))\n        (transact-report report new-datom)\n        report)\n      (if-some [^Datom old-datom (first (-search db [e a]))]\n        (if (= (.-v old-datom) v)\n          report\n          (-> report\n            (transact-report (datom e a (.-v old-datom) tx false))\n            (transact-report new-datom)))\n        (transact-report report new-datom)))))\n\n(defn- transact-retract-datom [report ^Datom d]\n  (let [tx (current-tx report)]\n    (transact-report report (datom (.-e d) (.-a d) (.-v d) tx false))))\n\n(defn- retract-components [db datoms]\n  (into #{} (comp\n              (filter (fn [^Datom d] (component? db (.-a d))))\n              (map (fn [^Datom d] [:db.fn/retractEntity (.-v d)]))) datoms))\n\n(declare transact-tx-data)\n\n(defn- retry-with-tempid [initial-report report es tempid upserted-eid]\n  (if (contains? (:tempids initial-report) tempid)\n    (raise \"Conflicting upsert: \" tempid \" resolves\"\n           \" both to \" upserted-eid \" and \" (get-in initial-report [:tempids tempid])\n      { :error :transact/upsert })\n    ;; try to re-run from the beginning\n    ;; but remembering that `tempid` will resolve to `upserted-eid`\n    (let [tempids' (-> (:tempids report)\n                     (assoc tempid upserted-eid))\n          report'  (assoc initial-report :tempids tempids')]\n      (transact-tx-data report' es))))\n\n(def builtin-fn?\n  #{:db.fn/call\n    :db.fn/cas\n    :db/cas\n    :db/add\n    :db/retract\n    :db.fn/retractAttribute\n    :db.fn/retractEntity\n    :db/retractEntity})\n\n(defn flush-tuples [report]\n  (let [db          (:db-after report)\n        schema      (-schema db)\n        attr-tuples (-attrs-by db :db/attrTuples)]\n    (reduce-kv\n      (fn [entities eid tuples+values]\n        (reduce-kv\n          (fn [entities tuple value]\n            (let [value   (if (every? nil? value) nil value)\n                  current (:v (first (-datoms db :eavt [eid tuple])))]\n              (cond\n                (= value current) entities\n                (nil? value)      (conj entities ^::internal [:db/retract eid tuple current])\n                :else             (conj entities ^::internal [:db/add eid tuple value]))))\n          entities\n          tuples+values))\n      []\n      (::queued-tuples report))))\n\n(defn check-value-tempids [report]\n  (let [all-tempids (::value-tempids report)\n        reduce-fn   (fn [tempids datom]\n                      (if (datom-added datom)\n                        (dissoc tempids (:e datom))\n                        tempids))\n        unused      (reduce reduce-fn all-tempids (:tx-data report))]\n    (if (empty? unused)\n      (dissoc report ::value-tempids)\n      (raise \"Tempids used only as value in transaction: \" (sort (vals unused))\n        {:error :transact/syntax, :tempids unused}))))\n\n(defn transact-tx-data [initial-report initial-es]\n  (when-not (or (nil? initial-es)\n                (sequential? initial-es))\n    (raise \"Bad transaction data \" initial-es \", expected sequential collection\"\n           {:error :transact/syntax, :tx-data initial-es}))\n  (let [initial-report' (-> initial-report\n                          (update :db-after transient))\n        has-tuples?     (not (empty? (-attrs-by (:db-after initial-report) :db.type/tuple)))\n        initial-es'     (if has-tuples?\n                          (interleave initial-es (repeat ::flush-tuples))\n                          initial-es)]\n    (loop [report initial-report'\n           es     initial-es']\n      (cond+\n        (empty? es)\n        (-> report\n          (check-value-tempids)\n          (update :tempids assoc :db/current-tx (current-tx report))\n          (update :db-after update :max-tx inc)\n          (update :db-after persistent!))\n\n        :let [[entity & entities] es]\n\n        (nil? entity)\n        (recur report entities)\n\n        (= ::flush-tuples entity)\n        (if (contains? report ::queued-tuples)\n          (recur\n            (dissoc report ::queued-tuples)\n            (concat (flush-tuples report) entities))\n          (recur report entities))\n\n        :let [db      (:db-after report)\n              tempids (:tempids report)]\n\n        (map? entity)\n        (let [old-eid (:db/id entity)]\n          (cond+\n            ;; trivial entity\n            ; (if (contains? entity :db/id)\n            ;   (= 1 (count entity))\n            ;   (= 0 (count entity)))\n            ; (recur report entities)\n\n            ;; :db/current-tx / \"datomic.tx\" => tx\n            (tx-id? old-eid)\n            (let [id (current-tx report)]\n              (recur (allocate-eid report old-eid id)\n                     (cons (assoc entity :db/id id) entities)))\n           \n            ;; lookup-ref => resolved | error\n            (sequential? old-eid)\n            (let [id (entid-strict db old-eid)]\n              (recur report\n                     (cons (assoc entity :db/id id) entities)))\n           \n            ;; upserted => explode | error\n            :let [[entity' upserts] (resolve-upserts db entity)\n                  upserted-eid      (validate-upserts entity' upserts)]\n\n            (some? upserted-eid)\n            (if (and (tempid? old-eid)\n                     (contains? tempids old-eid)\n                     (not= upserted-eid (get tempids old-eid)))\n              (retry-with-tempid initial-report report initial-es old-eid upserted-eid)\n              (recur (allocate-eid report old-eid upserted-eid)\n                     (concat (explode db (assoc entity' :db/id upserted-eid)) entities)))\n           \n            ;; resolved | allocated-tempid | tempid | nil => explode\n            (or (number? old-eid)\n                (nil?    old-eid)\n                (string? old-eid))\n            (let [new-eid (cond\n                            (nil? old-eid)    (next-eid db)\n                            (tempid? old-eid) (or (get tempids old-eid) (next-eid db))\n                            :else             old-eid)\n                  new-entity (assoc entity :db/id new-eid)]                \n              (recur (allocate-eid report old-eid new-eid)\n                     (concat (explode db new-entity) entities)))\n           \n            ;; trash => error\n            :else\n            (raise \"Expected number, string or lookup ref for :db/id, got \" old-eid\n              { :error :entity-id/syntax, :entity entity })))\n\n        (sequential? entity)\n        (let [[op e a v] entity]\n          (cond\n            (= op :db.fn/call)\n            (let [[_ f & args] entity]\n              (recur report (concat (apply f db args) entities)))\n            \n            (and (keyword? op)\n              (not (builtin-fn? op)))\n            (if-some [ident (entid db op)]\n              (let [fun  (-> (-search db [ident :db/fn]) first :v)\n                    args (next entity)]\n                (if (fn? fun)\n                  (recur report (concat (apply fun db args) entities))\n                  (raise \"Entity \" op \" expected to have :db/fn attribute with fn? value\"\n                         {:error :transact/syntax, :operation :db.fn/call, :tx-data entity})))\n              (raise \"Can\u2019t find entity for transaction fn \" op\n                     {:error :transact/syntax, :operation :db.fn/call, :tx-data entity}))\n            \n            (and (tempid? e)\n              (not= op :db/add))\n            (raise \"Can't use tempid in '\" entity \"'. Tempids are allowed in :db/add only\"\n              { :error :transact/syntax, :op entity })\n\n            (or (= op :db.fn/cas)\n              (= op :db/cas))\n            (let [[_ e a ov nv] entity\n                  e (entid-strict db e)\n                  _ (validate-attr a entity)\n                  ov (if (ref? db a) (entid-strict db ov) ov)\n                  nv (if (ref? db a) (entid-strict db nv) nv)\n                  _ (validate-val nv entity)\n                  datoms (vec (-search db [e a]))]\n              (if (multival? db a)\n                (if (some (fn [^Datom d] (= (.-v d) ov)) datoms)\n                  (recur (transact-add report [:db/add e a nv]) entities)\n                  (raise \":db.fn/cas failed on datom [\" e \" \" a \" \" (map :v datoms) \"], expected \" ov\n                         {:error :transact/cas, :old datoms, :expected ov, :new nv}))\n                (let [v (:v (first datoms))]\n                  (if (= v ov)\n                    (recur (transact-add report [:db/add e a nv]) entities)\n                    (raise \":db.fn/cas failed on datom [\" e \" \" a \" \" v \"], expected \" ov\n                           {:error :transact/cas, :old (first datoms), :expected ov, :new nv })))))\n\n            (tx-id? e)\n            (recur (allocate-eid report e (current-tx report)) (cons [op (current-tx report) a v] entities))\n\n            (and (ref? db a) (tx-id? v))\n            (recur (allocate-eid report v (current-tx report)) (cons [op e a (current-tx report)] entities))\n\n            (and (ref? db a) (tempid? v))\n            (if-some [resolved (get tempids v)]\n              (let [report' (update report ::value-tempids assoc resolved v)]\n                (recur report' (cons [op e a resolved] entities)))\n              (let [resolved (next-eid db)\n                    report'  (-> report\n                               (allocate-eid v resolved)\n                               (update ::value-tempids assoc resolved v))]\n                (recur report' es)))\n\n            (tempid? e)\n            (let [upserted-eid  (when (is-attr? db a :db.unique/identity)\n                                  (:e (first (-datoms db :avet [a v]))))\n                  allocated-eid (get tempids e)]\n              (if (and upserted-eid allocated-eid (not= upserted-eid allocated-eid))\n                (retry-with-tempid initial-report report initial-es e upserted-eid)\n                (let [eid (or upserted-eid allocated-eid (next-eid db))]\n                  (recur (allocate-eid report e eid) (cons [op eid a v] entities)))))\n\n            (and (not (::internal (meta entity)))\n              (tuple? db a))\n            (raise \"Can\u2019t modify tuple attrs directly: \" entity\n              {:error :transact/syntax, :tx-data entity})\n\n\n            (= op :db/add)\n            (recur (transact-add report entity) entities)\n\n            (and (= op :db/retract) (some? v))\n            (if-some [e (entid db e)]\n              (let [v (if (ref? db a) (entid-strict db v) v)]\n                (validate-attr a entity)\n                (validate-val v entity)\n                (if-some [old-datom (first (-search db [e a v]))]\n                  (recur (transact-retract-datom report old-datom) entities)\n                  (recur report entities)))\n              (recur report entities))\n\n            (or (= op :db.fn/retractAttribute)\n                (= op :db/retract))\n            (if-some [e (entid db e)]\n              (let [_      (validate-attr a entity)\n                    datoms (vec (-search db [e a]))]\n                (recur (reduce transact-retract-datom report datoms)\n                       (concat (retract-components db datoms) entities)))\n              (recur report entities))\n\n            (or (= op :db.fn/retractEntity)\n                (= op :db/retractEntity))\n            (if-some [e (entid db e)]\n              (let [e-datoms (vec (-search db [e]))\n                    v-datoms (vec (mapcat (fn [a] (-search db [nil a e])) (-attrs-by db :db.type/ref)))]\n                (recur (reduce transact-retract-datom report (concat e-datoms v-datoms))\n                       (concat (retract-components db e-datoms) entities)))\n              (recur report entities))\n\n           :else\n           (raise \"Unknown operation at \" entity \", expected :db/add, :db/retract, :db.fn/call, :db.fn/retractAttribute, :db.fn/retractEntity or an ident corresponding to an installed transaction function (e.g. {:db/ident <keyword> :db/fn <Ifn>}, usage of :db/ident requires {:db/unique :db.unique/identity} in schema)\" {:error :transact/syntax, :operation op, :tx-data entity})))\n       \n       (datom? entity)\n       (let [[e a v tx added] entity]\n         (if added\n           (recur (transact-add report [:db/add e a v tx]) entities)\n           (recur report (cons [:db/retract e a v] entities))))\n\n       :else\n       (raise \"Bad entity type at \" entity \", expected map or vector\"\n              {:error :transact/syntax, :tx-data entity})))))\n"]}