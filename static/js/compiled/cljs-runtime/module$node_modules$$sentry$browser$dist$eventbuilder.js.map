{
"version":3,
"file":"module$node_modules$$sentry$browser$dist$eventbuilder.js",
"lineCount":6,
"mappings":"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",
"sources":["node_modules/@sentry/browser/dist/eventbuilder.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$sentry$browser$dist$eventbuilder\"] = function(global,require,module,exports) {\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar types_1 = require(\"@sentry/types\");\nvar utils_1 = require(\"@sentry/utils\");\nvar parsers_1 = require(\"./parsers\");\nvar tracekit_1 = require(\"./tracekit\");\n/**\n * Builds and Event from a Exception\n * @hidden\n */\nfunction eventFromException(options, exception, hint) {\n    var syntheticException = (hint && hint.syntheticException) || undefined;\n    var event = eventFromUnknownInput(exception, syntheticException, {\n        attachStacktrace: options.attachStacktrace,\n    });\n    utils_1.addExceptionMechanism(event, {\n        handled: true,\n        type: 'generic',\n    });\n    event.level = types_1.Severity.Error;\n    if (hint && hint.event_id) {\n        event.event_id = hint.event_id;\n    }\n    return utils_1.SyncPromise.resolve(event);\n}\nexports.eventFromException = eventFromException;\n/**\n * Builds and Event from a Message\n * @hidden\n */\nfunction eventFromMessage(options, message, level, hint) {\n    if (level === void 0) { level = types_1.Severity.Info; }\n    var syntheticException = (hint && hint.syntheticException) || undefined;\n    var event = eventFromString(message, syntheticException, {\n        attachStacktrace: options.attachStacktrace,\n    });\n    event.level = level;\n    if (hint && hint.event_id) {\n        event.event_id = hint.event_id;\n    }\n    return utils_1.SyncPromise.resolve(event);\n}\nexports.eventFromMessage = eventFromMessage;\n/**\n * @hidden\n */\nfunction eventFromUnknownInput(exception, syntheticException, options) {\n    if (options === void 0) { options = {}; }\n    var event;\n    if (utils_1.isErrorEvent(exception) && exception.error) {\n        // If it is an ErrorEvent with `error` property, extract it to get actual Error\n        var errorEvent = exception;\n        // eslint-disable-next-line no-param-reassign\n        exception = errorEvent.error;\n        event = parsers_1.eventFromStacktrace(tracekit_1.computeStackTrace(exception));\n        return event;\n    }\n    if (utils_1.isDOMError(exception) || utils_1.isDOMException(exception)) {\n        // If it is a DOMError or DOMException (which are legacy APIs, but still supported in some browsers)\n        // then we just extract the name and message, as they don't provide anything else\n        // https://developer.mozilla.org/en-US/docs/Web/API/DOMError\n        // https://developer.mozilla.org/en-US/docs/Web/API/DOMException\n        var domException = exception;\n        var name_1 = domException.name || (utils_1.isDOMError(domException) ? 'DOMError' : 'DOMException');\n        var message = domException.message ? name_1 + \": \" + domException.message : name_1;\n        event = eventFromString(message, syntheticException, options);\n        utils_1.addExceptionTypeValue(event, message);\n        return event;\n    }\n    if (utils_1.isError(exception)) {\n        // we have a real Error object, do nothing\n        event = parsers_1.eventFromStacktrace(tracekit_1.computeStackTrace(exception));\n        return event;\n    }\n    if (utils_1.isPlainObject(exception) || utils_1.isEvent(exception)) {\n        // If it is plain Object or Event, serialize it manually and extract options\n        // This will allow us to group events based on top-level keys\n        // which is much better than creating new group when any key/value change\n        var objectException = exception;\n        event = parsers_1.eventFromPlainObject(objectException, syntheticException, options.rejection);\n        utils_1.addExceptionMechanism(event, {\n            synthetic: true,\n        });\n        return event;\n    }\n    // If none of previous checks were valid, then it means that it's not:\n    // - an instance of DOMError\n    // - an instance of DOMException\n    // - an instance of Event\n    // - an instance of Error\n    // - a valid ErrorEvent (one with an error property)\n    // - a plain Object\n    //\n    // So bail out and capture it as a simple message:\n    event = eventFromString(exception, syntheticException, options);\n    utils_1.addExceptionTypeValue(event, \"\" + exception, undefined);\n    utils_1.addExceptionMechanism(event, {\n        synthetic: true,\n    });\n    return event;\n}\nexports.eventFromUnknownInput = eventFromUnknownInput;\n/**\n * @hidden\n */\nfunction eventFromString(input, syntheticException, options) {\n    if (options === void 0) { options = {}; }\n    var event = {\n        message: input,\n    };\n    if (options.attachStacktrace && syntheticException) {\n        var stacktrace = tracekit_1.computeStackTrace(syntheticException);\n        var frames_1 = parsers_1.prepareFramesForEvent(stacktrace.stack);\n        event.stacktrace = {\n            frames: frames_1,\n        };\n    }\n    return event;\n}\nexports.eventFromString = eventFromString;\n//# sourceMappingURL=eventbuilder.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","eventFromUnknownInput","exception","syntheticException","options","utils_1","isErrorEvent","error","event","parsers_1","eventFromStacktrace","tracekit_1","computeStackTrace","isDOMError","isDOMException","name_1","domException","name","message","eventFromString","addExceptionTypeValue","isError","isPlainObject","isEvent","eventFromPlainObject","rejection","addExceptionMechanism","synthetic","undefined","input","attachStacktrace","stacktrace","frames_1","prepareFramesForEvent","stack","frames","Object","defineProperty","value","types_1","eventFromException","hint","handled","type","level","Severity","Error","event_id","SyncPromise","resolve","eventFromMessage","Info"]
}
