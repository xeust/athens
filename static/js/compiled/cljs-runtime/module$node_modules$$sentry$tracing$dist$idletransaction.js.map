{
"version":3,
"file":"module$node_modules$$sentry$tracing$dist$idletransaction.js",
"lineCount":12,
"mappings":"AAAAA,cAAA,CAAe,wDAAf,CAA6E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CA6PrHC,QAASA,uBAAsB,CAACC,GAAD,CAAM,CAC7BA,GAAJ,GACQC,GADR,CACgBD,GAAA,CAAIE,QAAJ,EADhB,GAG0BD,GAAAE,CAAMC,cAAND,EAH1B,EAKYF,GAAA,CAAMI,OAAN,CAAcC,IAAAA,EAAd,CANqB,CA5PrCC,MAAA,CAAOC,cAAP,CAAsBV,OAAtB,CAA+B,YAA/B,CAA6C,CAAEW,MAAO,CAAA,CAAT,CAA7C,CACA,KAAIC,QAAUd,OAAA,CAAQ,iCAAR,CAAd,CACIe,QAAUf,OAAA,CAAQ,8CAAR,CACVgB,OAAAA,CAAShB,OAAA,CAAQ,+CAAR,CACb,KAAIiB,aAAejB,OAAA,CAAQ,qDAAR,CACfkB;OAAAA,CAAgBlB,OAAA,CAAQ,sDAAR,CACpBE,QAAA,CAAQiB,oBAAR,CAA+B,GAI/B,KAAIC,4BAA6C,QAAS,CAACC,MAAD,CAAS,CAE/DD,QAASA,4BAA2B,CAACE,aAAD,CAAgBC,YAAhB,CAA8BC,iBAA9B,CAAiDC,MAAjD,CAAyD,CAC/D,IAAK,EAA/B,GAAID,iBAAJ,GAAoCA,iBAApC,CAAwD,EAAxD,CACIE,OAAAA,CAAQL,MAAA,CAAOM,IAAP,CAAY,IAAZ,CAAkBF,MAAlB,CAARC,EAAqC,IACzCA,OAAA,CAAMJ,aAAN,CAAsBA,aACtBI,OAAA,CAAMH,YAAN,CAAqBA,YACrBG,OAAA,CAAMF,iBAAN,CAA0BA,iBAC1B,OAAOE,OANkF,CAD7FZ,OAAA,CAAQc,SAAR,CAAkBR,2BAAlB;AAA+CC,MAA/C,CAYAD,4BAAA,CAA4BS,SAA5B,CAAsCC,GAAtC,CAA4CC,QAAS,CAACC,IAAD,CAAO,CACxD,IAAIN,MAAQ,IAGRM,KAAJ,CAASC,MAAT,GAAoB,IAApB,CAAyBT,iBAAzB,GAEIQ,IAKA,CALKE,MAKL,CALcC,QAAS,CAACC,YAAD,CAAe,CAClCJ,IAAA,CAAKI,YAAL,CAA4C,QAAxB,GAAA,MAAOA,aAAP,CAAmCA,YAAnC,CAAkDrB,OAAA,CAAQsB,eAAR,EACtEX,MAAA,CAAMH,YAAN,CAAmBS,IAAnB,CAAwBC,MAAxB,CAFkC,CAKtC,CAA0BvB,IAAAA,EAA1B,GAAIsB,IAAJ,CAASI,YAAT,EACI,IAAA,CAAKd,aAAL,CAAmBU,IAAnB,CAAwBC,MAAxB,CARR,CAWAZ,OAAA,CAAOQ,SAAP,CAAiBC,GAAjB,CAAqBH,IAArB,CAA0B,IAA1B,CAAgCK,IAAhC,CAfwD,CAiB5D,OAAOZ,4BA9BwD,CAAlB,CA+B/CJ,MA/B+C,CA+BxCsB,YA/BwC,CAgCjDpC,QAAA,CAAQkB,2BAAR,CAAsCA,2BAMlCmB,QAAAA;AAAiC,QAAS,CAAClB,MAAD,CAAS,CAEnDkB,QAASA,gBAAe,CAACC,kBAAD,CAAqBC,QAArB,CAExBC,YAFwB,CAIxBC,QAJwB,CAId,CACe,IAAK,EAA1B,GAAID,YAAJ,GAA+BA,YAA/B,CAA8CxC,OAA9C,CAAsDiB,oBAAtD,CACiB,KAAK,EAAtB,GAAIwB,QAAJ,GAA2BA,QAA3B,CAAsC,CAAA,CAAtC,CACA,KAAIjB,MAAQL,MAAA,CAAOM,IAAP,CAAY,IAAZ,CAAkBa,kBAAlB,CAAsCC,QAAtC,CAARf,EAA2D,IAC/DA,MAAA,CAAMe,QAAN,CAAiBA,QACjBf,MAAA,CAAMgB,YAAN,CAAqBA,YACrBhB,MAAA,CAAMiB,QAAN,CAAiBA,QAEjBjB,MAAA,CAAMkB,UAAN,CAAmB,EAEnBlB,MAAA,CAAMmB,eAAN,CAAwB,CAExBnB,MAAA,CAAMoB,iBAAN,CAA0B,CAE1BpB,MAAA,CAAMqB,SAAN,CAAkB,CAAA,CAClBrB,MAAA,CAAMsB,sBAAN,CAA+B,EAC3BP,SAAJ,EAAgBE,QAAhB,GAEIxC,sBAAA,CAAuBsC,QAAvB,CAIA;AADA1B,OAAA,CAAQkC,MAAR,CAAeC,GAAf,CAAmB,8CAAnB,CAAoExB,KAApE,CAA0EO,MAA1E,CACA,CAAAQ,QAAA,CAASU,cAAT,CAAwB,QAAS,CAAC9C,KAAD,CAAQ,CAAE,MAAOA,MAAA,CAAMI,OAAN,CAAciB,KAAd,CAAT,CAAzC,CANJ,CAQA,OAAOA,MAxBD,CALVZ,OAAA,CAAQc,SAAR,CAAkBW,eAAlB,CAAmClB,MAAnC,CAgCAkB,gBAAA,CAAgBV,SAAhB,CAA0BK,MAA1B,CAAmCkB,QAAS,CAAChB,YAAD,CAAe,CAAA,IAC9CiB,EAD8C,CAEnD3B,MAAQ,IACS,KAAK,EAA1B,GAAIU,YAAJ,GAA+BA,YAA/B,CAA8CrB,OAAA,CAAQsB,eAAR,EAA9C,CACA,KAAA,CAAKU,SAAL,CAAiB,CAAA,CACjB,KAAA,CAAKH,UAAL,CAAkB,EAClB,IAAI,IAAJ,CAASU,YAAT,CAAuB,CACnBvC,OAAA,CAAQkC,MAAR,CAAeC,GAAf,CAAmB,qCAAnB,CAA0D,CAAA,IAAIK,IAAJ,CAAwB,GAAxB,CAASnB,YAAT,CAAA,EAA8BoB,WAA9B,EAA1D;AAAuG,IAAvG,CAA4GC,EAA5G,CACA,IAAI,CACA,IADA,IACSC,GAAK5C,OAAA,CAAQ6C,QAAR,CAAiB,IAAjB,CAAsBX,sBAAtB,CADd,CAC6DY,GAAKF,EAAA,CAAGG,IAAH,EAAlE,CAA6E,CAACD,EAAD,CAAIE,IAAjF,CAAuFF,EAAvF,CAA4FF,EAAA,CAAGG,IAAH,EAA5F,CAAuG,CACnG,IAAIE,SAAWH,EAAXG,CAAclD,KAClBkD,SAAA,CAAS,IAAT,CAAe3B,YAAf,CAFmG,CADvG,CAMJ,MAAO4B,KAAP,CAAc,CAAE,IAAAC,IAAM,CAAEC,MAAOF,KAAT,CAAR,CANd,OAOQ,CACJ,GAAI,CACIJ,EAAJ,EAAU,CAACA,EAAD,CAAIE,IAAd,GAAuBT,EAAvB,CAA4BK,EAA5B,CAA+BS,MAA/B,GAAwCd,EAAA,CAAG1B,IAAH,CAAQ+B,EAAR,CADxC,CAAJ,OAGQ,CAAE,GAAIO,GAAJ,CAAS,KAAMA,IAAN,CAAUC,KAAV,CAAX,CAJJ,CAMR,IAAA,CAAKZ,YAAL,CAAkBc,KAAlB,CAA0B,IAAA,CAAKd,YAAL,CAAkBc,KAAlB,CAAwBC,MAAxB,CAA+B,QAAS,CAACrC,IAAD,CAAO,CAErE,GAAIA,IAAJ,CAASC,MAAT,GAAoBP,KAApB,CAA0BO,MAA1B,CACI,MAAO,CAAA,CAGND,KAAL,CAAUI,YAAV,GACIJ,IAEA,CAFKI,YAEL,CAFoBA,YAEpB,CADAJ,IAAA,CAAKsC,SAAL,CAAerD,YAAf,CAA4BsD,UAA5B,CAAuCC,SAAvC,CACA,CAAAzD,OAAA,CAAQkC,MAAR,CAAeC,GAAf,CAAmB,yDAAnB;AAA8EuB,IAAA,CAAKC,SAAL,CAAe1C,IAAf,CAAqBtB,IAAAA,EAArB,CAAgC,CAAhC,CAA9E,CAHJ,CAKA,KAAIiE,SAAW3C,IAAX2C,CAAgBC,cAAhBD,CAAiCvC,YAChCuC,SAAL,EACI5D,OAAA,CAAQkC,MAAR,CAAeC,GAAf,CAAmB,4EAAnB,CAAiGuB,IAAA,CAAKC,SAAL,CAAe1C,IAAf,CAAqBtB,IAAAA,EAArB,CAAgC,CAAhC,CAAjG,CAEJ,OAAOiE,SAf8D,CAA/C,CAkBtB,KAAJ,CAAShC,QAAT,EACIxC,sBAAA,CAAuB,IAAvB,CAA4BsC,QAA5B,CAEJ1B,QAAA,CAAQkC,MAAR,CAAeC,GAAf,CAAmB,oCAAnB,CApCmB,CAAvB,IAuCInC,QAAA,CAAQkC,MAAR,CAAeC,GAAf,CAAmB,qCAAnB,CAEJ,OAAO7B,OAAA,CAAOQ,SAAP,CAAiBK,MAAjB,CAAwBP,IAAxB,CAA6B,IAA7B,CAAmCS,YAAnC,CA/CgD,CAwD3DG,gBAAA,CAAgBV,SAAhB,CAA0BgD,4BAA1B;AAAyDC,QAAS,CAACf,QAAD,CAAW,CACzE,IAAA,CAAKf,sBAAL,CAA4B+B,IAA5B,CAAiChB,QAAjC,CADyE,CAM7ExB,gBAAA,CAAgBV,SAAhB,CAA0BmD,gBAA1B,CAA6CC,QAAS,CAACxD,MAAD,CAAS,CAC3D,IAAIC,MAAQ,IACP,KAAL,CAAU4B,YAAV,GACI,IAoBA,CApBK4B,YAoBL,CApBoBC,UAAA,CAAW,QAAS,EAAG,CAClCzD,KAAL,CAAWqB,SAAX,EACIrB,KAAA,CAAMQ,MAAN,EAFmC,CAAvB,CAIjB,IAJiB,CAIZQ,YAJY,CAoBpB,CAHA,IAGA,CAHKY,YAGL,CAHoB,IAAIlC,2BAAJ,CAZDgE,QAAS,CAACC,EAAD,CAAK,CACzB3D,KAAJ,CAAUqB,SAAV,EAGArB,KAAA,CAAMJ,aAAN,CAAoB+D,EAApB,CAJ6B,CAYb,CANFC,QAAS,CAACD,EAAD,CAAK,CACxB3D,KAAJ,CAAUqB,SAAV,EAGArB,KAAA,CAAMH,YAAN,CAAmB8D,EAAnB,CAJ4B,CAMZ,CAA2D,IAA3D,CAAgEpD,MAAhE,CAAwER,MAAxE,CAGpB,CADAV,OAAA,CAAQkC,MAAR,CAAeC,GAAf,CAAmB,oBAAnB,CACA,CAAA,IAAA,CAAKqC,cAAL,EArBJ,CAuBA,KAAA,CAAKjC,YAAL,CAAkBxB,GAAlB,CAAsB,IAAtB,CAzB2D,CA+B/DS;eAAA,CAAgBV,SAAhB,CAA0BP,aAA1B,CAA0CkE,QAAS,CAACvD,MAAD,CAAS,CACpD,IAAJ,CAASiD,YAAT,GACIO,YAAA,CAAa,IAAb,CAAkBP,YAAlB,CACA,CAAA,IAAA,CAAKA,YAAL,CAAoBxE,IAAAA,EAFxB,CAIAK,QAAA,CAAQkC,MAAR,CAAeC,GAAf,CAAmB,0BAAnB,CAAgDjB,MAAhD,CACA,KAAA,CAAKW,UAAL,CAAgBX,MAAhB,CAAA,CAA0B,CAAA,CAC1BlB,QAAA,CAAQkC,MAAR,CAAeC,GAAf,CAAmB,gCAAnB,CAAqDvC,MAAA,CAAO+E,IAAP,CAAY,IAAZ,CAAiB9C,UAAjB,CAArD,CAAkF+C,MAAlF,CAPwD,CAa5DpD,gBAAA,CAAgBV,SAAhB,CAA0BN,YAA1B,CAAyCqE,QAAS,CAAC3D,MAAD,CAAS,CACvD,IAAIP,MAAQ,IACR,KAAA,CAAKkB,UAAL,CAAgBX,MAAhB,CAAJ,GACIlB,OAAA,CAAQkC,MAAR,CAAeC,GAAf,CAAmB,wBAAnB,CAA8CjB,MAA9C,CAGA,CADA,OAAO,IAAA,CAAKW,UAAL,CAAgBX,MAAhB,CACP,CAAAlB,OAAA,CAAQkC,MAAR,CAAeC,GAAf,CAAmB,gCAAnB;AAAqDvC,MAAA,CAAO+E,IAAP,CAAY,IAAZ,CAAiB9C,UAAjB,CAArD,CAAkF+C,MAAlF,CAJJ,CAMA,IAA4C,CAA5C,GAAIhF,MAAA,CAAO+E,IAAP,CAAY,IAAZ,CAAiB9C,UAAjB,CAAJ,CAAiC+C,MAAjC,CAA+C,CACvCE,MAAAA,CAAU,IAAVA,CAAenD,YAGnB,KAAIoD,MAAQ/E,OAAA,CAAQsB,eAAR,EAARyD,CAAoCD,MAApCC,CAA8C,GAClDX,WAAA,CAAW,QAAS,EAAG,CACdzD,KAAL,CAAWqB,SAAX,EACIrB,KAAA,CAAMQ,MAAN,CAAa4D,KAAb,CAFe,CAAvB,CAIGD,MAJH,CAL2C,CARQ,CAwB3DtD,gBAAA,CAAgBV,SAAhB,CAA0BkE,KAA1B,CAAkCC,QAAS,EAAG,CAC1CP,YAAA,CAAa,IAAb,CAAkB5C,eAAlB,CAEA,IAAIE,CAAA,IAAAA,CAAKA,SAAT,CAAA,CAGA,IAAI2C,KAAO/E,MAAA,CAAO+E,IAAP,CAAY,IAAZ,CAAiB9C,UAAjB,CACPqD,KAAAA,CAAkBP,IAAA,CAAKC,MAAL,CAAcD,IAAA,CAAKQ,MAAL,CAAY,QAAS,CAACC,IAAD,CAAOC,OAAP,CAAgB,CAAE,MAAOD,KAAP,CAAcC,OAAhB,CAArC,CAAd,CAAiF,EAEnG,KAAA,CAAKtD,iBAAL,CADAmD,IAAJ,GAAwB,IAAxB,CAA6BI,oBAA7B,CACI,IADJ,CACSvD,iBADT;AAC8B,CAD9B,CAI6B,CAE7B,KAAA,CAAKuD,oBAAL,CAA4BJ,IACE,EAA9B,EAAI,IAAJ,CAASnD,iBAAT,EACI/B,OAAA,CAAQkC,MAAR,CAAeC,GAAf,CAAmB,uEAAnB,CAGA,CAFA,IAAA,CAAKoB,SAAL,CAAerD,YAAf,CAA4BsD,UAA5B,CAAuC+B,gBAAvC,CAEA,CADA,IAAA,CAAKC,MAAL,CAAY,WAAZ,CAAyB,QAAzB,CACA,CAAA,IAAA,CAAKrE,MAAL,EAJJ,EAOI,IAAA,CAAKqD,cAAL,EAnBJ,CAH0C,CA4B9ChD,gBAAA,CAAgBV,SAAhB,CAA0B0D,cAA1B,CAA2CiB,QAAS,EAAG,CACnD,IAAI9E,MAAQ,IACZX,QAAA,CAAQkC,MAAR,CAAeC,GAAf,CAAmB,2CAAnB,CAA8D,IAA9D,CAAmEJ,iBAAnE,CACA,KAAA,CAAKD,eAAL,CAAuBsC,UAAA,CAAW,QAAS,EAAG,CAC1CzD,KAAA,CAAMqE,KAAN,EAD0C,CAAvB,CAEpB,GAFoB,CAH4B,CAOvD;MAAOxD,gBAtM4C,CAAlB,CAuMnCrB,OAvMmC,CAuMrBuF,WAvMqB,CAwMrCvG,QAAA,CAAQqC,eAAR,CAA0BA,OAzP2F;",
"sources":["node_modules/@sentry/tracing/dist/idletransaction.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$sentry$tracing$dist$idletransaction\"] = function(global,require,module,exports) {\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar utils_1 = require(\"@sentry/utils\");\nvar span_1 = require(\"./span\");\nvar spanstatus_1 = require(\"./spanstatus\");\nvar transaction_1 = require(\"./transaction\");\nexports.DEFAULT_IDLE_TIMEOUT = 1000;\n/**\n * @inheritDoc\n */\nvar IdleTransactionSpanRecorder = /** @class */ (function (_super) {\n    tslib_1.__extends(IdleTransactionSpanRecorder, _super);\n    function IdleTransactionSpanRecorder(_pushActivity, _popActivity, transactionSpanId, maxlen) {\n        if (transactionSpanId === void 0) { transactionSpanId = ''; }\n        var _this = _super.call(this, maxlen) || this;\n        _this._pushActivity = _pushActivity;\n        _this._popActivity = _popActivity;\n        _this.transactionSpanId = transactionSpanId;\n        return _this;\n    }\n    /**\n     * @inheritDoc\n     */\n    IdleTransactionSpanRecorder.prototype.add = function (span) {\n        var _this = this;\n        // We should make sure we do not push and pop activities for\n        // the transaction that this span recorder belongs to.\n        if (span.spanId !== this.transactionSpanId) {\n            // We patch span.finish() to pop an activity after setting an endTimestamp.\n            span.finish = function (endTimestamp) {\n                span.endTimestamp = typeof endTimestamp === 'number' ? endTimestamp : utils_1.timestampWithMs();\n                _this._popActivity(span.spanId);\n            };\n            // We should only push new activities if the span does not have an end timestamp.\n            if (span.endTimestamp === undefined) {\n                this._pushActivity(span.spanId);\n            }\n        }\n        _super.prototype.add.call(this, span);\n    };\n    return IdleTransactionSpanRecorder;\n}(span_1.SpanRecorder));\nexports.IdleTransactionSpanRecorder = IdleTransactionSpanRecorder;\n/**\n * An IdleTransaction is a transaction that automatically finishes. It does this by tracking child spans as activities.\n * You can have multiple IdleTransactions active, but if the `onScope` option is specified, the idle transaction will\n * put itself on the scope on creation.\n */\nvar IdleTransaction = /** @class */ (function (_super) {\n    tslib_1.__extends(IdleTransaction, _super);\n    function IdleTransaction(transactionContext, _idleHub, \n    // The time to wait in ms until the idle transaction will be finished. Default: 1000\n    _idleTimeout, \n    // If an idle transaction should be put itself on and off the scope automatically.\n    _onScope) {\n        if (_idleTimeout === void 0) { _idleTimeout = exports.DEFAULT_IDLE_TIMEOUT; }\n        if (_onScope === void 0) { _onScope = false; }\n        var _this = _super.call(this, transactionContext, _idleHub) || this;\n        _this._idleHub = _idleHub;\n        _this._idleTimeout = _idleTimeout;\n        _this._onScope = _onScope;\n        // Activities store a list of active spans\n        _this.activities = {};\n        // Stores reference to the timeout that calls _beat().\n        _this._heartbeatTimer = 0;\n        // Amount of times heartbeat has counted. Will cause transaction to finish after 3 beats.\n        _this._heartbeatCounter = 0;\n        // We should not use heartbeat if we finished a transaction\n        _this._finished = false;\n        _this._beforeFinishCallbacks = [];\n        if (_idleHub && _onScope) {\n            // There should only be one active transaction on the scope\n            clearActiveTransaction(_idleHub);\n            // We set the transaction here on the scope so error events pick up the trace\n            // context and attach it to the error.\n            utils_1.logger.log(\"Setting idle transaction on scope. Span ID: \" + _this.spanId);\n            _idleHub.configureScope(function (scope) { return scope.setSpan(_this); });\n        }\n        return _this;\n    }\n    /** {@inheritDoc} */\n    IdleTransaction.prototype.finish = function (endTimestamp) {\n        var e_1, _a;\n        var _this = this;\n        if (endTimestamp === void 0) { endTimestamp = utils_1.timestampWithMs(); }\n        this._finished = true;\n        this.activities = {};\n        if (this.spanRecorder) {\n            utils_1.logger.log('[Tracing] finishing IdleTransaction', new Date(endTimestamp * 1000).toISOString(), this.op);\n            try {\n                for (var _b = tslib_1.__values(this._beforeFinishCallbacks), _c = _b.next(); !_c.done; _c = _b.next()) {\n                    var callback = _c.value;\n                    callback(this, endTimestamp);\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n            this.spanRecorder.spans = this.spanRecorder.spans.filter(function (span) {\n                // If we are dealing with the transaction itself, we just return it\n                if (span.spanId === _this.spanId) {\n                    return true;\n                }\n                // We cancel all pending spans with status \"cancelled\" to indicate the idle transaction was finished early\n                if (!span.endTimestamp) {\n                    span.endTimestamp = endTimestamp;\n                    span.setStatus(spanstatus_1.SpanStatus.Cancelled);\n                    utils_1.logger.log('[Tracing] cancelling span since transaction ended early', JSON.stringify(span, undefined, 2));\n                }\n                var keepSpan = span.startTimestamp < endTimestamp;\n                if (!keepSpan) {\n                    utils_1.logger.log('[Tracing] discarding Span since it happened after Transaction was finished', JSON.stringify(span, undefined, 2));\n                }\n                return keepSpan;\n            });\n            // this._onScope is true if the transaction was previously on the scope.\n            if (this._onScope) {\n                clearActiveTransaction(this._idleHub);\n            }\n            utils_1.logger.log('[Tracing] flushing IdleTransaction');\n        }\n        else {\n            utils_1.logger.log('[Tracing] No active IdleTransaction');\n        }\n        return _super.prototype.finish.call(this, endTimestamp);\n    };\n    /**\n     * Register a callback function that gets excecuted before the transaction finishes.\n     * Useful for cleanup or if you want to add any additional spans based on current context.\n     *\n     * This is exposed because users have no other way of running something before an idle transaction\n     * finishes.\n     */\n    IdleTransaction.prototype.registerBeforeFinishCallback = function (callback) {\n        this._beforeFinishCallbacks.push(callback);\n    };\n    /**\n     * @inheritDoc\n     */\n    IdleTransaction.prototype.initSpanRecorder = function (maxlen) {\n        var _this = this;\n        if (!this.spanRecorder) {\n            this._initTimeout = setTimeout(function () {\n                if (!_this._finished) {\n                    _this.finish();\n                }\n            }, this._idleTimeout);\n            var pushActivity = function (id) {\n                if (_this._finished) {\n                    return;\n                }\n                _this._pushActivity(id);\n            };\n            var popActivity = function (id) {\n                if (_this._finished) {\n                    return;\n                }\n                _this._popActivity(id);\n            };\n            this.spanRecorder = new IdleTransactionSpanRecorder(pushActivity, popActivity, this.spanId, maxlen);\n            // Start heartbeat so that transactions do not run forever.\n            utils_1.logger.log('Starting heartbeat');\n            this._pingHeartbeat();\n        }\n        this.spanRecorder.add(this);\n    };\n    /**\n     * Start tracking a specific activity.\n     * @param spanId The span id that represents the activity\n     */\n    IdleTransaction.prototype._pushActivity = function (spanId) {\n        if (this._initTimeout) {\n            clearTimeout(this._initTimeout);\n            this._initTimeout = undefined;\n        }\n        utils_1.logger.log(\"[Tracing] pushActivity: \" + spanId);\n        this.activities[spanId] = true;\n        utils_1.logger.log('[Tracing] new activities count', Object.keys(this.activities).length);\n    };\n    /**\n     * Remove an activity from usage\n     * @param spanId The span id that represents the activity\n     */\n    IdleTransaction.prototype._popActivity = function (spanId) {\n        var _this = this;\n        if (this.activities[spanId]) {\n            utils_1.logger.log(\"[Tracing] popActivity \" + spanId);\n            // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n            delete this.activities[spanId];\n            utils_1.logger.log('[Tracing] new activities count', Object.keys(this.activities).length);\n        }\n        if (Object.keys(this.activities).length === 0) {\n            var timeout = this._idleTimeout;\n            // We need to add the timeout here to have the real endtimestamp of the transaction\n            // Remember timestampWithMs is in seconds, timeout is in ms\n            var end_1 = utils_1.timestampWithMs() + timeout / 1000;\n            setTimeout(function () {\n                if (!_this._finished) {\n                    _this.finish(end_1);\n                }\n            }, timeout);\n        }\n    };\n    /**\n     * Checks when entries of this.activities are not changing for 3 beats.\n     * If this occurs we finish the transaction.\n     */\n    IdleTransaction.prototype._beat = function () {\n        clearTimeout(this._heartbeatTimer);\n        // We should not be running heartbeat if the idle transaction is finished.\n        if (this._finished) {\n            return;\n        }\n        var keys = Object.keys(this.activities);\n        var heartbeatString = keys.length ? keys.reduce(function (prev, current) { return prev + current; }) : '';\n        if (heartbeatString === this._prevHeartbeatString) {\n            this._heartbeatCounter += 1;\n        }\n        else {\n            this._heartbeatCounter = 1;\n        }\n        this._prevHeartbeatString = heartbeatString;\n        if (this._heartbeatCounter >= 3) {\n            utils_1.logger.log(\"[Tracing] Transaction finished because of no change for 3 heart beats\");\n            this.setStatus(spanstatus_1.SpanStatus.DeadlineExceeded);\n            this.setTag('heartbeat', 'failed');\n            this.finish();\n        }\n        else {\n            this._pingHeartbeat();\n        }\n    };\n    /**\n     * Pings the heartbeat\n     */\n    IdleTransaction.prototype._pingHeartbeat = function () {\n        var _this = this;\n        utils_1.logger.log(\"pinging Heartbeat -> current counter: \" + this._heartbeatCounter);\n        this._heartbeatTimer = setTimeout(function () {\n            _this._beat();\n        }, 5000);\n    };\n    return IdleTransaction;\n}(transaction_1.Transaction));\nexports.IdleTransaction = IdleTransaction;\n/**\n * Reset active transaction on scope\n */\nfunction clearActiveTransaction(hub) {\n    if (hub) {\n        var scope = hub.getScope();\n        if (scope) {\n            var transaction = scope.getTransaction();\n            if (transaction) {\n                scope.setSpan(undefined);\n            }\n        }\n    }\n}\n//# sourceMappingURL=idletransaction.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","clearActiveTransaction","hub","scope","getScope","transaction","getTransaction","setSpan","undefined","Object","defineProperty","value","tslib_1","utils_1","span_1","spanstatus_1","transaction_1","DEFAULT_IDLE_TIMEOUT","IdleTransactionSpanRecorder","_super","_pushActivity","_popActivity","transactionSpanId","maxlen","_this","call","__extends","prototype","add","IdleTransactionSpanRecorder.prototype.add","span","spanId","finish","span.finish","endTimestamp","timestampWithMs","SpanRecorder","IdleTransaction","transactionContext","_idleHub","_idleTimeout","_onScope","activities","_heartbeatTimer","_heartbeatCounter","_finished","_beforeFinishCallbacks","logger","log","configureScope","IdleTransaction.prototype.finish","_a","spanRecorder","Date","toISOString","op","_b","__values","_c","next","done","callback","e_1_1","e_1","error","return","spans","filter","setStatus","SpanStatus","Cancelled","JSON","stringify","keepSpan","startTimestamp","registerBeforeFinishCallback","IdleTransaction.prototype.registerBeforeFinishCallback","push","initSpanRecorder","IdleTransaction.prototype.initSpanRecorder","_initTimeout","setTimeout","pushActivity","id","popActivity","_pingHeartbeat","IdleTransaction.prototype._pushActivity","clearTimeout","keys","length","IdleTransaction.prototype._popActivity","timeout","end_1","_beat","IdleTransaction.prototype._beat","heartbeatString","reduce","prev","current","_prevHeartbeatString","DeadlineExceeded","setTag","IdleTransaction.prototype._pingHeartbeat","Transaction"]
}
