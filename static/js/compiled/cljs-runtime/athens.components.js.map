{"version":3,"sources":["athens/components.cljs"],"mappings":";;AAcA,AAAA,AAAMA,AACHC,AAAIC,AAASC;AADhB,AAEE,AAAMC,AAAsB,AAAA,AAAe,AAAA,AAAA,AAACC,AAAyBJ;AAArE,AACE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACK,AAAoCL,AACA,AAACM,AACCH,AACAF,AACAC,AACF,AAACK;;AAG1C;;;;;AAAA,AAAMC,AAIHC;AAJH,AAAA,AAAA,AAAA,AAAA,AAKoB,AAAKC;AAAL,AACE,AAAIA;AACvBD;;AAGH,AAAAE,AAAA,AAAA,AACGC,AAASZ;AADZ,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEGQ;AAFH,AAKwB,AAAA,AAAA,AAACT,AAAcC;;;AAGvC,AAAAW,AAAA,AAAA,AACGC,AAASZ;AADZ,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEGQ;AAFH,AAKwB,AAAA,AAAA,AAACT,AAAcC;;;AAGvC,AAAAW,AAAA,AAAA,AACGE,AAAQC;AADX,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEGN,AAEkB,AAAA,AAAsC,AAAA,AAACO,AAAI,AAAA,AAACC,AAAiCH;;AAIlG,AAAAF,AAAA,AAAA,AACGE,AAAQC;AADX,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEGN,AAEgB,AAAA,AAACQ,AAAkBH;;AAGtC,AAAAF,AAAA,AAAA,AACGE,AAAQC;AADX,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEGN,AAGCK;;AAGJ,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKI,AACU,AAAA,AAAA,AAACC;AAYhB,AAAAP,AAAA,AAAA,AACGE,AAAQb;AADX,AAKE,AAAMmB,AAAU,AAACC,AAAK,AAAA,AAACJ,AAAwBH;AAA/C,AAEE,AAAI,AAAA,AAACQ,AAAsBF;AACzB,AAAAG,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAAC;AAAA,AAAA,AAAA,AAAAD,AAAA;AAAA;AAAA,AAAAE,AAAAF;AAAA,AAAA,AAAA,AAAA,AAAAF,AAAA,AAAAI;AAAA,AAAA,AAAAC;AAAA,AAAA,AAAA,AAAAC,AAAAC,AAAAC,AAAA,AAAA,AAAA;;AAAA;;AAAA;;AAAA,AAAA,AAAAR,AAAA,AAAAI;;;;AAAA,AAAAK,AAAA,AAAA,AAAAT,AAAA;AAAA,AAAAS,AAAA,AAAAT,AAAA,AAAA,AAAAA,AAAA,AAAaW,AAAS,AAACC;AAAvB,AAAA,AAAAF,AAAA,AAAA,AAAA,AAC8B,AAACG,AAAUlB,AAC5B,AAAMmB,AAAM,AAAA,AAAA,AAACC,AAAkClB;AAA/C,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEImB,AACA,AAACC,AAAmCH,AAAMH,AAG3C,AAAA,AAAAO,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAW,AAAA,AAAA,AAACC,AAA+BzC,AACrC0C,AACQ,AAAKhC;AAAL,AACE,AAAIA;;AACJ,AAAA,AAAA,AAACL,AAAuBL;;;AAZxD,AAAA;AAAAgC;;AADF,AAAA,AAAA,AAAA,AAec,AAAA,AAAC1B,AAAYO,AAAQM","names":["athens.components/todo-on-click","uid","from-str","to-str","current-block-content","athens.db/get-block","re-frame.core/dispatch","clojure.string/replace","athens.util/now-ts","athens.components/span-click-stop","children","e","athens.parse-renderer/component","_content","content","_uid","cljs.core.get","cljs.core/re-find","athens.components/block-embed-adjustments","athens.style.color","block-uid","cljs.core/last","athens.db/e-by-av","with-let60545","reagent.ratom/with-let-values","temp__5739__auto__","reagent.ratom/*ratom-context*","c__41528__auto__","reagent.debug/has-console","reagent.debug/tracking","reagent.debug/track-console","js/console","init60546","res__41529__auto__","embed-id","cljs.core/random-uuid","stylefy.core.use_style","block","athens.db/get-block-document","athens.views.blocks/block-el","athens.util/recursively-modify-block-for-embed","cljs.core/deref","re_frame.core.subscribe","js/module$node_modules$$material_ui$icons$Edit.default"],"sourcesContent":["(ns athens.components\n  (:require\n    [\"@material-ui/icons/Edit\" :default Edit]\n    [athens.db :as db]\n    [athens.parse-renderer :refer [component]]\n    [athens.style :refer [color]]\n    [athens.util :refer [now-ts recursively-modify-block-for-embed]]\n    [athens.views.blocks :as blocks]\n    [clojure.string :as str]\n    [re-frame.core :refer [dispatch subscribe]]\n    [reagent.core :as r]\n    [stylefy.core :as stylefy :refer [use-style]]))\n\n\n(defn todo-on-click\n  [uid from-str to-str]\n  (let [current-block-content (:block/string (db/get-block [:block/uid uid]))]\n    (dispatch [:transact [{:block/uid    uid\n                           :block/string (clojure.string/replace\n                                           current-block-content\n                                           from-str\n                                           to-str)\n                           :edit/time    (now-ts)}]])))\n\n\n(defn span-click-stop\n  \"Stop clicks from propagating to textarea and thus preventing edit mode\n   TODO() - might be a good idea to keep an edit icon at top right\n     for every component.\"\n  [children]\n  [:span {:on-click (fn [e]\n                      (.. e stopPropagation))}\n   children])\n\n\n(defmethod component :todo\n  [_content uid]\n  [span-click-stop\n   [:input {:type      \"checkbox\"\n            :checked   false\n            :on-change #(todo-on-click uid #\"\\{\\{\\[\\[TODO\\]\\]\\}\\}\" \"{{[[DONE]]}}\")}]])\n\n\n(defmethod component :done\n  [_content uid]\n  [span-click-stop\n   [:input {:type      \"checkbox\"\n            :checked   true\n            :on-change #(todo-on-click uid #\"\\{\\{\\[\\[DONE\\]\\]\\}\\}\" \"{{[[TODO]]}}\")}]])\n\n\n(defmethod component :youtube\n  [content _uid]\n  [span-click-stop\n   [:div.media-16-9\n    [:iframe {:src   (str \"https://www.youtube.com/embed/\" (get (re-find #\".*v=([a-zA-Z0-9_\\-]+)\" content) 1))\n              :allow \"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"}]]])\n\n\n(defmethod component :iframe\n  [content _uid]\n  [span-click-stop\n   [:div.media-16-9\n    [:iframe {:src (re-find #\"http.*\" content)}]]])\n\n\n(defmethod component :self\n  [content _uid]\n  [span-click-stop\n   [:button {:style {:color       \"red\"\n                     :font-family \"IBM Plex Mono\"}}\n    content]])\n\n\n(def block-embed-adjustments\n  {:background (color :background-minus-2 :opacity-med)\n   :position   \"relative\"\n   ::stylefy/manual [[:>.block-container {:margin-left \"0\"\n                                          ::stylefy/manual [[:textarea {:background \"transparent\"}]]}]\n                     [:>svg              {:position   \"absolute\"\n                                          :right      \"5px\"\n                                          :top        \"5px\"\n                                          :font-size  \"1rem\"\n                                          :z-index    \"5\"\n                                          :cursor     \"pointer\"}]]})\n\n\n(defmethod component :block-embed\n  [content uid]\n  ;; bindings are eval only once in with-let\n  ;; which is needed to keep embed integrity else it will update on\n  ;; each re-render. Similar to ref-comp\n  (let [block-uid (last (re-find #\"\\(\\((.+)\\)\\)\" content))]\n    ;; todo -- not reactive. some cases where delete then ctrl-z doesn't work\n    (if (db/e-by-av :block/uid block-uid)\n      (r/with-let [embed-id (random-uuid)]\n                  [:div.block-embed (use-style block-embed-adjustments)\n                   (let [block (db/get-block-document [:block/uid block-uid])]\n                     [:<>\n                      [blocks/block-el\n                       (recursively-modify-block-for-embed block embed-id)\n                       {:linked-ref false}\n                       {:block-embed? true}]\n                      (when-not @(subscribe [:editing/is-editing uid])\n                        [:> Edit\n                         {:on-click (fn [e]\n                                      (.. e stopPropagation)\n                                      (dispatch [:editing/uid uid]))}])])])\n      ;; roam actually hides the brackets around [[embed]]\n      [:span \"{{\" (str/replace content block-uid \"invalid\") \"}}\"])))\n\n\n"]}