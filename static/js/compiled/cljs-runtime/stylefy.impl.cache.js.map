{"version":3,"sources":["stylefy/impl/cache.cljs"],"mappings":"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","names":["stylefy.impl.cache/cache-prefix","stylefy.impl.cache/cache-styles?","cljs.core.atom","stylefy.impl.cache/default-cache-expiration-time-s","cljs.core/*","stylefy.impl.cache/cache-key-styles","instance-id","stylefy.impl.cache/cache-key-created","stylefy.impl.cache/now-in-seconds","js/Math","js/Date","stylefy.impl.cache/cache-expired?","cache-created","expiration-age","now","and__4115__auto__","stylefy.impl.cache/read-cache-value","key","cljs.core/deref","temp__5735__auto__","cache-contents","js/window","cljs.reader.read_string","var_args","G__94041","stylefy.impl.cache/set-cache-created-time","js/Error","time-created","stylefy.impl.cache.set_cache_created_time","G__94046","stylefy.impl.cache/clear-styles","stylefy.impl.cache.clear_styles","G__94049","stylefy.impl.cache/use-caching!","cache-options","stylefy.impl.cache.use_caching_BANG_","cljs.core/reset!","or__4126__auto__","G__94060","stylefy.impl.cache/cache-styles","styles","stylefy.impl.cache.cache_styles","cljs.core/map?"],"sourcesContent":["(ns stylefy.impl.cache)\r\n\r\n(def cache-prefix \"stylefy_cache_\")\r\n(def cache-styles? (atom false))\r\n(def default-cache-expiration-time-s (* 1 60 60 * 24 * 7))\r\n\r\n(defn cache-key-styles [instance-id]\r\n  (str cache-prefix \"styles\"\r\n       (when instance-id\r\n         (str \"_\" instance-id))))\r\n\r\n(defn- cache-key-created [instance-id]\r\n  (str cache-prefix \"created\"\r\n       (when instance-id\r\n         (str \"_\" instance-id))))\r\n\r\n; Utils\r\n\r\n(defn now-in-seconds []\r\n  (.floor js/Math (/ (.now js/Date) 1000)))\r\n\r\n(defn cache-expired? [cache-created expiration-age now]\r\n  (if (and cache-created expiration-age)\r\n    (< (+ cache-created expiration-age) now)\r\n    false))\r\n\r\n; Cache reading\r\n\r\n(defn read-cache-value\r\n  \"Reads the cache if caching is used.\"\r\n  [key]\r\n  (when @cache-styles?\r\n    (when-let [cache-contents (.getItem (.-localStorage js/window) key)]\r\n      (cljs.reader/read-string cache-contents))))\r\n\r\n; Cache manipulation\r\n\r\n(defn set-cache-created-time\r\n  ([time-created]\r\n   (set-cache-created-time time-created nil))\r\n  ([time-created instance-id]\r\n   (.setItem (.-localStorage js/window)\r\n             (cache-key-created instance-id)\r\n             time-created)))\r\n\r\n(defn clear-styles\r\n  ([]\r\n   (clear-styles nil))\r\n  ([instance-id]\r\n   (.setItem (.-localStorage js/window)\r\n             (cache-key-styles instance-id)\r\n             \"\")))\r\n\r\n(defn use-caching!\r\n  ([cache-options]\r\n   (use-caching! cache-options nil))\r\n  ([cache-options instance-id]\r\n   (reset! cache-styles? true)\r\n\r\n    ; If cache is empty, set creation date.\r\n   (when-not (read-cache-value (cache-key-created instance-id))\r\n     (set-cache-created-time (now-in-seconds) instance-id))\r\n\r\n   (when (cache-expired? (read-cache-value (cache-key-created instance-id))\r\n                         (or (:expires cache-options) default-cache-expiration-time-s)\r\n                         (now-in-seconds))\r\n     (clear-styles instance-id)\r\n     (set-cache-created-time (now-in-seconds) instance-id))))\r\n\r\n(defn cache-styles\r\n  \"Caches the given style if caching is used.\r\n  Throws QUOTA_EXCEEDED_ERR if the storage is full.\"\r\n  ([styles]\r\n   (cache-styles styles nil))\r\n  ([styles instance-id]\r\n   (when (and @cache-styles? (map? styles))\r\n     (.setItem (.-localStorage js/window)\r\n               (cache-key-styles instance-id)\r\n               styles))))"]}