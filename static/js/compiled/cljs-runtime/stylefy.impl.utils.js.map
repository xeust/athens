{"version":3,"sources":["stylefy/impl/utils.cljc"],"mappings":";AAWA;;;AAAA,AAAMA,AAEHC;AAFH,AAGE,AAACC,AAAMC,AAAOF,AAAM,AAAA,AAAAG,AAACC;AAAD,AAAS,AAAAC,AAAK,AAAAF,AAACG;AAAN,AAAA,AAAAD;AACK,AAAA,AAACE,AAAiB,AAAAJ,AAACG;;AADxBD;;AAED,AAACG,AAAKR;;AAEpC,AAAA,AAAMS,AAAkBC;AAAxB,AAEW,AAAI,AAAWC,AAAcD,AACzB,AAAWE,AAAeF,AAC1B,AAAWG,AAAkBH","names":["stylefy.impl.utils/remove-special-keywords","props","cljs.core.apply","cljs.core/dissoc","p1__94412#","cljs.core.filter","and__4115__auto__","cljs.core/namespace","clojure.string/starts-with?","cljs.core/keys","stylefy.impl.utils/is-garden-value?","value","garden.types/CSSUnit","garden.color/CSSColor","garden.types/CSSFunction"],"sourcesContent":["(ns stylefy.impl.utils\r\n  (:require [garden.core :refer [css]]\r\n            [garden.color :as color]\r\n            [garden.types :as types]\r\n            [garden.stylesheet :refer [at-media at-keyframes at-font-face]]\r\n            [clojure.string :as str])\r\n  (:import #?@(:clj\r\n               [(garden.types CSSFunction)\r\n                (garden.types CSSUnit)\r\n                (garden.color CSSColor)])))\r\n\r\n(defn remove-special-keywords\r\n  \"Removes stylefy's namespaced keywords from the given map.\"\r\n  [props]\r\n  (apply dissoc props (filter #(and (namespace %)\r\n                                    (str/starts-with? (namespace %) \"stylefy\"))\r\n                              (keys props))))\r\n\r\n(defn is-garden-value? [value]\r\n  ; Note: types/CSSAtRule is not included since it is a selector, not a valid CSS value.\r\n  #?(:cljs (or (instance? types/CSSUnit value)\r\n               (instance? color/CSSColor value)\r\n               (instance? types/CSSFunction value))\r\n     :clj  (or (instance? CSSUnit value)\r\n               (instance? CSSColor value)\r\n               (instance? CSSFunction value))))"]}