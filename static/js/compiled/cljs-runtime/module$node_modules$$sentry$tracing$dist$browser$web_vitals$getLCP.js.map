{
"version":3,
"file":"module$node_modules$$sentry$tracing$dist$browser$web_vitals$getLCP.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAe,kEAAf,CAAuF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAgB/HC,MAAA,CAAOC,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAAEG,MAAO,CAAA,CAAT,CAA7C,CACA,KAAIC,eAAiBN,OAAA,CAAQ,8EAAR,CAArB,CACIO,iBAAmBP,OAAA,CAAQ,gFAAR,CADvB,CAEIQ,aAAeR,OAAA,CAAQ,4EAAR,CAFnB,CAGIS,UAAYT,OAAA,CAAQ,yEAAR,CAHhB;AAIIU,WAAaV,OAAA,CAAQ,0EAAR,CAJjB,CAKIW,YAAcX,OAAA,CAAQ,2EAAR,CAClBE,QAAA,CAAQU,MAAR,CAAiBC,QAAS,CAACC,QAAD,CAAWC,gBAAX,CAA6B,CAC1B,IAAK,EAA9B,GAAIA,gBAAJ,GAAmCA,gBAAnC,CAAsD,CAAA,CAAtD,CACA,KAAIC,OAASR,YAAA,CAAaS,UAAb,CAAwB,KAAxB,CAAb,CACIC,YAAcX,gBAAA,CAAiBY,cAAjB,EADlB,CAGIC,aAAeA,QAAS,CAACC,KAAD,CAAQ,CAGhC,IAAIhB,MAAQgB,KAARhB,CAAciB,SAGdjB,MAAJ,CAAYa,WAAZ,CAAwBK,SAAxB,EACIP,MACA,CADOX,KACP,CADeA,KACf,CAAAW,MAAA,CAAOQ,OAAP,CAAeC,IAAf,CAAoBJ,KAApB,CAFJ;AAKIL,MALJ,CAKWU,OALX,CAKqB,CAAA,CAErBC,OAAA,EAbgC,CAHpC,CAkBIC,GAAKnB,SAAA,CAAUoB,OAAV,CAAkB,0BAAlB,CAA8CT,YAA9C,CACT,IAAIQ,EAAJ,CAAQ,CACJ,IAAAD,OAASrB,cAAA,CAAewB,YAAf,CAA4BhB,QAA5B,CAAsCE,MAAtC,CAA8CY,EAA9C,CAAkDb,gBAAlD,CACLgB,SAAAA,CAAUA,QAAS,EAAG,CACjBf,MAAL,CAAYU,OAAZ,GACIE,EAAA,CAAGI,WAAH,EAAA,CAAiBC,GAAjB,CAAqBb,YAArB,CAEA,CADAJ,MACA,CADOU,OACP,CADiB,CAAA,CACjB,CAAAC,MAAA,EAHJ,CADsB,CAO1B,KAAKhB,YAAA,CAAYuB,SAAZ,EAAA,CAAwBC,IAAxB,CAA6BJ,QAA7B,CACLrB,WAAA,CAAW0B,QAAX,CAAoBL,QAApB,CAA6B,CAAA,CAA7B,CAVI,CArB2C,CAvBwE;",
"sources":["node_modules/@sentry/tracing/dist/browser/web-vitals/getLCP.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$sentry$tracing$dist$browser$web_vitals$getLCP\"] = function(global,require,module,exports) {\n/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bindReporter_1 = require(\"./lib/bindReporter\");\nvar getFirstHidden_1 = require(\"./lib/getFirstHidden\");\nvar initMetric_1 = require(\"./lib/initMetric\");\nvar observe_1 = require(\"./lib/observe\");\nvar onHidden_1 = require(\"./lib/onHidden\");\nvar whenInput_1 = require(\"./lib/whenInput\");\nexports.getLCP = function (onReport, reportAllChanges) {\n    if (reportAllChanges === void 0) { reportAllChanges = false; }\n    var metric = initMetric_1.initMetric('LCP');\n    var firstHidden = getFirstHidden_1.getFirstHidden();\n    var report;\n    var entryHandler = function (entry) {\n        // The startTime attribute returns the value of the renderTime if it is not 0,\n        // and the value of the loadTime otherwise.\n        var value = entry.startTime;\n        // If the page was hidden prior to paint time of the entry,\n        // ignore it and mark the metric as final, otherwise add the entry.\n        if (value < firstHidden.timeStamp) {\n            metric.value = value;\n            metric.entries.push(entry);\n        }\n        else {\n            metric.isFinal = true;\n        }\n        report();\n    };\n    var po = observe_1.observe('largest-contentful-paint', entryHandler);\n    if (po) {\n        report = bindReporter_1.bindReporter(onReport, metric, po, reportAllChanges);\n        var onFinal = function () {\n            if (!metric.isFinal) {\n                po.takeRecords().map(entryHandler);\n                metric.isFinal = true;\n                report();\n            }\n        };\n        void whenInput_1.whenInput().then(onFinal);\n        onHidden_1.onHidden(onFinal, true);\n    }\n};\n//# sourceMappingURL=getLCP.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","bindReporter_1","getFirstHidden_1","initMetric_1","observe_1","onHidden_1","whenInput_1","getLCP","exports.getLCP","onReport","reportAllChanges","metric","initMetric","firstHidden","getFirstHidden","entryHandler","entry","startTime","timeStamp","entries","push","isFinal","report","po","observe","bindReporter","onFinal","takeRecords","map","whenInput","then","onHidden"]
}
