{
"version":3,
"file":"module$node_modules$$sentry$tracing$dist$hubextensions.js",
"lineCount":9,
"mappings":"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",
"sources":["node_modules/@sentry/tracing/dist/hubextensions.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$sentry$tracing$dist$hubextensions\"] = function(global,require,module,exports) {\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar hub_1 = require(\"@sentry/hub\");\nvar utils_1 = require(\"@sentry/utils\");\nvar errors_1 = require(\"./errors\");\nvar idletransaction_1 = require(\"./idletransaction\");\nvar transaction_1 = require(\"./transaction\");\nvar utils_2 = require(\"./utils\");\n/** Returns all trace headers that are currently on the top scope. */\nfunction traceHeaders() {\n    var scope = this.getScope();\n    if (scope) {\n        var span = scope.getSpan();\n        if (span) {\n            return {\n                'sentry-trace': span.toTraceparent(),\n            };\n        }\n    }\n    return {};\n}\n/**\n * Implements sampling inheritance and falls back to user-provided static rate if no parent decision is available.\n *\n * @param parentSampled: The parent transaction's sampling decision, if any.\n * @param givenRate: The rate to use if no parental decision is available.\n *\n * @returns The parent's sampling decision (if one exists), or the provided static rate\n */\nfunction _inheritOrUseGivenRate(parentSampled, givenRate) {\n    return parentSampled !== undefined ? parentSampled : givenRate;\n}\n/**\n * Makes a sampling decision for the given transaction and stores it on the transaction.\n *\n * Called every time a transaction is created. Only transactions which emerge with a `sampled` value of `true` will be\n * sent to Sentry.\n *\n * @param hub: The hub off of which to read config options\n * @param transaction: The transaction needing a sampling decision\n * @param samplingContext: Default and user-provided data which may be used to help make the decision\n *\n * @returns The given transaction with its `sampled` value set\n */\nfunction sample(hub, transaction, samplingContext) {\n    var _a;\n    var client = hub.getClient();\n    var options = (client && client.getOptions()) || {};\n    // nothing to do if there's no client or if tracing is disabled\n    if (!client || !utils_2.hasTracingEnabled(options)) {\n        transaction.sampled = false;\n        return transaction;\n    }\n    // if the user has forced a sampling decision by passing a `sampled` value in their transaction context, go with that\n    if (transaction.sampled !== undefined) {\n        return transaction;\n    }\n    // we would have bailed already if neither `tracesSampler` nor `tracesSampleRate` were defined, so one of these should\n    // work; prefer the hook if so\n    var sampleRate = typeof options.tracesSampler === 'function'\n        ? options.tracesSampler(samplingContext)\n        : _inheritOrUseGivenRate(samplingContext.parentSampled, options.tracesSampleRate);\n    // Since this is coming from the user (or from a function provided by the user), who knows what we might get. (The\n    // only valid values are booleans or numbers between 0 and 1.)\n    if (!isValidSampleRate(sampleRate)) {\n        utils_1.logger.warn(\"[Tracing] Discarding transaction because of invalid sample rate.\");\n        transaction.sampled = false;\n        return transaction;\n    }\n    // if the function returned 0 (or false), or if `tracesSampleRate` is 0, it's a sign the transaction should be dropped\n    if (!sampleRate) {\n        utils_1.logger.log(\"[Tracing] Discarding transaction because \" + (typeof options.tracesSampler === 'function'\n            ? 'tracesSampler returned 0 or false'\n            : 'tracesSampleRate is set to 0'));\n        transaction.sampled = false;\n        return transaction;\n    }\n    // Now we roll the dice. Math.random is inclusive of 0, but not of 1, so strict < is safe here. In case sampleRate is\n    // a boolean, the < comparison will cause it to be automatically cast to 1 if it's true and 0 if it's false.\n    transaction.sampled = Math.random() < sampleRate;\n    // if we're not going to keep it, we're done\n    if (!transaction.sampled) {\n        utils_1.logger.log(\"[Tracing] Discarding transaction because it's not included in the random sample (sampling rate = \" + Number(sampleRate) + \")\");\n        return transaction;\n    }\n    // at this point we know we're keeping the transaction, whether because of an inherited decision or because it got\n    // lucky with the dice roll\n    transaction.initSpanRecorder((_a = options._experiments) === null || _a === void 0 ? void 0 : _a.maxSpans);\n    utils_1.logger.log(\"[Tracing] starting \" + transaction.op + \" transaction - \" + transaction.name);\n    return transaction;\n}\n/**\n * Gets the correct context to pass to the tracesSampler, based on the environment (i.e., which SDK is being used)\n *\n * @returns The default sample context\n */\nfunction getDefaultSamplingContext(transactionContext) {\n    // promote parent sampling decision (if any) for easy access\n    var parentSampled = transactionContext.parentSampled;\n    var defaultSamplingContext = { transactionContext: transactionContext, parentSampled: parentSampled };\n    if (utils_1.isNodeEnv()) {\n        var domain = hub_1.getActiveDomain();\n        if (domain) {\n            // for all node servers that we currently support, we store the incoming request object (which is an instance of\n            // http.IncomingMessage) on the domain\n            // the domain members are stored as an array, so our only way to find the request is to iterate through the array\n            // and compare types\n            var nodeHttpModule = utils_1.dynamicRequire(module, 'http');\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n            var requestType_1 = nodeHttpModule.IncomingMessage;\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            var request = domain.members.find(function (member) { return utils_1.isInstanceOf(member, requestType_1); });\n            if (request) {\n                defaultSamplingContext.request = utils_1.extractNodeRequestData(request);\n            }\n        }\n    }\n    // we must be in browser-js (or some derivative thereof)\n    else {\n        // we use `getGlobalObject()` rather than `window` since service workers also have a `location` property on `self`\n        var globalObject = utils_1.getGlobalObject();\n        if ('location' in globalObject) {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any\n            defaultSamplingContext.location = tslib_1.__assign({}, globalObject.location);\n        }\n    }\n    return defaultSamplingContext;\n}\n/**\n * Checks the given sample rate to make sure it is valid type and value (a boolean, or a number between 0 and 1).\n */\nfunction isValidSampleRate(rate) {\n    // we need to check NaN explicitly because it's of type 'number' and therefore wouldn't get caught by this typecheck\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    if (isNaN(rate) || !(typeof rate === 'number' || typeof rate === 'boolean')) {\n        utils_1.logger.warn(\"[Tracing] Given sample rate is invalid. Sample rate must be a boolean or a number between 0 and 1. Got \" + JSON.stringify(rate) + \" of type \" + JSON.stringify(typeof rate) + \".\");\n        return false;\n    }\n    // in case sampleRate is a boolean, it will get automatically cast to 1 if it's true and 0 if it's false\n    if (rate < 0 || rate > 1) {\n        utils_1.logger.warn(\"[Tracing] Given sample rate is invalid. Sample rate must be between 0 and 1. Got \" + rate + \".\");\n        return false;\n    }\n    return true;\n}\n/**\n * Creates a new transaction and adds a sampling decision if it doesn't yet have one.\n *\n * The Hub.startTransaction method delegates to this method to do its work, passing the Hub instance in as `this`, as if\n * it had been called on the hub directly. Exists as a separate function so that it can be injected into the class as an\n * \"extension method.\"\n *\n * @param this: The Hub starting the transaction\n * @param transactionContext: Data used to configure the transaction\n * @param CustomSamplingContext: Optional data to be provided to the `tracesSampler` function (if any)\n *\n * @returns The new transaction\n *\n * @see {@link Hub.startTransaction}\n */\nfunction _startTransaction(transactionContext, customSamplingContext) {\n    var transaction = new transaction_1.Transaction(transactionContext, this);\n    return sample(this, transaction, tslib_1.__assign(tslib_1.__assign({}, getDefaultSamplingContext(transactionContext)), customSamplingContext));\n}\n/**\n * Create new idle transaction.\n */\nfunction startIdleTransaction(hub, transactionContext, idleTimeout, onScope) {\n    var transaction = new idletransaction_1.IdleTransaction(transactionContext, hub, idleTimeout, onScope);\n    return sample(hub, transaction, getDefaultSamplingContext(transactionContext));\n}\nexports.startIdleTransaction = startIdleTransaction;\n/**\n * @private\n */\nfunction _addTracingExtensions() {\n    var carrier = hub_1.getMainCarrier();\n    if (carrier.__SENTRY__) {\n        carrier.__SENTRY__.extensions = carrier.__SENTRY__.extensions || {};\n        if (!carrier.__SENTRY__.extensions.startTransaction) {\n            carrier.__SENTRY__.extensions.startTransaction = _startTransaction;\n        }\n        if (!carrier.__SENTRY__.extensions.traceHeaders) {\n            carrier.__SENTRY__.extensions.traceHeaders = traceHeaders;\n        }\n    }\n}\nexports._addTracingExtensions = _addTracingExtensions;\n/**\n * This patches the global object and injects the Tracing extensions methods\n */\nfunction addExtensionMethods() {\n    _addTracingExtensions();\n    // If an error happens globally, we should make sure transaction status is set to error.\n    errors_1.registerErrorInstrumentation();\n}\nexports.addExtensionMethods = addExtensionMethods;\n//# sourceMappingURL=hubextensions.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","traceHeaders","scope","getScope","span","getSpan","toTraceparent","sample","hub","transaction","samplingContext","_a","client","getClient","options","getOptions","utils_2","hasTracingEnabled","sampled","undefined","tracesSampler","parentSampled","givenRate","isNaN","sampleRate","utils_1","logger","warn","JSON","stringify","log","Math","random","Number","initSpanRecorder","_experiments","maxSpans","op","name","getDefaultSamplingContext","transactionContext","defaultSamplingContext","isNodeEnv","domain","hub_1","getActiveDomain","requestType_1","nodeHttpModule","dynamicRequire","IncomingMessage","request","members","find","member","isInstanceOf","extractNodeRequestData","globalObject","getGlobalObject","location","tslib_1","__assign","_startTransaction","customSamplingContext","transaction_1","Transaction","_addTracingExtensions","carrier","getMainCarrier","__SENTRY__","extensions","startTransaction","Object","defineProperty","value","errors_1","idletransaction_1","startIdleTransaction","idleTimeout","onScope","IdleTransaction","addExtensionMethods","registerErrorInstrumentation"]
}
