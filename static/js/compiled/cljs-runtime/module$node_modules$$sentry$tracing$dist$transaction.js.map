{
"version":3,
"file":"module$node_modules$$sentry$tracing$dist$transaction.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/@sentry/tracing/dist/transaction.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$sentry$tracing$dist$transaction\"] = function(global,require,module,exports) {\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar hub_1 = require(\"@sentry/hub\");\nvar utils_1 = require(\"@sentry/utils\");\nvar span_1 = require(\"./span\");\n/** JSDoc */\nvar Transaction = /** @class */ (function (_super) {\n    tslib_1.__extends(Transaction, _super);\n    /**\n     * This constructor should never be called manually. Those instrumenting tracing should use\n     * `Sentry.startTransaction()`, and internal methods should use `hub.startTransaction()`.\n     * @internal\n     * @hideconstructor\n     * @hidden\n     */\n    function Transaction(transactionContext, hub) {\n        var _this = _super.call(this, transactionContext) || this;\n        _this._measurements = {};\n        /**\n         * The reference to the current hub.\n         */\n        _this._hub = hub_1.getCurrentHub();\n        if (utils_1.isInstanceOf(hub, hub_1.Hub)) {\n            _this._hub = hub;\n        }\n        _this.name = transactionContext.name ? transactionContext.name : '';\n        _this._trimEnd = transactionContext.trimEnd;\n        // this is because transactions are also spans, and spans have a transaction pointer\n        _this.transaction = _this;\n        return _this;\n    }\n    /**\n     * JSDoc\n     */\n    Transaction.prototype.setName = function (name) {\n        this.name = name;\n    };\n    /**\n     * Attaches SpanRecorder to the span itself\n     * @param maxlen maximum number of spans that can be recorded\n     */\n    Transaction.prototype.initSpanRecorder = function (maxlen) {\n        if (maxlen === void 0) { maxlen = 1000; }\n        if (!this.spanRecorder) {\n            this.spanRecorder = new span_1.SpanRecorder(maxlen);\n        }\n        this.spanRecorder.add(this);\n    };\n    /**\n     * Set observed measurements for this transaction.\n     * @hidden\n     */\n    Transaction.prototype.setMeasurements = function (measurements) {\n        this._measurements = tslib_1.__assign({}, measurements);\n    };\n    /**\n     * @inheritDoc\n     */\n    Transaction.prototype.finish = function (endTimestamp) {\n        var _this = this;\n        // This transaction is already finished, so we should not flush it again.\n        if (this.endTimestamp !== undefined) {\n            return undefined;\n        }\n        if (!this.name) {\n            utils_1.logger.warn('Transaction has no name, falling back to `<unlabeled transaction>`.');\n            this.name = '<unlabeled transaction>';\n        }\n        // just sets the end timestamp\n        _super.prototype.finish.call(this, endTimestamp);\n        if (this.sampled !== true) {\n            // At this point if `sampled !== true` we want to discard the transaction.\n            utils_1.logger.log('[Tracing] Discarding transaction because its trace was not chosen to be sampled.');\n            return undefined;\n        }\n        var finishedSpans = this.spanRecorder ? this.spanRecorder.spans.filter(function (s) { return s !== _this && s.endTimestamp; }) : [];\n        if (this._trimEnd && finishedSpans.length > 0) {\n            this.endTimestamp = finishedSpans.reduce(function (prev, current) {\n                if (prev.endTimestamp && current.endTimestamp) {\n                    return prev.endTimestamp > current.endTimestamp ? prev : current;\n                }\n                return prev;\n            }).endTimestamp;\n        }\n        var transaction = {\n            contexts: {\n                trace: this.getTraceContext(),\n            },\n            spans: finishedSpans,\n            start_timestamp: this.startTimestamp,\n            tags: this.tags,\n            timestamp: this.endTimestamp,\n            transaction: this.name,\n            type: 'transaction',\n        };\n        var hasMeasurements = Object.keys(this._measurements).length > 0;\n        if (hasMeasurements) {\n            utils_1.logger.log('[Measurements] Adding measurements to transaction', JSON.stringify(this._measurements, undefined, 2));\n            transaction.measurements = this._measurements;\n        }\n        return this._hub.captureEvent(transaction);\n    };\n    return Transaction;\n}(span_1.Span));\nexports.Transaction = Transaction;\n//# sourceMappingURL=transaction.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","tslib_1","hub_1","utils_1","span_1","Transaction","_super","transactionContext","hub","_this","call","_measurements","_hub","getCurrentHub","isInstanceOf","Hub","name","_trimEnd","trimEnd","transaction","__extends","prototype","setName","Transaction.prototype.setName","initSpanRecorder","Transaction.prototype.initSpanRecorder","maxlen","spanRecorder","SpanRecorder","add","setMeasurements","Transaction.prototype.setMeasurements","measurements","__assign","finish","Transaction.prototype.finish","endTimestamp","undefined","logger","warn","sampled","log","finishedSpans","spans","filter","s","length","reduce","prev","current","contexts","trace","getTraceContext","start_timestamp","startTimestamp","tags","timestamp","type","keys","JSON","stringify","captureEvent","Span"]
}
