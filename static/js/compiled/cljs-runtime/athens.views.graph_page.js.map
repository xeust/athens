{"version":3,"sources":["athens/views/graph_page.cljs"],"mappings":"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","names":["athens.views.graph-page/graph-ref-map","reagent.core.atom","athens.views.graph-page/m-slider","reagent.core/adapt-react-class","js/module$node_modules$$material_ui$core$Slider$index","athens.views.graph-page/m-expansion-panel","js/module$node_modules$$material_ui$core$ExpansionPanel$index","athens.views.graph-page/m-expansion-panel-details","js/module$node_modules$$material_ui$core$ExpansionPanelDetails$index","athens.views.graph-page/m-expansion-panel-summary","js/module$node_modules$$material_ui$core$ExpansionPanelSummary$index","athens.views.graph-page/m-switch","js/module$node_modules$$material_ui$core$Switch$index","re_frame.core.reg_sub","db","_","re_frame.core.reg_event_db","p__97894","vec__97895","cljs.core.nth","key","val","cljs.core/assoc-in","p__97899","vec__97900","cljs.core.get_in","p__97903","vec__97904","n-gc","cljs.core.assoc","js/localStorage.setItem","conf","or__4126__auto__","G__97908","js/localStorage.getItem","cljs.reader.read_string","athens.db/default-graph-conf","re-frame.core/dispatch","athens.views.graph-page/build-nodes","all-nodes","G__97917","G__97918","cljs.core/deref","datascript.core/q","athens.db/dsdb","nodes-with-refs","G__97919","G__97920","nodes-without-refs","clojure.set.difference","cljs.core/set","G__97921","G__97922","G__97923","G__97924","G__97925","G__97926","cljs.core.map","p__97927","vec__97928","e","u","t","cljs.core.concat","athens.views.graph-page/build-links","G__97935","G__97936","p__97931","vec__97932","node-eid","node-uid","ref","first-parent","athens.db/get-parents-recursively","cljs.core/first","cljs.core.remove","x","cljs.core._EQ_","cljs.core.get","athens.views.graph-page/linked-nodes","all-links","node-id","link","cljs.core/nil?","athens.views.graph-page/n-level-linked","levels","cur-nodes","cljs.core.apply","clojure.set/union","p1__97937#","cljs.core.mapv","athens.views.graph-page/graph-control-style","theme","p__97942","map__97947","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","athens.views.graph-page/expansion-panel","heading","controls","local-node-eid","with-let97949","reagent.ratom/with-let-values","temp__5739__auto__","reagent.ratom/*ratom-context*","c__54632__auto__","reagent.debug/has-console","reagent.debug/tracking","reagent.debug/track-console","js/console","init97950","res__54633__auto__","is-open?","graph-conf","re_frame.core.subscribe","graph-ref","cljs.core.swap_BANG_","cljs.core/not","js/module$node_modules$$material_ui$icons$KeyboardArrowUp.default","js/module$node_modules$$material_ui$icons$KeyboardArrowRight.default","cljs.core.doall","iter__4529__auto__","s__97956","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__97958","cljs.core/chunk-buffer","i__97957","map__97959","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__97955","cljs.core/chunk-rest","map__97965","cljs.core/cons","cljs.core/rest","comp","label","onChange","no-simulation-reheat?","props","class","cljs.core.merge","n-val","and__4115__auto__","var_args","G__97971","athens.views.graph-page/graph-controls","js/Error","athens.style/THEME-DARK","athens.style/THEME-LIGHT","node-controls","node-section","force-controls","force-section","local-controls","local-section","stylefy.core.use_style","s__97981","b__97983","i__97982","map__97984","iter__97980","map__97986","section","G__98001","athens.views.graph-page/graph-root","highlight-nodes","highlight-links","dimensions","reagent.core/create-class","this","dom-node","reagent.dom/dom-node","cljs.core/assoc","x__4217__auto__","y__4218__auto__","c-force","G__98004","G__98005","_this","p1__97995#","dark?","all-nodes-with-links","p1__97992#","cljs.core.mapcat","cljs.core/vals","linked-nodes-without-daily-notes","athens.util/is-daily-note","p1__97993#","nodes","G__98022","G__98027","G__98028","G__98029","p__98023","vec__98024","_val","node-obj","node","cljs.core.filter","cljs.core/contains?","filtered-nodes-set","p1__97994#","links","G__98031","link-obj","js/module$node_modules$react_force_graph_2d$dist$react_force_graph_2d_common","ctx","global-scale","y","scale-factor","font-size","text-width","radius","x__4214__auto__","y__4215__auto__","js/Math.sqrt","highlighted?","local-root-node?","js/Math.PI","event","athens.router.navigate_uid","cljs.core/reset!","G__98054","G__98056","athens.views.graph-page/graph-page","block-uid","G__98060","G__98061","G__98062","datascript.core/pull","cljs.core/chunk-first"],"sourcesContent":["^:cljstyle/ignore\n(ns ^{:doc\n      \"\n      Graph and controls are designed to work with local and global graph\n      global graphs vs local graphs -- local graphs have an explicit root node\n      and customizations are based on that where as global doesn't have an explicit root\n\n      Relies on material ui comps for user inputs.\n\n      Conf strategy:\n      A default is set when ns is evaled in user's runtime which saves it\n      to localStorage. During init load this default or local storage conf\n      is loaded into re-frame db(reactive purposes)\n      Every edit saves this new conf to db as well as localStorage and all\n      future graphs that are opened will be based on that.\n      \"}\n  athens.views.graph-page\n  (:require\n    [\"@material-ui/core/ExpansionPanel\" :as ExpansionPanel]\n    [\"@material-ui/core/ExpansionPanelDetails\" :as ExpansionPanelDetails]\n    [\"@material-ui/core/ExpansionPanelSummary\" :as ExpansionPanelSummary]\n    [\"@material-ui/core/Slider\" :as Slider]\n    [\"@material-ui/core/Switch\" :as Switch]\n    [\"@material-ui/icons/KeyboardArrowRight\" :default KeyboardArrowRight]\n    [\"@material-ui/icons/KeyboardArrowUp\" :default KeyboardArrowUp]\n    [\"react-force-graph-2d\" :as ForceGraph2D]\n    [athens.db :as db]\n    [athens.router :as router]\n    [athens.style :as styles]\n    [athens.util :as util]\n    [cljs.reader :refer [read-string]]\n    [clojure.set :as set]\n    [datascript.core :as d]\n    [re-frame.core :as rf :refer [dispatch subscribe]]\n    [reagent.core :as r]\n    [reagent.dom :as dom]\n    [stylefy.core :as stylefy :refer [use-style]]))\n\n\n;; all graph refs(react refs) reside in this atom\n  ;; saving this to re-frame db is not ideal because of serialization\n  ;; and objects losing their refs\n(def graph-ref-map (r/atom {}))\n\n\n;;-------------------------------------------------------------------\n;;--- material ui ---\n\n\n(def m-slider (r/adapt-react-class (.-default Slider)))\n\n\n(def m-expansion-panel (r/adapt-react-class (.-default ExpansionPanel)))\n\n\n(def m-expansion-panel-details (r/adapt-react-class (.-default ExpansionPanelDetails)))\n\n\n(def m-expansion-panel-summary (r/adapt-react-class (.-default ExpansionPanelSummary)))\n\n\n(def m-switch (r/adapt-react-class (.-default Switch)))\n\n\n;;-------------------------------------------------------------------\n;;--- re-frame stuff ---\n;;--- read comments at top of file for more ---\n\n\n(rf/reg-sub\n  :graph/conf\n  (fn [db _]\n    (:graph-conf db)))\n\n\n(rf/reg-event-db\n  :graph/set-graph-ref\n  (fn [db [_ key val]]\n    (assoc-in db [:graph-ref key] val)))\n\n\n(rf/reg-sub\n  :graph/ref\n  (fn [db [_ key]]\n    (get-in db [:graph-ref key])))\n\n\n(rf/reg-event-db\n  :graph/set-conf\n  (fn [db [_ key val]]\n    (let [n-gc (-> db :graph-conf (assoc key val))]\n      (js/localStorage.setItem \"graph-conf\" n-gc)\n      (assoc db :graph-conf n-gc))))\n\n\n(rf/reg-event-db\n  :graph/load-graph-conf\n  (fn [db _]\n    (let [conf (or (some->> \"graph-conf\" js/localStorage.getItem read-string)\n                   db/default-graph-conf)]\n      (js/localStorage.setItem \"graph-conf\" conf)\n      (assoc db :graph-conf conf))))\n\n\n(dispatch [:graph/load-graph-conf])\n\n\n;;-------------------------------------------------------------------\n;;--- graph data ---\n\n\n(defn build-nodes\n  []\n  (let [all-nodes          (d/q '[:find [?e ...]\n                                  :where\n                                  [?e :node/title _]]\n                                @db/dsdb)\n        nodes-with-refs    (d/q '[:find [?e ...]\n                                  :where\n                                  [?e :node/title _]\n                                  [_ :block/refs ?e]]\n                                @db/dsdb)\n        nodes-without-refs (set/difference (set all-nodes) (set nodes-with-refs))\n        nodes-with-refs    (d/q '[:find ?e ?u ?t (count ?r)\n                                  :in $ [?e ...]\n                                  :where\n                                  [?e :node/title ?t]\n                                  [?e :block/uid ?u]\n                                  [?r :block/refs ?e]]\n                                @db/dsdb nodes-with-refs)\n        nodes-without-refs (d/q '[:find ?e ?u ?t ?c\n                                  :in $ [?e ...]\n                                  :where\n                                  [?e :node/title ?t]\n                                  [?e :block/uid ?u]\n                                  [(get-else $ ?e :always-nil-value 1) ?c]]\n                                @db/dsdb nodes-without-refs)\n        all-nodes          (map (fn [[e u t val]]\n                                  {\"id\"    e\n                                   \"uid\"   u\n                                   \"label\" t\n                                   \"val\"   val})\n                                (concat nodes-with-refs nodes-without-refs))]\n    all-nodes))\n\n\n(defn build-links\n  []\n  (->> (d/q '[:find ?e ?u ?r\n              :where\n              [?e :node/title ?t]\n              [?e :block/uid ?u]\n              [?r :block/refs ?e]]\n            @db/dsdb)\n       (map (fn [[node-eid node-uid ref]]\n              (let [first-parent (-> ref\n                                     db/get-parents-recursively\n                                     first)]\n                {\"source\"     (:db/id first-parent)\n                 \"source-uid\" node-uid\n                 \"target\"     node-eid\n                 \"target-uid\" (:block/uid first-parent)})))\n       (remove (fn [x]\n                 (or (= (get x \"source\") nil)\n                     (= (get x \"target\") nil))))))\n\n\n(defn linked-nodes\n  [all-links node-id]\n  (->> all-links\n       (map (fn [link]\n              (cond\n                (= (get link \"source\") node-id)\n                (get link \"target\")\n\n                (= (get link \"target\") node-id)\n                (get link \"source\")\n\n                :else nil)))\n       (remove nil?)\n       set))\n\n\n(defn n-level-linked\n  \"Nodes that are n levels away from current node\"\n  [all-links node-id levels]\n  (loop [cur-nodes #{node-id}\n         levels    levels]\n    (if (= levels 0)\n      cur-nodes\n      (recur (apply set/union cur-nodes (mapv #(linked-nodes all-links %) cur-nodes))\n             (- levels 1)))))\n\n\n;;-------------------------------------------------------------------\n;;--- comps ---\n\n\n(defn graph-control-style\n  [theme]\n  {:position        \"absolute\"\n   :right           \"10px\"\n   :font-size       \"14px\"\n   :z-index         2\n   ::stylefy/manual [[:.MuiExpansionPanelDetails-root {:flex-flow \"column\"\n                                                       :color     \"grey\"}\n                      [:.switch {:display         \"flex\"\n                                 :justify-content \"space-between\"\n                                 :align-items     \"center\"}]]\n                     [:.MuiSvgIcon-root {:font-size \"1.2rem\"}]\n                     [:.MuiExpansionPanelSummary-content {:justify-content \"space-between\"}\n                      [:&.Mui-expanded {:margin     \"5px 0\"\n                                        :min-height \"unset\"}]]\n                     [:.MuiExpansionPanelSummary-root\n                      [:&.Mui-expanded {:min-height \"unset\"}]]\n                     [:.MuiPaper-root {:background (:graph-control-bg theme)\n                                       :color      (:graph-control-color theme)\n                                       :margin     \"0 0 2px 0\"}\n                      [:&.Mui-expanded {:margin \"0 0 5px 0\"}]]]})\n\n\n(defn expansion-panel\n  [{:keys [heading controls]} local-node-eid]\n  (r/with-let [is-open? (r/atom false)]\n              (let [graph-conf @(subscribe [:graph/conf])\n                    graph-ref  (get @graph-ref-map (or local-node-eid :global))]\n                [m-expansion-panel\n                 [m-expansion-panel-summary\n                  {:onClick #(swap! is-open? not)}\n                  [:<> [:span heading] (if @is-open? [:> KeyboardArrowUp] [:> KeyboardArrowRight])]]\n                 [m-expansion-panel-details\n                  (doall\n                    (for [{:keys [key comp label onChange no-simulation-reheat? props class]} controls]\n                      ^{:key key}\n                      [:div {:class class} label\n                       [comp\n                        (merge\n                          props\n                          {:value    (or (key graph-conf) (key db/default-graph-conf))\n                           :color    \"primary\"\n                           :onChange (fn [_ n-val]\n                                       (and onChange (onChange n-val))\n                                       (rf/dispatch [:graph/set-conf key n-val])\n                                       (when-not no-simulation-reheat?\n                                         (.d3ReheatSimulation graph-ref)))})]]))]])))\n\n\n(defn graph-controls\n  \"Uses a generic expansion panel(not super generic)\n   while this comp dictates all the controls and manipulations that can be made to the graph\n   Look at comment below for code theme - to get a sense of the structure\"\n  ([] [graph-controls nil])\n  ([local-node-eid]\n   (fn []\n     (let [graph-conf     @(subscribe [:graph/conf])\n           graph-ref      (get @graph-ref-map (or local-node-eid :global))\n           theme          (if @(rf/subscribe [:theme/dark]) styles/THEME-DARK styles/THEME-LIGHT)\n\n           ;; code theme\n           ;; category -- for eg node-section and section related data\n             ;; controls -- for eg node-controls and their props\n               ;; props -- for eg orphans? inside a control are props for the editing-comp(for slider or toggle)\n               ;; other-keys describe more about the comp\n           node-controls  [{:key                   :hlt-link-levels\n                            :label                 \"No. of link levels to highlight\"\n                            :props                 {:min   1\n                                                    :max   5\n                                                    :step  1\n                                                    :marks true}\n                            :comp                  m-slider\n                            :no-simulation-reheat? true}\n                           {:key                   :orphans?\n                            :label                 \"Orphan nodes\"\n                            :comp                  m-switch\n                            :props                 {:checked (:orphans? graph-conf)}\n                            :class                 \"switch\"\n                            :no-simulation-reheat? true}\n                           {:key                   :daily-notes?\n                            :label                 \"Daily notes\"\n                            :comp                  m-switch\n                            :props                 {:checked (:daily-notes? graph-conf)}\n                            :class                 \"switch\"\n                            :no-simulation-reheat? true}]\n           node-section   {:heading  \"Nodes\"\n                           :controls node-controls}\n\n\n           force-controls [{:key      :link-distance\n                            :label    \"Link Distance\"\n                            :props    {:min 5\n                                       :max 95}\n                            :comp     m-slider\n                            :class    \"slider\"\n                            :onChange (fn [val] (and graph-ref (.. graph-ref (d3Force \"link\") (distance val))))}\n                           {:key      :charge-strength\n                            :label    \"Attraction force\"\n                            :props    {:min -30\n                                       :max 0}\n                            :comp     m-slider\n                            :class    \"slider\"\n                            :onChange (fn [val] (and graph-ref (.. graph-ref (d3Force \"charge\") (strength val))))}]\n           force-section  {:heading  \"Forces\"\n                           :controls force-controls}\n\n           local-controls [{:key                   :local-depth\n                            :label                 \"Local Depth\"\n                            :props                 {:min   1\n                                                    :max   5\n                                                    :step  1\n                                                    :marks true}\n                            :class                 \"slider\"\n                            :comp                  m-slider\n                            :no-simulation-reheat? true}\n                           {:key                   :root-links-only?\n                            :label                 \"Only root links\"\n                            :comp                  m-switch\n                            :class                 \"switch\"\n                            :props                 {:checked (:root-links-only? graph-conf)}\n                            :no-simulation-reheat? true}]\n           local-section  {:heading  \"Local options\"\n                           :controls local-controls}]\n       [:div (use-style (graph-control-style theme))\n        (doall\n          (for [{:keys [heading] :as section} (remove nil? [(when-not local-node-eid\n                                                              node-section)\n                                                            force-section\n                                                            (when local-node-eid\n                                                              local-section)])]\n            ^{:key heading}\n            [expansion-panel section local-node-eid]))]))))\n\n\n(defn graph-root\n  \"Main graph-root where react-force-graph comp is rendered\n   Flow:\n    build-links -> find nodes based on conf or build all nodes(local, daily and orphan node filter)\n    further filter down links based on nodes(cleaning up)\"\n  ([] [graph-root nil])\n  ([local-node-eid]\n   (let [highlight-nodes (r/atom #{})\n         highlight-links (r/atom #{})\n         dimensions      (r/atom {})]\n     (r/create-class\n       {:component-did-mount\n        (fn [this]\n          (let [dom-node   (dom/dom-node this)\n                graph-conf @(subscribe [:graph/conf])\n                graph-ref  (get @graph-ref-map (or local-node-eid :global))]\n            ;; set canvas dimensions\n            (swap! dimensions assoc :width (-> dom-node (.. (closest \".graph-page\"))\n                                               .-parentNode .-clientWidth))\n            (swap! dimensions assoc :height (-> dom-node (.. (closest \".graph-page\"))\n                                                .-parentNode .-clientHeight))\n            ;; set init forces for graph\n            (when graph-ref\n              (.. (.. graph-ref (d3Force \"charge\"))\n                  (distanceMax (/ (min (:width @dimensions)\n                                       (:height @dimensions))\n                                  2)))\n              (let [c-force (.. graph-ref (d3Force \"center\"))]\n                (c-force (/ (:width @dimensions) 2) (/ (:height @dimensions) 2)))\n\n              (.. (.. graph-ref (d3Force \"charge\")) (strength (:charge-strength graph-conf)))\n              (.. (.. graph-ref (d3Force \"link\")) (distance (:link-distance graph-conf)))\n              (.d3ReheatSimulation graph-ref))))\n\n        :component-will-unmount\n        (fn [_this]\n          (swap! graph-ref-map assoc (or local-node-eid :global) nil))\n\n        :reagent-render\n        (fn [local-node-eid]\n          (let [dark?                            @(rf/subscribe [:theme/dark])\n                graph-conf                       @(subscribe [:graph/conf])\n                all-links                        (build-links)\n                all-nodes-with-links             (->> all-links (mapcat #(vals %)) set)\n                linked-nodes-without-daily-notes (->> all-links\n                                                      (remove (fn [link]\n                                                                (or (util/is-daily-note (get link \"source-uid\"))\n                                                                    (util/is-daily-note (get link \"target-uid\")))))\n                                                      (mapcat #(vals %))\n                                                      set)\n                nodes                            (cond->> (if local-node-eid\n                                                            (->> (n-level-linked all-links local-node-eid (:local-depth graph-conf))\n                                                                 (d/q '[:find ?e ?u ?t (count ?r)\n                                                                        :in $ [?e ...]\n                                                                        :where\n                                                                        [?e :node/title ?t]\n                                                                        [?e :block/uid ?u]\n                                                                        [?r :block/refs ?e]]\n                                                                      @db/dsdb)\n                                                                 (map (fn [[e u t _val]]\n                                                                        {\"id\"    e\n                                                                         \"uid\"   u\n                                                                         \"label\" t\n                                                                         \"val\"   (if (= e local-node-eid) 8 1)}))\n                                                                 (remove (fn [node-obj]\n                                                                           (nil? (get node-obj \"uid\"))))\n                                                                 doall)\n                                                            (build-nodes))\n\n                                                   (not (:daily-notes? graph-conf))\n                                                   (remove (fn [node]\n                                                             (util/is-daily-note (get node \"uid\"))))\n\n                                                   (not (:orphans? graph-conf))\n                                                   (filter (fn [node]\n                                                             (contains? all-nodes-with-links (get node \"id\"))))\n\n                                                   (and (not (:daily-notes? graph-conf))\n                                                        (not (:orphans? graph-conf)))\n                                                   (filter (fn [node]\n                                                             (contains? linked-nodes-without-daily-notes (get node \"id\")))))\n\n                filtered-nodes-set               (->> nodes (map #(get % \"id\")) set)\n\n                links                            (cond->> all-links\n\n                                                   (or local-node-eid\n                                                       (not (:daily-notes? graph-conf))\n                                                       (not (:orphans? graph-conf)))\n                                                   (filter (fn [link-obj]\n                                                             (and (contains? filtered-nodes-set (get link-obj \"source\"))\n                                                                  (contains? filtered-nodes-set (get link-obj \"target\")))))\n\n                                                   (and local-node-eid\n                                                        (:root-links-only? graph-conf)\n                                                        (= (:local-depth graph-conf) 1))\n                                                   (filter (fn [link-obj]\n                                                             (or (= (get link-obj \"source\") local-node-eid)\n                                                                 (= (get link-obj \"target\") local-node-eid))))\n\n                                                   true\n                                                   (filter (fn [link-obj]\n                                                             (or (contains? filtered-nodes-set (get link-obj \"source\"))\n                                                                 (contains? filtered-nodes-set (get link-obj \"target\"))))))\n\n                theme                            (if dark?\n                                                   styles/THEME-DARK\n                                                   styles/THEME-LIGHT)]\n            [:> ForceGraph2D\n             {:graphData        {:nodes nodes\n                                 :links links}\n              ;; example data\n              #_{:nodes [{\"id\" \"foo\", \"name\" \"name1\", \"val\" 1}\n                         {\"id\" \"bar\", \"name\" \"name2\", \"val\" 10}]\n                 :links [{\"source\" \"foo\", \"target\" \"bar\"}]}\n              :width            (:width  @dimensions)\n              :height           (:height @dimensions)\n              :ref              #(swap! graph-ref-map assoc (or local-node-eid :global) %)\n              ;; link\n              :linkColor        (fn [] (:graph-link-normal theme))\n              ;; node\n              :nodeCanvasObject (fn [^js node ^js ctx global-scale]\n                                  (let [label            (.. node -label)\n                                        val              (.. node -val)\n                                        node-id          (.. node -id)\n                                        x                (.. node -x)\n                                        y                (.. node -y)\n                                        scale-factor     3\n                                        font-size        (/ 10 global-scale)\n                                        text-width       (.. ctx (measureText label) -width)\n                                        radius           (max 1.3 (-> (js/Math.sqrt val)\n                                                                      (/ global-scale)\n                                                                      (* scale-factor)))\n                                        highlighted?     (contains? @highlight-nodes node-id)\n                                        local-root-node? (and local-node-eid node-id (= local-node-eid node-id))]\n\n                                    ;; node color\n                                    (set! (.-fillStyle ctx)\n                                          (cond\n                                            local-root-node? (:graph-node-hlt theme)\n                                            (and highlighted? (not local-node-eid)) (:graph-node-hlt theme)\n                                            :else (:graph-node-normal theme)))\n\n                                    ;; text\n                                    (when (> global-scale 1.75)\n                                      (set! (.-font ctx) (str (when (and highlighted? (not local-node-eid))\n                                                                \"bold \")\n                                                              font-size \"px IBM Plex Sans, Sans-Serif\"))\n                                      (.fillText ctx label\n                                                 (- x (/ text-width 2))\n                                                 (+ y radius font-size)))\n\n                                    (.beginPath ctx)\n                                    ;; https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/arc\n                                    (.arc ctx x y radius 0 (* js/Math.PI 2))\n                                    (.fill ctx)))\n              ;; node actions\n              :onNodeClick      (fn [^js node ^js event]\n                                  (router/navigate-uid (.. node -uid) event))\n              :onNodeHover      (fn [^js node]\n                                  (let [_          (reset! highlight-nodes #{})\n                                        _          (reset! highlight-links #{})\n                                        graph-conf @(rf/subscribe [:graph/conf])]\n                                    (when-let [node-id (some-> node (.. -id))]\n                                      (reset! highlight-nodes (n-level-linked all-links node-id (:hlt-link-levels graph-conf))))))}]))}))))\n\n\n(defn graph-page\n  \"Designed to work with local or global graphs\n   Keep in mind block-uid -> db/id (more convenient)\"\n  ([] [graph-page nil])\n  ([block-uid]\n   (let [local-node-eid (when block-uid\n                          (->> [:block/uid block-uid] (d/pull @db/dsdb '[:db/id])\n                               :db/id))]\n     [:div.graph-page\n      {:style (merge (when local-node-eid {:min-height \"500px\"})\n                     {:position \"relative\"})}\n      [graph-controls local-node-eid]\n      [graph-root local-node-eid]])))\n"]}