{
"version":3,
"file":"module$node_modules$d3_binarytree$dist$d3_binarytree.js",
"lineCount":11,
"mappings":"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",
"sources":["node_modules/d3-binarytree/dist/d3-binarytree.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$d3_binarytree$dist$d3_binarytree\"] = function(global,require,module,exports) {\n// https://github.com/vasturiano/d3-binarytree v0.1.8 Copyright 2020 Vasco Asturiano\n(function (global, factory) {\ntypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\ntypeof define === 'function' && define.amd ? define(['exports'], factory) :\n(global = global || self, factory(global.d3 = global.d3 || {}));\n}(this, (function (exports) { 'use strict';\n\nfunction tree_add(d) {\n  var x = +this._x.call(null, d);\n  return add(this.cover(x), x, d);\n}\n\nfunction add(tree, x, d) {\n  if (isNaN(x)) return tree; // ignore invalid points\n\n  var parent,\n      node = tree._root,\n      leaf = {data: d},\n      x0 = tree._x0,\n      x1 = tree._x1,\n      xm,\n      xp,\n      right,\n      i,\n      j;\n\n  // If the tree is empty, initialize the root as a leaf.\n  if (!node) return tree._root = leaf, tree;\n\n  // Find the existing leaf for the new point, or add it.\n  while (node.length) {\n    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;\n    if (parent = node, !(node = node[i = +right])) return parent[i] = leaf, tree;\n  }\n\n  // Is the new point is exactly coincident with the existing point?\n  xp = +tree._x.call(null, node.data);\n  if (x === xp) return leaf.next = node, parent ? parent[i] = leaf : tree._root = leaf, tree;\n\n  // Otherwise, split the leaf node until the old and new point are separated.\n  do {\n    parent = parent ? parent[i] = new Array(2) : tree._root = new Array(2);\n    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;\n  } while ((i = +right) === (j = +(xp >= xm)));\n  return parent[j] = node, parent[i] = leaf, tree;\n}\n\nfunction addAll(data) {\n  var i, n = data.length,\n      x,\n      xz = new Array(n),\n      x0 = Infinity,\n      x1 = -Infinity;\n\n  // Compute the points and their extent.\n  for (i = 0; i < n; ++i) {\n    if (isNaN(x = +this._x.call(null, data[i]))) continue;\n    xz[i] = x;\n    if (x < x0) x0 = x;\n    if (x > x1) x1 = x;\n  }\n\n  // If there were no (valid) points, inherit the existing extent.\n  if (x1 < x0) x0 = this._x0, x1 = this._x1;\n\n  // Expand the tree to cover the new points.\n  this.cover(x0).cover(x1);\n\n  // Add the new points.\n  for (i = 0; i < n; ++i) {\n    add(this, xz[i], data[i]);\n  }\n\n  return this;\n}\n\nfunction tree_cover(x) {\n  if (isNaN(x = +x)) return this; // ignore invalid points\n\n  var x0 = this._x0,\n      x1 = this._x1;\n\n  // If the binarytree has no extent, initialize them.\n  // Integer extent are necessary so that if we later double the extent,\n  // the existing half boundaries don\u2019t change due to floating point error!\n  if (isNaN(x0)) {\n    x1 = (x0 = Math.floor(x)) + 1;\n  }\n\n  // Otherwise, double repeatedly to cover.\n  else if (x0 > x || x > x1) {\n    var z = x1 - x0,\n        node = this._root,\n        parent,\n        i;\n\n    switch (i = +(x < (x0 + x1) / 2)) {\n      case 0: {\n        do parent = new Array(2), parent[i] = node, node = parent;\n        while (z *= 2, x1 = x0 + z, x > x1);\n        break;\n      }\n      case 1: {\n        do parent = new Array(2), parent[i] = node, node = parent;\n        while (z *= 2, x0 = x1 - z, x0 > x);\n        break;\n      }\n    }\n\n    if (this._root && this._root.length) this._root = node;\n  }\n\n  // If the binarytree covers the point already, just return.\n  else return this;\n\n  this._x0 = x0;\n  this._x1 = x1;\n  return this;\n}\n\nfunction tree_data() {\n  var data = [];\n  this.visit(function(node) {\n    if (!node.length) do data.push(node.data); while (node = node.next)\n  });\n  return data;\n}\n\nfunction tree_extent(_) {\n  return arguments.length\n      ? this.cover(+_[0][0]).cover(+_[1][0])\n      : isNaN(this._x0) ? undefined : [[this._x0], [this._x1]];\n}\n\nfunction Half(node, x0, x1) {\n  this.node = node;\n  this.x0 = x0;\n  this.x1 = x1;\n}\n\nfunction tree_find(x, radius) {\n  var data,\n      x0 = this._x0,\n      x1,\n      x2,\n      x3 = this._x1,\n      halves = [],\n      node = this._root,\n      q,\n      i;\n\n  if (node) halves.push(new Half(node, x0, x3));\n  if (radius == null) radius = Infinity;\n  else {\n    x0 = x - radius;\n    x3 = x + radius;\n  }\n\n  while (q = halves.pop()) {\n\n    // Stop searching if this half can\u2019t contain a closer node.\n    if (!(node = q.node)\n        || (x1 = q.x0) > x3\n        || (x2 = q.x1) < x0) continue;\n\n    // Bisect the current half.\n    if (node.length) {\n      var xm = (x1 + x2) / 2;\n\n      halves.push(\n        new Half(node[1], xm, x2),\n        new Half(node[0], x1, xm)\n      );\n\n      // Visit the closest half first.\n      if (i = +(x >= xm)) {\n        q = halves[halves.length - 1];\n        halves[halves.length - 1] = halves[halves.length - 1 - i];\n        halves[halves.length - 1 - i] = q;\n      }\n    }\n\n    // Visit this point. (Visiting coincident points isn\u2019t necessary!)\n    else {\n      var d = Math.abs(x - +this._x.call(null, node.data));\n      if (d < radius) {\n        radius = d;\n        x0 = x - d;\n        x3 = x + d;\n        data = node.data;\n      }\n    }\n  }\n\n  return data;\n}\n\nfunction tree_remove(d) {\n  if (isNaN(x = +this._x.call(null, d))) return this; // ignore invalid points\n\n  var parent,\n      node = this._root,\n      retainer,\n      previous,\n      next,\n      x0 = this._x0,\n      x1 = this._x1,\n      x,\n      xm,\n      right,\n      i,\n      j;\n\n  // If the tree is empty, initialize the root as a leaf.\n  if (!node) return this;\n\n  // Find the leaf node for the point.\n  // While descending, also retain the deepest parent with a non-removed sibling.\n  if (node.length) while (true) {\n    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;\n    if (!(parent = node, node = node[i = +right])) return this;\n    if (!node.length) break;\n    if (parent[(i + 1) & 1]) retainer = parent, j = i;\n  }\n\n  // Find the point to remove.\n  while (node.data !== d) if (!(previous = node, node = node.next)) return this;\n  if (next = node.next) delete node.next;\n\n  // If there are multiple coincident points, remove just the point.\n  if (previous) return (next ? previous.next = next : delete previous.next), this;\n\n  // If this is the root point, remove it.\n  if (!parent) return this._root = next, this;\n\n  // Remove this leaf.\n  next ? parent[i] = next : delete parent[i];\n\n  // If the parent now contains exactly one leaf, collapse superfluous parents.\n  if ((node = parent[0] || parent[1])\n      && node === (parent[1] || parent[0])\n      && !node.length) {\n    if (retainer) retainer[j] = node;\n    else this._root = node;\n  }\n\n  return this;\n}\n\nfunction removeAll(data) {\n  for (var i = 0, n = data.length; i < n; ++i) this.remove(data[i]);\n  return this;\n}\n\nfunction tree_root() {\n  return this._root;\n}\n\nfunction tree_size() {\n  var size = 0;\n  this.visit(function(node) {\n    if (!node.length) do ++size; while (node = node.next)\n  });\n  return size;\n}\n\nfunction tree_visit(callback) {\n  var halves = [], q, node = this._root, child, x0, x1;\n  if (node) halves.push(new Half(node, this._x0, this._x1));\n  while (q = halves.pop()) {\n    if (!callback(node = q.node, x0 = q.x0, x1 = q.x1) && node.length) {\n      var xm = (x0 + x1) / 2;\n      if (child = node[1]) halves.push(new Half(child, xm, x1));\n      if (child = node[0]) halves.push(new Half(child, x0, xm));\n    }\n  }\n  return this;\n}\n\nfunction tree_visitAfter(callback) {\n  var halves = [], next = [], q;\n  if (this._root) halves.push(new Half(this._root, this._x0, this._x1));\n  while (q = halves.pop()) {\n    var node = q.node;\n    if (node.length) {\n      var child, x0 = q.x0, x1 = q.x1, xm = (x0 + x1) / 2;\n      if (child = node[0]) halves.push(new Half(child, x0, xm));\n      if (child = node[1]) halves.push(new Half(child, xm, x1));\n    }\n    next.push(q);\n  }\n  while (q = next.pop()) {\n    callback(q.node, q.x0, q.x1);\n  }\n  return this;\n}\n\nfunction defaultX(d) {\n  return d[0];\n}\n\nfunction tree_x(_) {\n  return arguments.length ? (this._x = _, this) : this._x;\n}\n\nfunction binarytree(nodes, x) {\n  var tree = new Binarytree(x == null ? defaultX : x, NaN, NaN);\n  return nodes == null ? tree : tree.addAll(nodes);\n}\n\nfunction Binarytree(x, x0, x1) {\n  this._x = x;\n  this._x0 = x0;\n  this._x1 = x1;\n  this._root = undefined;\n}\n\nfunction leaf_copy(leaf) {\n  var copy = {data: leaf.data}, next = copy;\n  while (leaf = leaf.next) next = next.next = {data: leaf.data};\n  return copy;\n}\n\nvar treeProto = binarytree.prototype = Binarytree.prototype;\n\ntreeProto.copy = function() {\n  var copy = new Binarytree(this._x, this._x0, this._x1),\n      node = this._root,\n      nodes,\n      child;\n\n  if (!node) return copy;\n\n  if (!node.length) return copy._root = leaf_copy(node), copy;\n\n  nodes = [{source: node, target: copy._root = new Array(2)}];\n  while (node = nodes.pop()) {\n    for (var i = 0; i < 2; ++i) {\n      if (child = node.source[i]) {\n        if (child.length) nodes.push({source: child, target: node.target[i] = new Array(2)});\n        else node.target[i] = leaf_copy(child);\n      }\n    }\n  }\n\n  return copy;\n};\n\ntreeProto.add = tree_add;\ntreeProto.addAll = addAll;\ntreeProto.cover = tree_cover;\ntreeProto.data = tree_data;\ntreeProto.extent = tree_extent;\ntreeProto.find = tree_find;\ntreeProto.remove = tree_remove;\ntreeProto.removeAll = removeAll;\ntreeProto.root = tree_root;\ntreeProto.size = tree_size;\ntreeProto.visit = tree_visit;\ntreeProto.visitAfter = tree_visitAfter;\ntreeProto.x = tree_x;\n\nexports.binarytree = binarytree;\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n\n};"],
"names":["shadow$provide","global","require","module","exports","factory","define","amd","self","d3","add","tree","x","d","isNaN","parent","node","_root","leaf","data","x0","_x0","x1","_x1","xm","right","j","length","i","xp","_x","call","next","Array","Half","defaultX","binarytree","nodes","Binarytree","NaN","addAll","undefined","leaf_copy","copy","treeProto","prototype","treeProto.copy","child","source","target","pop","push","tree_add","cover","n","xz","Infinity","tree_cover","Math","floor","z","tree_data","visit","extent","tree_extent","_","arguments","find","tree_find","radius","x2","x3","halves","q","abs","remove","tree_remove","previous","retainer","removeAll","root","tree_root","size","tree_size","tree_visit","callback","visitAfter","tree_visitAfter","tree_x","Object","defineProperty","value"]
}
