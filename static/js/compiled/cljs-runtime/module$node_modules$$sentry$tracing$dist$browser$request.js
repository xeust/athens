shadow$provide.module$node_modules$$sentry$tracing$dist$browser$request=function(global,require,module,exports){function fetchCallback(handlerData,shouldCreateSpan,spans){var _a,currentClientOptions=null===(_a=hub_1.getCurrentHub().getClient())||void 0===_a?void 0:_a.getOptions();if(currentClientOptions&&utils_2.hasTracingEnabled(currentClientOptions)&&handlerData.fetchData&&shouldCreateSpan(handlerData.fetchData.url))if(handlerData.endTimestamp&&handlerData.fetchData.__span){if(shouldCreateSpan=
spans[handlerData.fetchData.__span])(_a=handlerData.response)&&shouldCreateSpan.setHttpStatus(_a.status),shouldCreateSpan.finish(),delete spans[handlerData.fetchData.__span]}else if(shouldCreateSpan=utils_2.getActiveTransaction())shouldCreateSpan=shouldCreateSpan.startChild({data:tslib_1.__assign(tslib_1.__assign({},handlerData.fetchData),{type:"fetch"}),description:handlerData.fetchData.method+" "+handlerData.fetchData.url,op:"http"}),handlerData.fetchData.__span=shouldCreateSpan.spanId,spans[shouldCreateSpan.spanId]=
shouldCreateSpan,spans=handlerData.args[0]=handlerData.args[0],handlerData=handlerData.args[1]=handlerData.args[1]||{},_a=handlerData.headers,utils_1.isInstanceOf(spans,Request)&&(_a=spans.headers),_a?"function"===typeof _a.append?_a.append("sentry-trace",shouldCreateSpan.toTraceparent()):_a=Array.isArray(_a)?tslib_1.__spread(_a,[["sentry-trace",shouldCreateSpan.toTraceparent()]]):tslib_1.__assign(tslib_1.__assign({},_a),{"sentry-trace":shouldCreateSpan.toTraceparent()}):_a={"sentry-trace":shouldCreateSpan.toTraceparent()},
handlerData.headers=_a}function xhrCallback(handlerData,shouldCreateSpan,spans){var _a,currentClientOptions=null===(_a=hub_1.getCurrentHub().getClient())||void 0===_a?void 0:_a.getOptions();if(currentClientOptions&&utils_2.hasTracingEnabled(currentClientOptions)&&handlerData.xhr&&handlerData.xhr.__sentry_xhr__&&shouldCreateSpan(handlerData.xhr.__sentry_xhr__.url)&&!handlerData.xhr.__sentry_own_request__)if(shouldCreateSpan=handlerData.xhr.__sentry_xhr__,handlerData.endTimestamp&&handlerData.xhr.__sentry_xhr_span_id__){if(_a=
spans[handlerData.xhr.__sentry_xhr_span_id__])_a.setHttpStatus(shouldCreateSpan.status_code),_a.finish(),delete spans[handlerData.xhr.__sentry_xhr_span_id__]}else if(_a=utils_2.getActiveTransaction())if(_a=_a.startChild({data:tslib_1.__assign(tslib_1.__assign({},shouldCreateSpan.data),{type:"xhr",method:shouldCreateSpan.method,url:shouldCreateSpan.url}),description:shouldCreateSpan.method+" "+shouldCreateSpan.url,op:"http"}),handlerData.xhr.__sentry_xhr_span_id__=_a.spanId,spans[handlerData.xhr.__sentry_xhr_span_id__]=
_a,handlerData.xhr.setRequestHeader)try{handlerData.xhr.setRequestHeader("sentry-trace",_a.toTraceparent())}catch(_){}}Object.defineProperty(exports,"__esModule",{value:!0});var tslib_1=require("module$node_modules$tslib$tslib"),hub_1=require("module$node_modules$$sentry$hub$dist$index"),utils_1=require("module$node_modules$$sentry$utils$dist$index"),utils_2=require("module$node_modules$$sentry$tracing$dist$utils");exports.DEFAULT_TRACING_ORIGINS=["localhost",/^\//];exports.defaultRequestInstrumentionOptions=
{traceFetch:!0,traceXHR:!0,tracingOrigins:exports.DEFAULT_TRACING_ORIGINS};exports.registerRequestInstrumentation=function(_options){_options=tslib_1.__assign(tslib_1.__assign({},exports.defaultRequestInstrumentionOptions),_options);var traceFetch=_options.traceFetch,traceXHR=_options.traceXHR,tracingOrigins=_options.tracingOrigins,shouldCreateSpanForRequest=_options.shouldCreateSpanForRequest,urlMap={},defaultShouldCreateSpan=function(url){if(urlMap[url])return urlMap[url];urlMap[url]=tracingOrigins.some(function(origin){return utils_1.isMatchingPattern(url,
origin)})&&!utils_1.isMatchingPattern(url,"sentry_key");return urlMap[url]},shouldCreateSpan=defaultShouldCreateSpan;"function"===typeof shouldCreateSpanForRequest&&(shouldCreateSpan=function(url){return defaultShouldCreateSpan(url)&&shouldCreateSpanForRequest(url)});var spans={};traceFetch&&utils_1.addInstrumentationHandler({callback:function(handlerData){fetchCallback(handlerData,shouldCreateSpan,spans)},type:"fetch"});traceXHR&&utils_1.addInstrumentationHandler({callback:function(handlerData){xhrCallback(handlerData,
shouldCreateSpan,spans)},type:"xhr"})};exports.fetchCallback=fetchCallback;exports.xhrCallback=xhrCallback}
//# sourceMappingURL=module$node_modules$$sentry$tracing$dist$browser$request.js.map
