{
"version":3,
"file":"module$node_modules$$sentry$integrations$dist$captureconsole.js",
"lineCount":4,
"mappings":"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",
"sources":["node_modules/@sentry/integrations/dist/captureconsole.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$sentry$integrations$dist$captureconsole\"] = function(global,require,module,exports) {\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar types_1 = require(\"@sentry/types\");\nvar utils_1 = require(\"@sentry/utils\");\nvar global = utils_1.getGlobalObject();\n/** Send Console API calls as Sentry Events */\nvar CaptureConsole = /** @class */ (function () {\n    /**\n     * @inheritDoc\n     */\n    function CaptureConsole(options) {\n        if (options === void 0) { options = {}; }\n        /**\n         * @inheritDoc\n         */\n        this.name = CaptureConsole.id;\n        /**\n         * @inheritDoc\n         */\n        this._levels = ['log', 'info', 'warn', 'error', 'debug', 'assert'];\n        if (options.levels) {\n            this._levels = options.levels;\n        }\n    }\n    /**\n     * @inheritDoc\n     */\n    CaptureConsole.prototype.setupOnce = function (_, getCurrentHub) {\n        if (!('console' in global)) {\n            return;\n        }\n        this._levels.forEach(function (level) {\n            if (!(level in global.console)) {\n                return;\n            }\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            utils_1.fill(global.console, level, function (originalConsoleLevel) { return function () {\n                var args = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    args[_i] = arguments[_i];\n                }\n                var hub = getCurrentHub();\n                if (hub.getIntegration(CaptureConsole)) {\n                    hub.withScope(function (scope) {\n                        scope.setLevel(types_1.Severity.fromString(level));\n                        scope.setExtra('arguments', args);\n                        scope.addEventProcessor(function (event) {\n                            event.logger = 'console';\n                            return event;\n                        });\n                        var message = utils_1.safeJoin(args, ' ');\n                        if (level === 'assert') {\n                            if (args[0] === false) {\n                                message = \"Assertion failed: \" + (utils_1.safeJoin(args.slice(1), ' ') || 'console.assert');\n                                scope.setExtra('arguments', args.slice(1));\n                                hub.captureMessage(message);\n                            }\n                        }\n                        else {\n                            hub.captureMessage(message);\n                        }\n                    });\n                }\n                // this fails for some browsers. :(\n                if (originalConsoleLevel) {\n                    Function.prototype.apply.call(originalConsoleLevel, global.console, args);\n                }\n            }; });\n        });\n    };\n    /**\n     * @inheritDoc\n     */\n    CaptureConsole.id = 'CaptureConsole';\n    return CaptureConsole;\n}());\nexports.CaptureConsole = CaptureConsole;\n//# sourceMappingURL=captureconsole.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","types_1","utils_1","getGlobalObject","CaptureConsole","options","name","id","_levels","levels","prototype","setupOnce","CaptureConsole.prototype.setupOnce","_","getCurrentHub","forEach","level","console","fill","originalConsoleLevel","args","_i","arguments","length","hub","getIntegration","withScope","scope","setLevel","Severity","fromString","setExtra","addEventProcessor","event","logger","message","safeJoin","slice","captureMessage","Function","apply","call"]
}
