{"version":3,"sources":["datascript/transit.cljs"],"mappings":";AAQA,AAAA,AAAA,AAAA,AAAA,AAAKA,AACkBC,AAEAC,AACAC;AAGvB,AAAA,AAAKC,AACDC,AAAS,AAACC,AAAgB,AAAA,AAACC,AAChB,AAAKC;AAAL,AAAA,AAAA,AAAA,AACY,AAAA,AAASA,AACT,AAAA,AAAOA;AAC9BC,AAAS,AAACH,AAAgB,AAAA,AAACC,AAChB,AAAKG;AAAL,AACE,AAAI,AAACC,AAAeD;AAApB,AACG,AAAKA,AAAG,AAAKA,AAAG,AAAKA,AAAG,AAACE,AAAYF;;AADxC,AAAA,AAEG,AAAKA,AAAG,AAAKA,AAAG,AAAKA,AAAG,AAACE,AAAYF;;AACrDG,AAAU,AAAAC;AAGd,AAAA,AAAMC,AAAkBC;AAAxB,AACE,AAACC,AAAO,AAAA,AAAA,AAAA,AAACC,AAA2BlB,AAAiBgB;;AAGvD,AAAA,AAAMG,AAAmBC;AAAzB,AACE,AAACC,AAAQ,AAAA,AAAA,AAAA,AAACC,AAA2BlB,AAAkBgB","names":["datascript.transit/read-handlers","cljs.core/uuid","datascript.db/db-from-reader","datascript.db/datom-from-reader","datascript.transit/write-handlers","datascript.db/DB","cognitect.transit.write_handler","cljs.core/constantly","db","datascript.db/Datom","d","datascript.db/datom-added","datascript.db/datom-tx","me.tonsky.persistent-sorted-set/BTSet","cognitect.transit/ListHandler","datascript.transit/read-transit-str","s","cognitect.transit/read","cognitect.transit.reader","datascript.transit/write-transit-str","o","cognitect.transit/write","cognitect.transit.writer"],"sourcesContent":["(ns datascript.transit\n  (:require\n    [datascript.core :as d]\n    [datascript.db   :as db]\n    [me.tonsky.persistent-sorted-set :as pss]\n    [cognitect.transit :as t]))\n\n\n(def read-handlers\n  { \"u\"                uuid  ;; favor ClojureScript UUIDs instead of Transit UUIDs\n                             ;; https://github.com/cognitect/transit-cljs/pull/10\n    \"datascript/DB\"    db/db-from-reader\n    \"datascript/Datom\" db/datom-from-reader })\n\n\n(def write-handlers\n  { db/DB    (t/write-handler (constantly \"datascript/DB\")\n               (fn [db]\n                 { :schema (:schema db)\n                   :datoms (:eavt db) }))\n    db/Datom (t/write-handler (constantly \"datascript/Datom\")\n               (fn [d]\n                 (if (db/datom-added d)\n                   [(.-e d) (.-a d) (.-v d) (db/datom-tx d)]\n                   [(.-e d) (.-a d) (.-v d) (db/datom-tx d) false])))\n    pss/BTSet (t/ListHandler.) })\n\n\n(defn read-transit-str [s]\n  (t/read (t/reader :json { :handlers read-handlers }) s))\n\n\n(defn write-transit-str [o]\n  (t/write (t/writer :json { :handlers write-handlers }) o))\n"]}