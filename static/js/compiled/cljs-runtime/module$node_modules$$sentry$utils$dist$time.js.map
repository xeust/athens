{
"version":3,
"file":"module$node_modules$$sentry$utils$dist$time.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAe,2CAAf,CAAgE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAoBxGC,QAASA,sBAAqB,EAAG,CAC7B,IAAIC,YAAcC,MAAA,CAAOC,eAAP,EAAdF,CAAuCA,WAC3C,IAAKA,WAAL,EAAqBA,WAArB,CAAiCG,GAAjC,CAyBA,MAAO,CACHA,IAAKA,QAAS,EAAG,CAAE,MAAOH,YAAA,CAAYG,GAAZ,EAAT,CADd,CAEHC,WAHaC,IAAA,CAAKF,GAAL,EAGbC,CAH0BJ,WAAA,CAAYG,GAAZ,EACvB,CA3BsB,CAnBjCG,MAAA,CAAOC,cAAP,CAAsBT,OAAtB,CAA+B,YAA/B,CAA6C,CAAEU,MAAO,CAAA,CAAT,CAA7C,CACA,KAAIP,OAASL,OAAA,CAAQ,6CAAR,CACTa,QAAAA,CAASb,OAAA,CAAQ,6CAAR,CAQTc,OAAAA,CAAsB,CACtBC,WAAYA,QAAS,EAAG,CAAE,MAAON,KAAA,CAAKF,GAAL,EAAP;AAAoB,GAAtB,CADF,CAyDA,IAAAM,OAAA,CAAOG,SAAP,EAAA,CAZI,CAAA,CAAA,CAC1B,GAAI,CAEA,IAAA,gBADgBH,OAAAI,CAAOC,cAAPD,CAAsBhB,MAAtBgB,CAA8B,YAA9BA,CAChB,CAAiBb,WAAjB,OAAA,CAFA,CAIJ,MAAOe,CAAP,CAAU,EALgB,eAAA,CAAA,IAAA,EAAA,CAYJ,IAA4C,gBAAA,CAAA,qBAAA,EAAtE,KAAIC,oBAAsB,eACtBC,OAAAA,CAA0CC,IAAAA,EAAxB,GAAAF,mBAAA,CAChBN,MADgB,CAEhB,CACEC,WAAYA,QAAS,EAAG,CAAE,OAAQK,mBAAR,CAA4BZ,UAA5B,CAAyCY,mBAAA,CAAoBb,GAApB,EAAzC,EAAsE,GAAxE,CAD1B,CAMNL,QAAA,CAAQqB,sBAAR,CAAiCT,MAAA,CAAoBC,UAApB,CAA+BS,IAA/B,CAAoCV,MAApC,CAYjCZ,QAAA,CAAQuB,kBAAR,CAA6BJ,MAAA,CAAgBN,UAAhB,CAA2BS,IAA3B,CAAgCH,MAAhC,CAE7BnB,QAAA,CAAQwB,eAAR;AAA0BxB,OAA1B,CAAkCuB,kBAIlCvB,QAAA,CAAQyB,mBAAR,CAAsDL,IAAAA,EAAtD,GAA8BF,mBAK9BlB,QAAA,CAAQ0B,4BAAR,CAAwC,QAAS,EAAG,CAChD,IAAIxB,YAAcC,MAAA,CAAOC,eAAP,EAAdF,CAAuCA,WAC3C,IAAKA,WAAL,CAGA,MAAIA,YAAJ,CAAgBI,UAAhB,CACWJ,WADX,CACuBI,UADvB,CASQJ,WATR,CASoByB,MATpB,EAS8BzB,WAT9B,CAS0CyB,MAT1C,CASiDC,eATjD,EASqErB,IAAA,CAAKF,GAAL,EAdrB,CAAb,EApGiE;",
"sources":["node_modules/@sentry/utils/dist/time.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$sentry$utils$dist$time\"] = function(global,require,module,exports) {\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar misc_1 = require(\"./misc\");\nvar node_1 = require(\"./node\");\n/**\n * A TimestampSource implementation for environments that do not support the Performance Web API natively.\n *\n * Note that this TimestampSource does not use a monotonic clock. A call to `nowSeconds` may return a timestamp earlier\n * than a previously returned value. We do not try to emulate a monotonic behavior in order to facilitate debugging. It\n * is more obvious to explain \"why does my span have negative duration\" than \"why my spans have zero duration\".\n */\nvar dateTimestampSource = {\n    nowSeconds: function () { return Date.now() / 1000; },\n};\n/**\n * Returns a wrapper around the native Performance API browser implementation, or undefined for browsers that do not\n * support the API.\n *\n * Wrapping the native API works around differences in behavior from different browsers.\n */\nfunction getBrowserPerformance() {\n    var performance = misc_1.getGlobalObject().performance;\n    if (!performance || !performance.now) {\n        return undefined;\n    }\n    // Replace performance.timeOrigin with our own timeOrigin based on Date.now().\n    //\n    // This is a partial workaround for browsers reporting performance.timeOrigin such that performance.timeOrigin +\n    // performance.now() gives a date arbitrarily in the past.\n    //\n    // Additionally, computing timeOrigin in this way fills the gap for browsers where performance.timeOrigin is\n    // undefined.\n    //\n    // The assumption that performance.timeOrigin + performance.now() ~= Date.now() is flawed, but we depend on it to\n    // interact with data coming out of performance entries.\n    //\n    // Note that despite recommendations against it in the spec, browsers implement the Performance API with a clock that\n    // might stop when the computer is asleep (and perhaps under other circumstances). Such behavior causes\n    // performance.timeOrigin + performance.now() to have an arbitrary skew over Date.now(). In laptop computers, we have\n    // observed skews that can be as long as days, weeks or months.\n    //\n    // See https://github.com/getsentry/sentry-javascript/issues/2590.\n    //\n    // BUG: despite our best intentions, this workaround has its limitations. It mostly addresses timings of pageload\n    // transactions, but ignores the skew built up over time that can aversely affect timestamps of navigation\n    // transactions of long-lived web pages.\n    var timeOrigin = Date.now() - performance.now();\n    return {\n        now: function () { return performance.now(); },\n        timeOrigin: timeOrigin,\n    };\n}\n/**\n * Returns the native Performance API implementation from Node.js. Returns undefined in old Node.js versions that don't\n * implement the API.\n */\nfunction getNodePerformance() {\n    try {\n        var perfHooks = node_1.dynamicRequire(module, 'perf_hooks');\n        return perfHooks.performance;\n    }\n    catch (_) {\n        return undefined;\n    }\n}\n/**\n * The Performance API implementation for the current platform, if available.\n */\nvar platformPerformance = node_1.isNodeEnv() ? getNodePerformance() : getBrowserPerformance();\nvar timestampSource = platformPerformance === undefined\n    ? dateTimestampSource\n    : {\n        nowSeconds: function () { return (platformPerformance.timeOrigin + platformPerformance.now()) / 1000; },\n    };\n/**\n * Returns a timestamp in seconds since the UNIX epoch using the Date API.\n */\nexports.dateTimestampInSeconds = dateTimestampSource.nowSeconds.bind(dateTimestampSource);\n/**\n * Returns a timestamp in seconds since the UNIX epoch using either the Performance or Date APIs, depending on the\n * availability of the Performance API.\n *\n * See `usingPerformanceAPI` to test whether the Performance API is used.\n *\n * BUG: Note that because of how browsers implement the Performance API, the clock might stop when the computer is\n * asleep. This creates a skew between `dateTimestampInSeconds` and `timestampInSeconds`. The\n * skew can grow to arbitrary amounts like days, weeks or months.\n * See https://github.com/getsentry/sentry-javascript/issues/2590.\n */\nexports.timestampInSeconds = timestampSource.nowSeconds.bind(timestampSource);\n// Re-exported with an old name for backwards-compatibility.\nexports.timestampWithMs = exports.timestampInSeconds;\n/**\n * A boolean that is true when timestampInSeconds uses the Performance API to produce monotonic timestamps.\n */\nexports.usingPerformanceAPI = platformPerformance !== undefined;\n/**\n * The number of milliseconds since the UNIX epoch. This value is only usable in a browser, and only when the\n * performance API is available.\n */\nexports.browserPerformanceTimeOrigin = (function () {\n    var performance = misc_1.getGlobalObject().performance;\n    if (!performance) {\n        return undefined;\n    }\n    if (performance.timeOrigin) {\n        return performance.timeOrigin;\n    }\n    // While performance.timing.navigationStart is deprecated in favor of performance.timeOrigin, performance.timeOrigin\n    // is not as widely supported. Namely, performance.timeOrigin is undefined in Safari as of writing.\n    // Also as of writing, performance.timing is not available in Web Workers in mainstream browsers, so it is not always\n    // a valid fallback. In the absence of an initial time provided by the browser, fallback to the current time from the\n    // Date API.\n    // eslint-disable-next-line deprecation/deprecation\n    return (performance.timing && performance.timing.navigationStart) || Date.now();\n})();\n//# sourceMappingURL=time.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","getBrowserPerformance","performance","misc_1","getGlobalObject","now","timeOrigin","Date","Object","defineProperty","value","node_1","dateTimestampSource","nowSeconds","isNodeEnv","perfHooks","dynamicRequire","_","platformPerformance","timestampSource","undefined","dateTimestampInSeconds","bind","timestampInSeconds","timestampWithMs","usingPerformanceAPI","browserPerformanceTimeOrigin","timing","navigationStart"]
}
