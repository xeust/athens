{"version":3,"sources":["datascript/query.cljc"],"mappings":"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","names":["datascript.query/lru-cache-size","this__4380__auto__","k__4381__auto__","this__4382__auto__","k78877","else__4383__auto__","G__78881","cljs.core/Keyword","rels","sources","rules","cljs.core.get","__extmap","this__4399__auto__","f__4400__auto__","init__4401__auto__","cljs.core.reduce","ret__4402__auto__","p__78882","vec__78884","k__4403__auto__","cljs.core.nth","v__4404__auto__","this__4394__auto__","writer__4395__auto__","opts__4396__auto__","pr-pair__4397__auto__","keyval__4398__auto__","cljs.core/pr-sequential-writer","cljs.core.concat","cljs.core/PersistentVector","G__78876","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4378__auto__","__meta","this__4375__auto__","__hash","this__4384__auto__","cljs.core/count","this__4376__auto__","h__4238__auto__","coll__4377__auto__","cljs.core/hash-unordered-coll","this78878","other78879","cljs.core._EQ_","this__4389__auto__","k__4390__auto__","cljs.core/contains?","cljs.core.dissoc","cljs.core/-with-meta","cljs.core.into","cljs.core/not-empty","this__4387__auto__","k__4388__auto__","pred__78889","cljs.core/keyword-identical?","expr__78890","cljs.core.assoc","this__4392__auto__","cljs.core/seq","cljs.core/MapEntry","this__4379__auto__","this__4385__auto__","entry__4386__auto__","cljs.core/vector?","cljs.core/-nth","cljs.core/-conj","datascript.query/Context","this__4423__auto__","cljs.core/List","writer__4424__auto__","cljs.core/-write","G__78880","extmap__4419__auto__","G__78896","cljs.core/record?","datascript.query/->Context","datascript.query/map->Context","k78899","G__78906","attrs","tuples","p__78919","vec__78922","G__78898","this78900","other78901","pred__78953","expr__78954","datascript.query/Relation","G__78902","G__78956","datascript.query/->Relation","datascript.query/map->Relation","datascript.query/single","coll","js/Error","cljs.core/next","cljs.core/first","datascript.query/intersect-keys","attrs1","attrs2","clojure.set.intersection","cljs.core/set","cljs.core/keys","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","datascript.query/concatv","seq78962","self__4724__auto__","xs","cljs.core/cat","G__78967","datascript.query/zip","args-arr__4757__auto__","argseq__4758__auto__","seq78964","G__78965","G__78966","self__4723__auto__","a","b","cljs.core.mapv","cljs.core/vector","rest","cljs.core.apply","cljs.core/mapv","datascript.query/same-keys?","p1__78976#","cljs.core/every?","p1__78977#","datascript.query/looks-like?","pattern","form","cljs.core/sequential?","cljs.core/Symbol","cljs.core/last","p__79001","vec__79002","pattern-el","form-el","cljs.core.map","cljs.core/butlast","p__79009","vec__79010","datascript.query/source?","sym","cljs.core/name","datascript.query/free-var?","datascript.query/attr?","datascript.query/lookup-ref?","datascript.query/join-tuples","t1","idxs1","t2","idxs2","l1","l2","res","me.tonsky.persistent-sorted-set.arrays/make-array","n__4613__auto__","i","datascript.query/sum-rel","map__79024","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","map__79025","attrs-a","tuples-a","attrs-b","tuples-b","cljs.core/vec","cljs.core.ex_info","cljs.core.pr_str","cljs.core/number?","cljs.core/vals","idxb->idxa","iter__4529__auto__","s__79029","cljs.core/LazySeq","temp__5735__auto__","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","b__79031","cljs.core/chunk-buffer","i__79030","vec__79032","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__79028","cljs.core/chunk-rest","vec__79035","cljs.core/cons","cljs.core/rest","idx-b","tlen","cljs.core/max","tuples'","cljs.core/persistent!","acc","tuple-b","tuple'","seq__79038","chunk__79039","count__79040","i__79041","vec__79048","c__4556__auto__","cljs.core/chunk-first","vec__79051","idx-a","cljs.core.conj_BANG_","cljs.core/transient","all-attrs","cljs.core/zipmap","cljs.core.merge","cljs.core.range","G__79056","G__79057","G__79054","G__79055","G__79059","datascript.query/prod-rel","rel1","rel2","cljs.core/to-array","datascript.query/-differ?","seq79061","l","cljs.core.not_EQ_","cljs.core.take","cljs.core.drop","datascript.query/-get-else","db","e","else-val","temp__5737__auto__","datom","datascript.db/-search","datascript.query/-get-some","seq79062","G__79063","G__79064","as","_","temp__5739__auto__","cljs.core/reduced","datascript.query/-missing?","datascript.impl.entity/entity","datascript.query/and-fn","seq79067","args","datascript.query/or-fn","seq79068","cljs.core//","datascript.query/built-ins","cljs.core/=","cljs.core/==","cljs.core/not=","cljs.core/<","cljs.core/>","cljs.core/<=","cljs.core/>=","cljs.core/+","cljs.core/-","cljs.core/*","cljs.core/quot","cljs.core/rem","cljs.core/mod","cljs.core/inc","cljs.core/dec","cljs.core/min","cljs.core/zero?","cljs.core/pos?","cljs.core/neg?","cljs.core/even?","cljs.core/odd?","cljs.core/compare","cljs.core/rand","cljs.core/rand-int","cljs.core/true?","cljs.core/false?","cljs.core/nil?","cljs.core/some?","cljs.core/not","cljs.core/complement","cljs.core/identical?","cljs.core/identity","cljs.core/keyword","cljs.core/meta","cljs.core/namespace","cljs.core/type","cljs.core/list","cljs.core/array-map","cljs.core/range","cljs.core/empty?","cljs.core/str","cljs.core/pr-str","cljs.core/print-str","cljs.core/println-str","cljs.core/prn-str","cljs.core/subs","cljs.core/re-find","cljs.core/re-matches","cljs.core/re-seq","cljs.core/re-pattern","clojure.string/blank?","clojure.string/includes?","clojure.string/starts-with?","clojure.string/ends-with?","datascript.query/built-in-aggregates","sum","terms","cljs.core.sort","size","med","G__79079","mean","avg","s__79082","b__79084","i__79083","iter__79081","x","delta","js/Math.sqrt","variance","median","stddev","n","cljs.core.conj","cljs.core/rand-nth","cljs.core.repeatedly","cljs.core/shuffle","cljs.core.distinct","datascript.query/parse-rules","cljs.reader.read_string","datascript.parser/parse-rules","cljs.core/group-by","cljs.core/ffirst","datascript.query/empty-rel","binding","vars","datascript.parser/collect-vars-distinct","datascript$query$IBinding$in__GT_rel$dyn","x__4428__auto__","m__4429__auto__","datascript.query/in->rel","goog/typeOf","m__4426__auto__","cljs.core/missing-protocol","datascript.query/IBinding","value","datascript.parser/BindIgnore","datascript.query.prod_rel","datascript.parser/BindScalar","cljs.core.get_in","cljs.core.into_array","datascript.parser/BindColl","datascript.db/seqable?","datascript.parser/source","p1__79086#","datascript.parser/BindTuple","p1__79087#","p2__79088#","p__79090","vec__79091","datascript.query/resolve-in","context","datascript.parser/SrcVar","cljs.core.update","cljs.core/assoc","datascript.parser/RulesVar","cljs.core/conj","datascript.query/resolve-ins","bindings","values","cb","cv","p1__79094#","p1__79095#","datascript.query/*lookup-attrs*","datascript.query/*implicit-source*","datascript.query/getter-fn","attr","idx","tuple","eid","datascript.db/entid","me.tonsky.persistent-sorted-set.arrays/array?","datascript.query/tuple-key-fn","getters","cljs.core.list_STAR_","p1__79096#","datascript.query/hash-attrs","key-fn","hash-table","key","cljs.core.assoc_BANG_","datascript.query/hash-join","tuples1","tuples2","common-attrs","common-gtrs1","p1__79099#","common-gtrs2","p1__79100#","keep-attrs1","keep-attrs2","clojure.set.difference","keep-idxs1","keep-idxs2","key-fn1","hash","key-fn2","new-tuples","tuple2","tuple1","datascript.query/subtract-rel","map__79104","map__79105","getters-b","p1__79101#","key-fn-b","getters-a","p1__79102#","key-fn-a","p1__79103#","cljs.core/filterv","G__79108","datascript.query/lookup-pattern-db","search-pattern","p1__79109#","datoms","attr->prop","cljs.core.filter","p__79110","vec__79111","s","datascript.query/matches-pattern?","and__4115__auto__","t","p","datascript.query/lookup-pattern-coll","data","p1__79114#","attr->idx","p__79115","vec__79116","datascript.query/normalize-pattern-clause","clause","datascript.query/lookup-pattern","source","cljs.core/native-satisfies?","datascript.db/ISearch","datascript.query/collapse-rels","new-rel","rel","datascript.query/rel-with-attr","p1__79120#","cljs.core/some","datascript.query/context-resolve-val","fexpr__79121","datascript.query/rel-contains-attrs?","p1__79122#","datascript.query/rel-prod-by-attrs","p1__79123#","production","p1__79124#","cljs.core.remove","datascript.query/-call-fn","f","len","static-args","tuples-args","arg","me.tonsky.persistent-sorted-set.arrays/aclone","tuple-idx","v","datascript.query/resolve-sym","datascript.query/filter-by-pred","vec__79127","vec__79130","seq__79131","first__79132","vec__79133","pred","or__4126__auto__","cljs.core/symbol?","tuple-pred","p1__79126#","datascript.query/bind-by-fn","vec__79140","vec__79143","seq__79144","first__79145","vec__79146","out","datascript.parser/parse-binding","fun","tuple-fn","s__79151","b__79153","i__79152","iter__79150","val","datascript.query/rule?","head","cljs.core/second","datascript.query/rule-seqid","cljs.core.atom","datascript.query/expand-rule","used-args","vec__79161","seq__79162","first__79163","rule","call-args","seqid","cljs.core.swap_BANG_","branches","s__79167","b__79169","i__79168","vec__79170","seq__79171","first__79172","vec__79173","seq__79174","first__79175","iter__79166","vec__79180","seq__79181","first__79182","vec__79183","seq__79184","first__79185","branch","rule-args","clauses","replacements","p1__79160#","clojure.walk/postwalk","x__74920__auto__","cljs.core.symbol","datascript.query/remove-pairs","ys","pairs","p__79188","vec__79189","y","datascript.query/rule-gen-guards","rule-clause","vec__79194","seq__79195","first__79196","prev-call-args","s__79198","b__79200","i__79199","vec__79201","iter__79197","vec__79206","prev-args","datascript.query/walk-collect","cljs.core/deref","p1__79210#","datascript.query/collect-vars","datascript.query/split-guards","guards","bound-vars","p__79213","vec__79215","vec__79218","seq__79219","first__79220","datascript.query/solve-rule","final-attrs","final-attrs-map","solve","prefix-context","datascript.query/-resolve-clause","empty-rels?","p1__79222#","stack","frame","vec__79248","vec__79251","seq__79252","first__79253","next-clauses","p1__79223#","cljs.core/split-with","datascript.query/-collect","vec__79254","seq__79255","first__79256","vec__79257","active-gs","pending-gs","p1__79224#","prefix-clauses","s__79261","b__79263","i__79262","iter__79260","datascript.query.concatv","datascript.query/resolve-pattern-lookup-refs","datascript.db/IDB","vec__79279","tx","datascript.db/entid-strict","datascript.db/ref?","cljs.core.subvec","datascript.query/dynamic-lookup-attrs","vec__79284","G__79287","datascript.query/limit-rel","attrs'","cljs.core/select-keys","datascript.query/limit-context","p1__79288#","cljs.core.keep","datascript.query/bound-vars","p1__79289#","cljs.core.mapcat","datascript.query/check-bound","bound","clojure.set/subset?","missing","datascript.query/check-free-same","free","p1__79290#","datascript.query/check-free-subset","seq__79291","chunk__79292","count__79293","i__79294","cljs.core.prn","G__79320","datascript.query._resolve_clause","orig-clause","pred__79325","expr__79326","G__79332","G__79333","G__79334","G__79335","G__79336","G__79337","G__79343","G__79344","G__79348","G__79349","G__79356","G__79357","G__79361","G__79362","G__79366","G__79367","G__79371","G__79372","G__79376","G__79377","cljs.core/nfirst","vec__79338","seq__79339","first__79340","source-sym","*implicit-source*-orig-val__79341","*implicit-source*-temp-val__79342","vec__79345","seq__79346","first__79347","contexts","p1__79307#","datascript.query/resolve-clause","p1__79308#","vec__79350","seq__79351","first__79352","vec__79353","seq__79354","first__79355","req-vars","vec__79358","seq__79359","first__79360","join-context","p1__79311#","p1__79312#","sum-rel","vec__79363","seq__79364","first__79365","vec__79368","seq__79369","first__79370","negation-vars","context'","negation-context","negation","vec__79373","seq__79374","first__79375","relation","*lookup-attrs*-orig-val__79378","*lookup-attrs*-temp-val__79379","*implicit-source*-orig-val__79381","*implicit-source*-temp-val__79382","G__79383","G__79384","datascript.query/-q","*implicit-source*-orig-val__79385","*implicit-source*-temp-val__79386","G__79389","symbols","datascript.query._collect","keep-attrs","copy-map","p1__79387#","s__79391","xs__6292__auto__","iterys__4525__auto__","s__79393","b__79395","i__79394","iter__79392","fs__4526__auto__","iter__79390","cljs.core/aclone","datascript.query/collect","datascript$query$IContextResolve$_context_resolve$dyn","datascript.query/-context-resolve","datascript.query/IContextResolve","var","datascript.parser/Variable","datascript.parser/PlainSymbol","datascript.parser/Constant","datascript.query/-aggregate","find-elements","element","fixed-value","datascript.parser/aggregate?","p1__79397#","vals","p1__79398#","datascript.query/idxs-of","p1__79401#","p2__79402#","datascript.query/aggregate","resultset","group-idxs","group-fn","p1__79407#","grouped","s__79409","b__79411","i__79410","vec__79414","iter__79408","vec__79417","datascript.query/map*","p1__79424#","p2__79425#","cljs.core/empty","datascript.query/tuples->return-map","return-map","idxs","m","datascript$query$IPostProcess$_post_process$dyn","datascript.query/-post-process","datascript.query/IPostProcess","find","datascript.parser/FindRel","datascript.parser/FindColl","datascript.parser/FindScalar","datascript.parser/FindTuple","datascript.query/pull","resolved","s__79431","b__79433","i__79432","iter__79430","datascript.parser/pull?","datascript.pull-parser/parse-pull","s__79437","b__79439","i__79438","iter__79436","env","el","vec__79443","vec__79446","src","spec","datascript.pull-api/pull-spec","datascript.query/query-cache","cljs.core/volatile!","datascript.lru/lru","datascript.query/memoized-parse-query","q","cached","qp","datascript.parser/parse-query","datascript.query/q","seq79453","G__79454","inputs","parsed-q","datascript.parser/find-elements","find-vars","datascript.parser/find-vars","result-arity","with","all-vars","G__79455","datascript.parser/query->map","wheres","G__79456","p1__79452#"],"sourcesContent":["(ns ^:no-doc datascript.query\n  (:require\n   [#?(:cljs cljs.reader :clj clojure.edn) :as edn]\n   [clojure.set :as set]\n   [clojure.string :as str]\n   [clojure.walk :as walk]\n   [datascript.db :as db #?(:cljs :refer-macros :clj :refer) [raise cond+]]\n   [me.tonsky.persistent-sorted-set.arrays :as da]\n   [datascript.lru]\n   [datascript.impl.entity :as de]\n   [datascript.parser :as dp #?@(:cljs [:refer [BindColl BindIgnore BindScalar BindTuple Constant\n                                                FindColl FindRel FindScalar FindTuple PlainSymbol\n                                                RulesVar SrcVar Variable]])]\n   [datascript.pull-api :as dpa]\n   [datascript.pull-parser :as dpp])\n  #?(:clj (:import [datascript.parser BindColl BindIgnore BindScalar BindTuple\n                    Constant FindColl FindRel FindScalar FindTuple PlainSymbol\n                    RulesVar SrcVar Variable])))\n\n;; ----------------------------------------------------------------------------\n\n(def ^:const lru-cache-size 100)\n\n(declare -collect -resolve-clause resolve-clause)\n\n;; Records\n\n(defrecord Context [rels sources rules])\n\n;; attrs:\n;;    {?e 0, ?v 1} or {?e2 \"a\", ?age \"v\"}\n;; tuples:\n;;    [ #js [1 \"Ivan\" 5 14] ... ]\n;; or [ (Datom. 2 \"Oleg\" 1 55) ... ]\n(defrecord Relation [attrs tuples])\n\n\n;; Utilities\n\n(defn single [coll]\n  (assert (nil? (next coll)) \"Expected single element\")\n  (first coll))\n\n(defn intersect-keys [attrs1 attrs2]\n  (set/intersection (set (keys attrs1))\n                    (set (keys attrs2))))\n\n(defn concatv [& xs]\n  (into [] cat xs))\n\n(defn zip\n  ([a b] (mapv vector a b))\n  ([a b & rest] (apply mapv vector a b rest)))\n\n(defn same-keys? [a b]\n  (and (= (count a) (count b))\n       (every? #(contains? b %) (keys a))\n       (every? #(contains? b %) (keys a))))\n\n(defn- looks-like? [pattern form]\n  (cond\n    (= '_ pattern)\n      true\n    (= '[*] pattern)\n      (sequential? form)\n    (symbol? pattern)\n      (= form pattern)\n    (sequential? pattern)\n      (if (= (last pattern) '*)\n        (and (sequential? form)\n             (every? (fn [[pattern-el form-el]] (looks-like? pattern-el form-el))\n                     (map vector (butlast pattern) form)))\n        (and (sequential? form)\n             (= (count form) (count pattern))\n             (every? (fn [[pattern-el form-el]] (looks-like? pattern-el form-el))\n                     (map vector pattern form))))\n    :else ;; (predicate? pattern)\n      (pattern form)))\n\n(defn source? [sym]\n  (and (symbol? sym)\n       (= \\$ (first (name sym)))))\n\n(defn free-var? [sym]\n  (and (symbol? sym)\n       (= \\? (first (name sym)))))\n\n(defn attr? [form]\n  (or (keyword? form) (string? form)))\n\n(defn lookup-ref? [form]\n  (looks-like? [attr? '_] form))\n\n;; Relation algebra\n\n(defn join-tuples [t1 #?(:cljs idxs1\n                         :clj  ^{:tag \"[[Ljava.lang.Object;\"} idxs1)\n                   t2 #?(:cljs idxs2\n                         :clj  ^{:tag \"[[Ljava.lang.Object;\"} idxs2)]\n  (let [l1  (alength idxs1)\n        l2  (alength idxs2)\n        res (da/make-array (+ l1 l2))]\n    (dotimes [i l1]\n      (aset res i (#?(:cljs da/aget :clj get) t1 (aget idxs1 i)))) ;; FIXME aget\n    (dotimes [i l2]\n      (aset res (+ l1 i) (#?(:cljs da/aget :clj get) t2 (aget idxs2 i)))) ;; FIXME aget\n    res))\n\n(defn sum-rel [a b]\n  (let [{attrs-a :attrs, tuples-a :tuples} a\n        {attrs-b :attrs, tuples-b :tuples} b]\n    (cond\n      (= attrs-a attrs-b)\n      (Relation. attrs-a (into (vec tuples-a) tuples-b))\n\n      (not (same-keys? attrs-a attrs-b))\n      (raise \"Can\u2019t sum relations with different attrs: \" attrs-a \" and \" attrs-b\n             {:error :query/where})\n\n      (every? number? (vals attrs-a)) ;; can\u2019t conj into BTSetIter\n      (let [idxb->idxa (vec (for [[sym idx-b] attrs-b]\n                              [idx-b (attrs-a sym)]))\n            tlen    (->> (vals attrs-a) (reduce max) (inc)) \n            tuples' (persistent!\n                      (reduce\n                        (fn [acc tuple-b]\n                          (let [tuple' (da/make-array tlen)]\n                            (doseq [[idx-b idx-a] idxb->idxa]\n                              (aset tuple' idx-a (#?(:cljs da/aget :clj get) tuple-b idx-b)))\n                            (conj! acc tuple')))\n                        (transient (vec tuples-a))\n                        tuples-b))]\n        (Relation. attrs-a tuples'))\n\n      :else\n      (let [all-attrs (zipmap (keys (merge attrs-a attrs-b)) (range))]\n        (-> (Relation. all-attrs [])\n            (sum-rel a)\n            (sum-rel b))))))\n\n(defn prod-rel\n  ([] (Relation. {} [(da/make-array 0)]))\n  ([rel1 rel2]\n    (let [attrs1 (keys (:attrs rel1))\n          attrs2 (keys (:attrs rel2))\n          idxs1  (to-array (map (:attrs rel1) attrs1))\n          idxs2  (to-array (map (:attrs rel2) attrs2))]\n      (Relation.\n        (zipmap (concat attrs1 attrs2) (range))\n        (persistent!\n          (reduce\n            (fn [acc t1]\n              (reduce (fn [acc t2]\n                        (conj! acc (join-tuples t1 idxs1 t2 idxs2)))\n                      acc (:tuples rel2)))\n            (transient []) (:tuples rel1)))\n        ))))\n\n;; built-ins\n\n(defn- -differ? [& xs]\n  (let [l (count xs)]\n    (not= (take (/ l 2) xs) (drop (/ l 2) xs))))\n\n(defn- -get-else\n  [db e a else-val]\n  (when (nil? else-val)\n    (raise \"get-else: nil default value is not supported\" {:error :query/where}))\n  (if-some [datom (first (db/-search db [e a]))]\n    (:v datom)\n    else-val))\n\n(defn- -get-some\n  [db e & as]\n  (reduce\n   (fn [_ a]\n     (when-some [datom (first (db/-search db [e a]))]\n       (reduced [(:a datom) (:v datom)])))\n   nil\n   as))\n\n(defn- -missing?\n  [db e a]\n  (nil? (get (de/entity db e) a)))\n\n(defn- and-fn [& args]\n  (reduce (fn [a b]\n            (if b b (reduced b))) true args))\n            \n(defn- or-fn [& args]\n  (reduce (fn [a b]\n            (if b (reduced b) b)) nil args))\n\n(def built-ins {\n  '= =, '== ==, 'not= not=, '!= not=, '< <, '> >, '<= <=, '>= >=, '+ +, '- -,\n  '* *, '/ /, 'quot quot, 'rem rem, 'mod mod, 'inc inc, 'dec dec, 'max max, 'min min,\n  'zero? zero?, 'pos? pos?, 'neg? neg?, 'even? even?, 'odd? odd?, 'compare compare,\n  'rand rand, 'rand-int rand-int,\n  'true? true?, 'false? false?, 'nil? nil?, 'some? some?, 'not not, 'and and-fn, 'or or-fn,\n  'complement complement, 'identical? identical?,\n  'identity identity, 'keyword keyword, 'meta meta, 'name name, 'namespace namespace, 'type type,\n  'vector vector, 'list list, 'set set, 'hash-map hash-map, 'array-map array-map,\n  'count count, 'range range, 'not-empty not-empty, 'empty? empty?, 'contains? contains?,\n  'str str, 'pr-str pr-str, 'print-str print-str, 'println-str println-str, 'prn-str prn-str, 'subs subs,\n  're-find re-find, 're-matches re-matches, 're-seq re-seq, 're-pattern re-pattern,\n  '-differ? -differ?, 'get-else -get-else, 'get-some -get-some, 'missing? -missing?, 'ground identity,\n  'clojure.string/blank? str/blank?, 'clojure.string/includes? str/includes?,\n  'clojure.string/starts-with? str/starts-with?, 'clojure.string/ends-with? str/ends-with?\n  'tuple vector, 'untuple identity\n})\n\n(def built-in-aggregates\n (letfn [(sum [coll] (reduce + 0 coll))\n         (avg [coll] (/ (sum coll) (count coll)))\n         (median\n           [coll]\n           (let [terms (sort coll)\n                 size (count coll)\n                 med (bit-shift-right size 1)]\n             (cond-> (nth terms med)\n               (even? size)\n               (-> (+ (nth terms (dec med)))\n                   (/ 2)))))\n         (variance\n           [coll]\n           (let [mean (avg coll)\n                 sum  (sum (for [x coll\n                                 :let [delta (- x mean)]]\n                             (* delta delta)))]\n             (/ sum (count coll))))\n         (stddev \n           [coll] \n           (#?(:cljs js/Math.sqrt :clj Math/sqrt) (variance coll)))]\n   {'avg      avg\n    'median   median\n    'variance variance\n    'stddev   stddev\n    'distinct set\n    'min      (fn\n                ([coll] (reduce (fn [acc x]\n                                  (if (neg? (compare x acc))\n                                    x acc))\n                                (first coll) (next coll)))\n                ([n coll]\n                  (vec\n                    (reduce (fn [acc x]\n                              (cond\n                                (< (count acc) n)\n                                  (sort compare (conj acc x))\n                                (neg? (compare x (last acc)))\n                                  (sort compare (conj (butlast acc) x))\n                                :else acc))\n                            [] coll))))\n    'max      (fn\n                ([coll] (reduce (fn [acc x]\n                                  (if (pos? (compare x acc))\n                                    x acc))\n                                (first coll) (next coll)))\n                ([n coll]\n                  (vec\n                    (reduce (fn [acc x]\n                              (cond\n                                (< (count acc) n)\n                                  (sort compare (conj acc x))\n                                (pos? (compare x (first acc)))\n                                  (sort compare (conj (next acc) x))\n                                :else acc))\n                            [] coll))))\n    'sum      sum\n    'rand     (fn\n                ([coll] (rand-nth coll))\n                ([n coll] (vec (repeatedly n #(rand-nth coll)))))\n    'sample   (fn [n coll]\n                (vec (take n (shuffle coll))))\n    'count    count\n    'count-distinct (fn [coll] (count (distinct coll)))}))\n\n\n;;\n\n(defn parse-rules [rules]\n  (let [rules (if (string? rules) (edn/read-string rules) rules)] ;; for datascript.js interop\n    (dp/parse-rules rules) ;; validation\n    (group-by ffirst rules)))\n\n(defn empty-rel [binding]\n  (let [vars (->> (dp/collect-vars-distinct binding)\n               (map :symbol))]\n    (Relation. (zipmap vars (range)) [])))\n\n(defprotocol IBinding\n  (in->rel [binding value]))\n\n(extend-protocol IBinding\n  BindIgnore\n  (in->rel [_ _]\n    (prod-rel))\n  \n  BindScalar\n  (in->rel [binding value]\n    (Relation. {(get-in binding [:variable :symbol]) 0} [(into-array [value])]))\n  \n  BindColl\n  (in->rel [binding coll]\n    (cond\n      (not (db/seqable? coll))\n        (raise \"Cannot bind value \" coll \" to collection \" (dp/source binding)\n               {:error :query/binding, :value coll, :binding (dp/source binding)})\n      (empty? coll)\n        (empty-rel binding)\n      :else\n        (->> coll\n          (map #(in->rel (:binding binding) %))\n          (reduce sum-rel))))\n  \n  BindTuple\n  (in->rel [binding coll]\n    (cond\n      (not (db/seqable? coll))\n        (raise \"Cannot bind value \" coll \" to tuple \" (dp/source binding)\n               {:error :query/binding, :value coll, :binding (dp/source binding)})\n      (< (count coll) (count (:bindings binding)))\n        (raise \"Not enough elements in a collection \" coll \" to bind tuple \" (dp/source binding)\n               {:error :query/binding, :value coll, :binding (dp/source binding)})\n      :else\n        (reduce prod-rel\n          (map #(in->rel %1 %2) (:bindings binding) coll)))))\n\n(defn resolve-in [context [binding value]]\n  (cond\n    (and (instance? BindScalar binding)\n         (instance? SrcVar (:variable binding)))\n      (update context :sources assoc (get-in binding [:variable :symbol]) value)\n    (and (instance? BindScalar binding)\n         (instance? RulesVar (:variable binding)))\n      (assoc context :rules (parse-rules value))\n    :else\n      (update context :rels conj (in->rel binding value))))\n\n(defn resolve-ins [context bindings values]\n  (let [cb (count bindings)\n        cv (count values)]\n    (cond\n      (< cb cv)\n      (raise \"Extra inputs passed, expected: \" (mapv #(:source (meta %)) bindings) \", got: \" cv\n        {:error :query/inputs :expected bindings :got values})\n\n      (> cb cv)\n      (raise \"Too few inputs passed, expected: \" (mapv #(:source (meta %)) bindings) \", got: \" cv\n        {:error :query/inputs :expected bindings :got values})\n\n      :else\n      (reduce resolve-in context (zipmap bindings values)))))\n\n;;\n\n(def ^{:dynamic true\n       :doc \"List of symbols in current pattern that might potentiall be resolved to refs\"}\n  *lookup-attrs* nil)\n\n(def ^{:dynamic true\n       :doc \"Default pattern source. Lookup refs, patterns, rules will be resolved with it\"}\n  *implicit-source* nil)\n\n(defn getter-fn [attrs attr]\n  (let [idx (attrs attr)]\n    (if (contains? *lookup-attrs* attr)\n      (fn [tuple]\n        (let [eid (#?(:cljs da/aget :clj get) tuple idx)]\n          (cond\n            (number? eid)     eid ;; quick path to avoid fn call\n            (sequential? eid) (db/entid *implicit-source* eid)\n            (da/array? eid)   (db/entid *implicit-source* eid)\n            :else             eid)))\n      (fn [tuple]\n        (#?(:cljs da/aget :clj get) tuple idx)))))\n\n(defn tuple-key-fn [getters]\n  (if (== (count getters) 1)\n    (first getters)\n    (let [getters (to-array getters)]\n      (fn [tuple]\n        (list* #?(:cljs (.map getters #(% tuple))\n                  :clj  (to-array (map #(% tuple) getters))))))))\n\n(defn hash-attrs [key-fn tuples]\n  (loop [tuples     tuples\n         hash-table (transient {})]\n    (if-some [tuple (first tuples)]\n      (let [key (key-fn tuple)]\n        (recur (next tuples)\n               (assoc! hash-table key (conj (get hash-table key '()) tuple))))\n      (persistent! hash-table))))\n\n(defn hash-join [rel1 rel2]\n  (let [tuples1       (:tuples rel1)\n        tuples2       (:tuples rel2)\n        attrs1        (:attrs rel1)\n        attrs2        (:attrs rel2)\n        common-attrs  (vec (intersect-keys (:attrs rel1) (:attrs rel2)))\n        common-gtrs1  (map #(getter-fn attrs1 %) common-attrs)\n        common-gtrs2  (map #(getter-fn attrs2 %) common-attrs)\n        keep-attrs1   (keys attrs1)\n        keep-attrs2   (vec (set/difference (set (keys attrs2)) (set (keys attrs1))))\n        keep-idxs1    (to-array (map attrs1 keep-attrs1))\n        keep-idxs2    (to-array (map attrs2 keep-attrs2))\n        key-fn1       (tuple-key-fn common-gtrs1)\n        hash          (hash-attrs key-fn1 tuples1)\n        key-fn2       (tuple-key-fn common-gtrs2)\n        new-tuples    (->>\n                        (reduce (fn [acc tuple2]\n                                  (let [key (key-fn2 tuple2)]\n                                    (if-some [tuples1 (get hash key)]\n                                      (reduce (fn [acc tuple1]\n                                                (conj! acc (join-tuples tuple1 keep-idxs1 tuple2 keep-idxs2)))\n                                              acc tuples1)\n                                      acc)))\n                          (transient []) tuples2)\n                        (persistent!))]\n    (Relation. (zipmap (concat keep-attrs1 keep-attrs2) (range))\n               new-tuples)))\n\n(defn subtract-rel [a b]\n  (let [{attrs-a :attrs, tuples-a :tuples} a\n        {attrs-b :attrs, tuples-b :tuples} b\n        attrs     (intersect-keys attrs-a attrs-b)\n        getters-b (map #(getter-fn attrs-b %) attrs)\n        key-fn-b  (tuple-key-fn getters-b)\n        hash      (hash-attrs key-fn-b tuples-b)\n        getters-a (map #(getter-fn attrs-a %) attrs)\n        key-fn-a  (tuple-key-fn getters-a)]\n    (assoc a\n      :tuples (filterv #(nil? (hash (key-fn-a %))) tuples-a))))\n\n(defn lookup-pattern-db [db pattern]\n  ;; TODO optimize with bound attrs min/max values here\n  (let [search-pattern (mapv #(if (symbol? %) nil %) pattern)\n        datoms         (db/-search db search-pattern)\n        attr->prop     (->> (map vector pattern [\"e\" \"a\" \"v\" \"tx\"])\n                            (filter (fn [[s _]] (free-var? s)))\n                            (into {}))]\n    (Relation. attr->prop datoms)))\n\n(defn matches-pattern? [pattern tuple]\n  (loop [tuple   tuple\n         pattern pattern]\n    (if (and tuple pattern)\n      (let [t (first tuple)\n            p (first pattern)]\n        (if (or (symbol? p) (= t p))\n          (recur (next tuple) (next pattern))\n          false))\n      true)))\n\n(defn lookup-pattern-coll [coll pattern]\n  (let [data       (filter #(matches-pattern? pattern %) coll)\n        attr->idx  (->> (map vector pattern (range))\n                        (filter (fn [[s _]] (free-var? s)))\n                        (into {}))]\n    (Relation. attr->idx (mapv to-array data)))) ;; FIXME to-array\n\n(defn normalize-pattern-clause [clause]\n  (if (source? (first clause))\n    clause\n    (concat ['$] clause)))\n\n(defn lookup-pattern [source pattern]\n  (cond\n    (satisfies? db/ISearch source)\n      (lookup-pattern-db source pattern)\n    :else\n      (lookup-pattern-coll source pattern)))\n\n(defn collapse-rels [rels new-rel]\n  (loop [rels    rels\n         new-rel new-rel\n         acc     []]\n    (if-some [rel (first rels)]\n      (if (not-empty (intersect-keys (:attrs new-rel) (:attrs rel)))\n        (recur (next rels) (hash-join rel new-rel) acc)\n        (recur (next rels) new-rel (conj acc rel)))\n      (conj acc new-rel))))\n\n(defn- rel-with-attr [context sym]\n  (some #(when (contains? (:attrs %) sym) %) (:rels context)))\n\n(defn- context-resolve-val [context sym]\n  (when-some [rel (rel-with-attr context sym)]\n    (when-some [tuple (first (:tuples rel))]\n      (#?(:cljs da/aget :clj get) tuple ((:attrs rel) sym)))))\n\n(defn- rel-contains-attrs? [rel attrs]\n  (some #(contains? (:attrs rel) %) attrs))\n\n(defn- rel-prod-by-attrs [context attrs]\n  (let [rels       (filter #(rel-contains-attrs? % attrs) (:rels context))\n        production (reduce prod-rel rels)]\n    [(update context :rels #(remove (set rels) %)) production]))\n\n(defn -call-fn [context rel f args]\n  (let [sources     (:sources context)\n        attrs       (:attrs rel)\n        len         (count args)\n        static-args (da/make-array len)\n        tuples-args (da/make-array len)]\n    (dotimes [i len]\n      (let [arg (nth args i)]\n        (if (symbol? arg) \n          (if-some [source (get sources arg)]\n            (da/aset static-args i source)\n            (da/aset tuples-args i (get attrs arg)))\n          (da/aset static-args i arg))))\n    ;; CLJS `apply` + `vector` will hold onto mutable array of arguments directly\n    ;; https://github.com/tonsky/datascript/issues/262\n    (if #?(:clj  false\n           :cljs (identical? f vector))\n      (fn [tuple]\n        ;; TODO raise if not all args are bound\n        (let [args (da/aclone static-args)]\n          (dotimes [i len]\n            (when-some [tuple-idx (aget tuples-args i)]\n              (let [v (#?(:cljs da/aget :clj get) tuple tuple-idx)]\n                (da/aset args i v))))\n          (apply f args)))\n      (fn [tuple]\n        ;; TODO raise if not all args are bound\n        (dotimes [i len]\n          (when-some [tuple-idx (aget tuples-args i)]\n            (let [v (#?(:cljs da/aget :clj get) tuple tuple-idx)]\n              (da/aset static-args i v))))\n        (apply f static-args)))))\n\n(defn- resolve-sym [sym]\n  #?(:cljs nil\n     :clj (when (namespace sym)\n            (when-some [v (resolve sym)] @v))))\n\n(defn filter-by-pred [context clause]\n  (let [[[f & args]] clause\n        pred         (or (get built-ins f)\n                         (context-resolve-val context f)\n                         (resolve-sym f)\n                         (when (nil? (rel-with-attr context f))\n                           (raise \"Unknown predicate '\" f \" in \" clause\n                                  {:error :query/where, :form clause, :var f})))\n        [context production] (rel-prod-by-attrs context (filter symbol? args))\n        new-rel      (if pred\n                       (let [tuple-pred (-call-fn context production pred args)]\n                         (update production :tuples #(filter tuple-pred %)))\n                       (assoc production :tuples []))]\n    (update context :rels conj new-rel)))\n\n(defn bind-by-fn [context clause]\n  (let [[[f & args] out] clause\n        binding  (dp/parse-binding out)\n        fun      (or (get built-ins f)\n                     (context-resolve-val context f)\n                     (resolve-sym f)\n                     (when (nil? (rel-with-attr context f))\n                       (raise \"Unknown function '\" f \" in \" clause\n                              {:error :query/where, :form clause, :var f})))\n        [context production] (rel-prod-by-attrs context (filter symbol? args))\n        new-rel  (if fun\n                   (let [tuple-fn (-call-fn context production fun args)\n                        rels     (for [tuple (:tuples production)\n                                       :let  [val (tuple-fn tuple)]\n                                       :when (not (nil? val))]\n                                   (prod-rel (Relation. (:attrs production) [tuple])\n                                             (in->rel binding val)))]\n                     (if (empty? rels)\n                       (prod-rel production (empty-rel binding))\n                       (reduce sum-rel rels)))\n                   (prod-rel (assoc production :tuples []) (empty-rel binding)))]\n    (update context :rels collapse-rels new-rel)))\n\n;;; RULES\n\n(defn rule? [context clause]\n  (cond+\n    (not (sequential? clause))\n    false\n\n    :let [head (if (source? (first clause))\n                  (second clause)\n                  (first clause))]\n\n    (not (symbol? head))\n    false\n\n    (free-var? head)\n    false\n\n    (contains? #{'_ 'or 'or-join 'and 'not 'not-join} head)\n    false\n\n    (not (contains? (:rules context) head))\n    (raise \"Unknown rule '\" head \" in \" clause\n      {:error :query/where\n       :form  clause})\n\n    :else true))\n\n(def rule-seqid (atom 0))\n\n(defn expand-rule [clause context used-args]\n  (let [[rule & call-args] clause\n        seqid              (swap! rule-seqid inc)\n        branches           (get (:rules context) rule)]\n    (for [branch branches\n          :let [[[_ & rule-args] & clauses] branch\n                replacements (zipmap rule-args call-args)]]\n      (walk/postwalk\n       #(if (free-var? %)\n          (db/some-of\n            (replacements %)\n            (symbol (str (name %) \"__auto__\" seqid)))\n          %)\n        clauses))))\n\n(defn remove-pairs [xs ys]\n  (let [pairs (->> (map vector xs ys)\n                   (remove (fn [[x y]] (= x y))))]\n    [(map first pairs)\n     (map second pairs)]))\n\n(defn rule-gen-guards [rule-clause used-args]\n  (let [[rule & call-args] rule-clause\n        prev-call-args     (get used-args rule)]\n    (for [prev-args prev-call-args\n          :let [[call-args prev-args] (remove-pairs call-args prev-args)]]\n      [(concat ['-differ?] call-args prev-args)])))\n\n(defn walk-collect [form pred]\n  (let [res (atom [])]\n    (walk/postwalk #(do (when (pred %) (swap! res conj %)) %) form)\n    @res))\n\n(defn collect-vars [clause]\n  (set (walk-collect clause free-var?)))\n\n(defn split-guards [clauses guards]\n  (let [bound-vars (collect-vars clauses)\n        pred       (fn [[[_ & vars]]] (every? bound-vars vars))]\n    [(filter pred guards)\n     (remove pred guards)]))\n\n(defn solve-rule [context clause]\n  (let [final-attrs     (filter free-var? clause)\n        final-attrs-map (zipmap final-attrs (range))\n;;         clause-cache    (atom {}) ;; TODO\n        solve           (fn [prefix-context clauses]\n                          (reduce -resolve-clause prefix-context clauses))\n        empty-rels?     (fn [context]\n                          (some #(empty? (:tuples %)) (:rels context)))]\n    (loop [stack (list {:prefix-clauses []\n                        :prefix-context context\n                        :clauses        [clause]\n                        :used-args      {}\n                        :pending-guards {}})\n           rel   (Relation. final-attrs-map [])]\n      (if-some [frame (first stack)]\n        (let [[clauses [rule-clause & next-clauses]] (split-with #(not (rule? context %)) (:clauses frame))]\n          (if (nil? rule-clause)\n\n            ;; no rules -> expand, collect, sum\n            (let [context (solve (:prefix-context frame) clauses)\n                  tuples  (-collect context final-attrs)\n                  new-rel (Relation. final-attrs-map tuples)]\n              (recur (next stack) (sum-rel rel new-rel)))\n\n            ;; has rule -> add guards -> check if dead -> expand rule -> push to stack, recur\n            (let [[rule & call-args]     rule-clause\n                  guards                 (rule-gen-guards rule-clause (:used-args frame))\n                  [active-gs pending-gs] (split-guards (concat (:prefix-clauses frame) clauses)\n                                                       (concat guards (:pending-guards frame)))]\n              (if (some #(= % '[(-differ?)]) active-gs) ;; trivial always false case like [(not= [?a ?b] [?a ?b])]\n\n                ;; this branch has no data, just drop it from stack\n                (recur (next stack) rel)\n\n                (let [prefix-clauses (concat clauses active-gs)\n                      prefix-context (solve (:prefix-context frame) prefix-clauses)]\n                  (if (empty-rels? prefix-context)\n\n                    ;; this branch has no data, just drop it from stack\n                    (recur (next stack) rel)\n\n                    ;; need to expand rule to branches\n                    (let [used-args  (assoc (:used-args frame) rule\n                                       (conj (get (:used-args frame) rule []) call-args))\n                          branches   (expand-rule rule-clause context used-args)]\n                      (recur (concat\n                               (for [branch branches]\n                                 {:prefix-clauses prefix-clauses\n                                  :prefix-context prefix-context\n                                  :clauses        (concatv branch next-clauses)\n                                  :used-args      used-args\n                                  :pending-guards pending-gs})\n                               (next stack))\n                             rel))))))))\n        rel))))\n\n(defn resolve-pattern-lookup-refs [source pattern]\n  (if (satisfies? db/IDB source)\n    (let [[e a v tx] pattern]\n      (->\n        [(if (or (lookup-ref? e) (attr? e)) (db/entid-strict source e) e)\n         a\n         (if (and v (attr? a) (db/ref? source a) (or (lookup-ref? v) (attr? v))) (db/entid-strict source v) v)\n         (if (lookup-ref? tx) (db/entid-strict source tx) tx)]\n        (subvec 0 (count pattern))))\n    pattern))\n\n(defn dynamic-lookup-attrs [source pattern]\n  (let [[e a v tx] pattern]\n    (cond-> #{}\n      (free-var? e) (conj e)\n      (free-var? tx) (conj tx)\n      (and\n        (free-var? v)\n        (not (free-var? a))\n        (db/ref? source a)) (conj v))))\n\n(defn limit-rel [rel vars]\n  (when-some [attrs' (not-empty (select-keys (:attrs rel) vars))]\n    (assoc rel :attrs attrs')))\n\n(defn limit-context [context vars]\n  (assoc context\n    :rels (->> (:rels context)\n               (keep #(limit-rel % vars)))))\n\n(defn bound-vars [context]\n  (into #{} (mapcat #(keys (:attrs %)) (:rels context))))\n\n(defn check-bound [bound vars form]\n  (when-not (set/subset? vars bound)\n    (let [missing (set/difference (set vars) bound)]\n      (raise \"Insufficient bindings: \" missing \" not bound in \" form\n             {:error :query/where\n              :form  form\n              :vars  missing}))))\n\n(defn check-free-same [bound branches form]\n  (let [free (mapv #(set/difference (collect-vars %) bound) branches)]\n    (when-not (apply = free)\n      (raise \"All clauses in 'or' must use same set of free vars, had \" free \" in \" form\n             {:error :query/where\n              :form  form\n              :vars  free}))))\n\n(defn check-free-subset [bound vars branches]\n  (let [free (set (remove bound vars))]\n    (doseq [branch branches]\n      (when-some [missing (not-empty (set/difference free (collect-vars branch)))]\n        (prn branch bound vars free)\n        (raise \"All clauses in 'or' must use same set of free vars, had \" missing \" not bound in \" branch\n          {:error :query/where\n           :form  branch\n           :vars  missing})))))\n\n(defn -resolve-clause\n  ([context clause]\n    (-resolve-clause context clause clause))\n  ([context clause orig-clause]\n   (condp looks-like? clause\n     [[symbol? '*]] ;; predicate [(pred ?a ?b ?c)]\n     (do\n       (check-bound (bound-vars context) (filter free-var? (nfirst clause)) clause)\n       (filter-by-pred context clause))\n     \n     [[symbol? '*] '_] ;; function [(fn ?a ?b) ?res]\n     (do\n       (check-bound (bound-vars context) (filter free-var? (nfirst clause)) clause)\n       (bind-by-fn context clause))\n     \n     [source? '*] ;; source + anything\n     (let [[source-sym & rest] clause]\n       (binding [*implicit-source* (get (:sources context) source-sym)]\n         (-resolve-clause context rest clause)))\n     \n     '[or *] ;; (or ...)\n     (let [[_ & branches] clause\n           _        (check-free-same (bound-vars context) branches clause)\n           contexts (map #(resolve-clause context %) branches)\n           rels     (map #(reduce hash-join (:rels %)) contexts)]\n       (assoc (first contexts) :rels [(reduce sum-rel rels)]))\n     \n     '[or-join [[*] *] *] ;; (or-join [[req-vars] vars] ...)\n     (let [[_ [req-vars & vars] & branches] clause\n           bound (bound-vars context)]\n       (check-bound bound req-vars orig-clause)\n       (check-free-subset bound vars branches)\n       (recur context (list* 'or-join (concat req-vars vars) branches) clause))\n     \n     '[or-join [*] *] ;; (or-join [vars] ...)\n     (let [[_ vars & branches] clause\n           vars         (set vars)\n           _            (check-free-subset (bound-vars context) vars branches)\n           join-context (limit-context context vars)\n           contexts     (map #(-> join-context (resolve-clause %) (limit-context vars)) branches)\n           rels         (map #(reduce hash-join (:rels %)) contexts)\n           sum-rel      (reduce sum-rel rels)]\n       (update context :rels collapse-rels sum-rel))\n     \n     '[and *] ;; (and ...)\n     (let [[_ & clauses] clause]\n       (reduce resolve-clause context clauses))\n     \n     '[not *] ;; (not ...)\n     (let [[_ & clauses] clause\n           bound            (bound-vars context)\n           negation-vars    (collect-vars clauses)\n           _                (when (empty? (set/intersection bound negation-vars))\n                              (raise \"Insufficient bindings: none of \" negation-vars \" is bound in \" orig-clause\n                                {:error :query/where\n                                 :form  orig-clause}))\n           context'         (assoc context :rels [(reduce hash-join (:rels context))])\n           negation-context (reduce resolve-clause context' clauses)\n           negation         (subtract-rel\n                              (single (:rels context'))\n                              (reduce hash-join (:rels negation-context)))]\n       (assoc context' :rels [negation]))\n     \n     '[not-join [*] *] ;; (not-join [vars] ...)\n     (let [[_ vars & clauses] clause\n           bound            (bound-vars context)\n           _                (check-bound bound vars orig-clause)\n           context'         (assoc context :rels [(reduce hash-join (:rels context))])\n           join-context     (limit-context context' vars)\n           negation-context (-> (reduce resolve-clause join-context clauses)\n                                (limit-context vars))\n           negation         (subtract-rel\n                              (single (:rels context'))\n                              (reduce hash-join (:rels negation-context)))]\n       (assoc context' :rels [negation]))\n     \n     '[*] ;; pattern\n     (let [source   *implicit-source*\n           pattern  (resolve-pattern-lookup-refs source clause)\n           relation (lookup-pattern source pattern)]\n       (binding [*lookup-attrs* (if (satisfies? db/IDB source)\n                                  (dynamic-lookup-attrs source pattern)\n                                  *lookup-attrs*)]\n         (update context :rels collapse-rels relation))))))\n\n(defn resolve-clause [context clause]\n  (if (rule? context clause)\n    (if (source? (first clause))\n      (binding [*implicit-source* (get (:sources context) (first clause))]\n        (resolve-clause context (next clause)))\n      (update context :rels collapse-rels (solve-rule context clause)))\n    (-resolve-clause context clause)))\n\n(defn -q [context clauses]\n  (binding [*implicit-source* (get (:sources context) '$)]\n    (reduce resolve-clause context clauses)))\n\n(defn -collect\n  ([context symbols]\n    (let [rels (:rels context)]\n      (-collect [(da/make-array (count symbols))] rels symbols)))\n  ([acc rels symbols]\n    (if-some [rel (first rels)]\n      (let [keep-attrs (select-keys (:attrs rel) symbols)]\n        (if (empty? keep-attrs)\n          (recur acc (next rels) symbols)\n          (let [copy-map (to-array (map #(get keep-attrs %) symbols))\n                len      (count symbols)]\n            (recur (for [#?(:cljs t1\n                            :clj ^{:tag \"[[Ljava.lang.Object;\"} t1) acc\n                         t2 (:tuples rel)]\n                     (let [res (aclone t1)]\n                       (dotimes [i len]\n                         (when-some [idx (aget copy-map i)]\n                           (aset res i (#?(:cljs da/aget :clj get) t2 idx))))\n                       res))\n                   (next rels)\n                   symbols))))\n      acc)))\n\n(defn collect [context symbols]\n  (->> (-collect context symbols)\n       (map vec)\n       set))\n\n(defprotocol IContextResolve\n  (-context-resolve [var context]))\n\n(extend-protocol IContextResolve\n  Variable\n  (-context-resolve [var context]\n    (context-resolve-val context (.-symbol var)))\n  SrcVar\n  (-context-resolve [var context]\n    (get-in context [:sources (.-symbol var)]))\n  PlainSymbol\n  (-context-resolve [var _]\n    (or (get built-in-aggregates (.-symbol var))\n        (resolve-sym (.-symbol var))))\n  Constant\n  (-context-resolve [var _]\n    (.-value var)))\n\n(defn -aggregate [find-elements context tuples]\n  (mapv (fn [element fixed-value i]\n          (if (dp/aggregate? element)\n            (let [f    (-context-resolve (:fn element) context)\n                  args (map #(-context-resolve % context) (butlast (:args element)))\n                  vals (map #(nth % i) tuples)]\n              (apply f (concat args [vals])))\n            fixed-value))\n    find-elements\n    (first tuples)\n    (range)))\n\n(defn- idxs-of [pred coll]\n  (->> (map #(when (pred %1) %2) coll (range))\n       (remove nil?)))\n\n(defn aggregate [find-elements context resultset]\n  (let [group-idxs (idxs-of (complement dp/aggregate?) find-elements)\n        group-fn   (fn [tuple]\n                     (map #(nth tuple %) group-idxs))\n        grouped    (group-by group-fn resultset)]\n    (for [[_ tuples] grouped]\n      (-aggregate find-elements context tuples))))\n\n(defn map* [f xs]\n  (reduce #(conj %1 (f %2)) (empty xs) xs))\n\n(defn tuples->return-map [return-map tuples]\n  (let [symbols (:symbols return-map)\n        idxs    (range 0 (count symbols))]\n    (map*\n      (fn [tuple]\n        (reduce\n          (fn [m i] (assoc m (nth symbols i) (nth tuple i)))\n          {} idxs))\n      tuples)))\n\n(defprotocol IPostProcess\n  (-post-process [find return-map tuples]))\n\n(extend-protocol IPostProcess\n  FindRel\n  (-post-process [_ return-map tuples]\n    (if (nil? return-map)\n      tuples\n      (tuples->return-map return-map tuples)))\n\n  FindColl\n  (-post-process [_ return-map tuples]\n    (into [] (map first) tuples))\n\n  FindScalar\n  (-post-process [_ return-map tuples]\n    (ffirst tuples))\n\n  FindTuple\n  (-post-process [_ return-map tuples]\n    (if (some? return-map)\n      (first (tuples->return-map return-map [(first tuples)]))\n      (first tuples))))\n\n(defn- pull [find-elements context resultset]\n  (let [resolved (for [find find-elements]\n                   (when (dp/pull? find)\n                     [(-context-resolve (:source find) context)\n                      (dpp/parse-pull\n                        (-context-resolve (:pattern find) context))]))]\n    (for [tuple resultset]\n      (mapv (fn [env el]\n              (if env\n                (let [[src spec] env]\n                  (dpa/pull-spec src spec [el] false))\n                el))\n            resolved\n            tuple))))\n\n(def ^:private query-cache (volatile! (datascript.lru/lru lru-cache-size)))\n\n(defn memoized-parse-query [q]\n  (if-some [cached (get @query-cache q nil)]\n    cached\n    (let [qp (dp/parse-query q)]\n      (vswap! query-cache assoc q qp)\n      qp)))\n\n(defn q [q & inputs]\n  (let [parsed-q      (memoized-parse-query q)\n        find          (:qfind parsed-q)\n        find-elements (dp/find-elements find)\n        find-vars     (dp/find-vars find)\n        result-arity  (count find-elements)\n        with          (:qwith parsed-q)\n        ;; TODO utilize parser\n        all-vars      (concat find-vars (map :symbol with))\n        q             (cond-> q\n                        (sequential? q) dp/query->map)\n        wheres        (:where q)\n        context       (-> (Context. [] {} {})\n                        (resolve-ins (:qin parsed-q) inputs))\n        resultset     (-> context\n                        (-q wheres)\n                        (collect all-vars))]\n    (cond->> resultset\n      (:with q)\n        (mapv #(vec (subvec % 0 result-arity)))\n      (some dp/aggregate? find-elements)\n        (aggregate find-elements context)\n      (some dp/pull? find-elements)\n        (pull find-elements context)\n      true\n        (-post-process find (:qreturn-map parsed-q)))))\n"]}