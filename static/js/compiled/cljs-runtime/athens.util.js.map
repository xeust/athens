{"version":3,"sources":["athens/util.cljs"],"mappings":"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","names":["athens.util/gen-block-uid","cljs.core.subs","cljs.core/random-uuid","athens.util/recursively-modify-block-for-embed","block","embed-id","com.rpl.specter.impl/compiled-transform*","info__72244__auto__","athens.util/pathcache86611","info86612","com.rpl.specter.impl/magic-precompilation","com.rpl.specter.impl/->FnInvocation","com.rpl.specter.impl/->VarUse","athens.util/specter-recursive-path","com.rpl.specter.impl/->SpecialFormUse","p1__86607#","precompiled86613","com.rpl.specter.impl/cached-path-info-precompiled","dynamic?__72245__auto__","com.rpl.specter.impl/cached-path-info-dynamic?","G__86616","cljs.core/contains?","p__86617","map__86618","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","uid","cljs.core.assoc","athens.util/scroll-top!","element","pos","athens.util/scroll-if-needed","container","and__4115__auto__","e-top","e-height","e-bottom","cs-top","c-height","cs-bottom","var_args","G__86624","athens.util/mouse-offset","js/Error","e","athens.util.mouse_offset","rect","offset-x","offset-y","athens.util/vertical-center","el","athens.util/is-beyond-rect?","el-box","cont-box","athens.util/scroll-into-view","align-top?","athens.util/get-dataset-uid","athens.util/get-caret-position","target","selectionEnd","cljs.core.js__GT_clj","js/module$textarea","athens.util/dom-parents","node","nodes","cljs.core/reverse","cljs.core.conj","athens.util/common-ancestor","node1","node2","p1","p2","cljs.core.not_EQ_","cljs.core/first","n","cljs.core/count","i","cljs.core.nth","cljs.core._EQ_","athens.util/destruct-key-down","key","ctrl","meta","shift","alt","athens.util/date-col-format","tick.alpha.api.formatter","athens.util/US-format","athens.util/title-format","athens.util/now-ts","js/Date","G__86640","athens.util/get-day","athens.util.get_day","offset","day","tick.alpha.api._","tick.alpha.api.date_time","tick.alpha.api/new-duration","tick.alpha.api.format","date","tick.alpha.api/at","athens.util/date-string","ts","cljs.core/not","tick.alpha.api.instant","x","clojure.string/replace","athens.util/uid-to-date","e86655","vec__86656","m","d","y","clojure.string.split","rejoin","clojure.string.join","tick.alpha.api.date","js/Object","_","athens.util/is-daily-note","cljs.core/boolean","athens.util/regex-esc-char-map","esc-chars","cljs.core/zipmap","p1__86663#","cljs.core.map","athens.util/escape-str","str","clojure.string/escape","afn","com.rpl.specter.impl/local-declarepath","com.rpl.specter.impl/providepath*","athens.util/pathcache86665","info86666","com.rpl.specter/cond-path","cljs.core/map?","com.rpl.specter/multi-path","com.rpl.specter/MAP-VALS","com.rpl.specter.impl/->LocalSym","cljs.core/sequential?","com.rpl.specter/ALL","precompiled86667","G__86677","p","athens.util/get-os","os","js/window","cljs.core/re-find","athens.util/shortcut-key?","or__4126__auto__","athens.util/re-frame-10x-open?","athens.config/debug?","el-10x","goog.dom/getElement","display-10x","athens.util/open-10x","js/document.querySelector","goog.dom/setProperties","cljs.core/clj->js","athens.util/hide-10x","athens.util/toggle-10x","open?","athens.util/electron?","user-agent","js/navigator","athens.util/athens-version","js/require","athens.util/get-window-size","ws","js/localStorage.getItem","p1__86697#","js/parseInt"],"sourcesContent":["(ns athens.util\n  (:require\n    [\"/textarea\" :as getCaretCoordinates]\n    [athens.config :as config]\n    [clojure.string :as string]\n    [com.rpl.specter :as s]\n    [goog.dom :refer [getElement setProperties]]\n    [posh.reagent :refer [#_pull]]\n    [tick.alpha.api :as t]\n    [tick.locale-en-us])\n  (:require-macros\n    [com.rpl.specter :refer [recursive-path]]))\n\n\n(defn gen-block-uid\n  []\n  (subs (str (random-uuid)) 27))\n\n\n;; embed block\n\n(declare specter-recursive-path)\n\n\n(defn recursively-modify-block-for-embed\n  \"Modify the block and all the block children to have same embed-id for\n   referencing the embed block rather than block in original page\"\n  [block embed-id]\n  (s/transform\n    (specter-recursive-path #(contains? % :block/uid))\n    (fn [{:block/keys [uid] :as block}]\n      (assoc block :block/uid (str uid \"-embed-\" embed-id)\n                   :block/original-uid uid))\n    block))\n\n\n;; -- DOM ----------------------------------------------------------------\n\n;; TODO: move all these DOM utilities to a .cljs file instead of cljc\n(defn scroll-top! [element pos]\n  (when pos\n    (set! (.. element -scrollTop) pos)))\n\n\n(defn scroll-if-needed\n  ;; https://stackoverflow.com/a/45851497\n  [element container]\n  (when (and element container)\n    (let [e-top (.. element -offsetTop)\n          e-height (.. element -offsetHeight)\n          e-bottom (+ e-top e-height)\n          cs-top (.. container -scrollTop)\n          c-height (.. container -offsetHeight)\n          cs-bottom (+ cs-top c-height)]\n      (->> (cond\n             (< e-top cs-top)       e-top\n             (< cs-bottom e-bottom) (- e-bottom c-height))\n           (scroll-top! container)))))\n\n\n(defn mouse-offset\n  \"Finds offset between mouse event and container. If container is not passed, use target as container.\"\n  ([e]\n   (mouse-offset e (.. e -target)))\n  ([e container]\n   (let [rect (.. container getBoundingClientRect)\n         offset-x (- (.. e -pageX) (.. rect -left))\n         offset-y (- (.. e -pageY) (.. rect -top))]\n     {:x offset-x :y offset-y})))\n\n\n(defn vertical-center\n  [el]\n  (let [rect (.. el getBoundingClientRect)]\n    (-> (- (.. rect -bottom)\n           (.. rect -top))\n        (/ 2))))\n\n\n(defn is-beyond-rect?\n  \"Checks if any part of the element is above or below the container's bounding rect\"\n  [element container]\n  (when (and element container)\n    (let [el-box (.. element getBoundingClientRect)\n          cont-box (.. container getBoundingClientRect)]\n      (or\n        (> (.. el-box -bottom) (.. cont-box -bottom))\n        (< (.. el-box -top) (.. cont-box -top))))))\n\n\n(defn scroll-into-view [element container align-top?]\n  (when (is-beyond-rect? element container)\n    (.. element (scrollIntoView align-top? {:behavior \"auto\"}))))\n\n\n(defn get-dataset-uid\n  [el]\n  (let [block (when el (.. el (closest \".block-container\")))\n        uid (when block (.. block -dataset -uid))]\n    uid))\n\n\n(defn get-caret-position\n  [target]\n  (let [selectionEnd (.. target -selectionEnd)]\n    (js->clj (getCaretCoordinates target selectionEnd) :keywordize-keys true)))\n\n\n(defn dom-parents\n  \"This and common-ancestor taken from https://stackoverflow.com/a/5350888.\"\n  [node]\n  (loop [nodes [node]\n         node node]\n    (if (nil? node)\n      (reverse nodes)\n      (recur (conj nodes node) (.-parentNode node)))))\n\n\n(defn common-ancestor\n  [node1 node2]\n  (let [p1 (dom-parents node1)\n        p2 (dom-parents node2)]\n    (if (not= (first p1) (first p2))\n      (throw (js/Error. \"No common ancestor!\"))\n      (let [n (dec (count p1))]\n        (loop [i 0]\n          (cond\n            (not= (nth p1 i nil) (nth p2 i nil))\n            (nth p1 (dec i))\n\n            (= i n)\n            (js/Error. \"No common ancestor after n loops!\")\n\n            :else\n            (recur (inc i))))))))\n\n\n(defn destruct-key-down\n  [e]\n  (let [key   (.. e -keyCode)\n        ctrl  (.. e -ctrlKey)\n        meta  (.. e -metaKey)\n        shift (.. e -shiftKey)\n        alt   (.. e -altKey)]\n    {:key-code key\n     :ctrl     ctrl\n     :meta     meta\n     :shift    shift\n     :alt      alt}))\n\n\n;; -- Date and Time ------------------------------------------------------\n\n\n(def date-col-format (t/formatter \"LLLL dd, yyyy h':'mma\"))\n(def US-format (t/formatter \"MM-dd-yyyy\"))\n(def title-format (t/formatter \"LLLL dd, yyyy\"))\n\n\n(defn now-ts\n  []\n  (-> (js/Date.) .getTime))\n\n\n(defn get-day\n  \"Returns today's date or a date OFFSET days before today\"\n  ([] (get-day 0))\n  ([offset]\n   (let [day (t/-\n               (t/date-time)\n               (t/new-duration offset :days))]\n     {:uid   (t/format US-format day)\n      :title (t/format title-format day)}))\n  ([date offset]\n   (let [day (t/-\n               (-> date (t/at \"0\"))\n               (t/new-duration offset :days))]\n     {:uid   (t/format US-format day)\n      :title (t/format title-format day)})))\n\n\n(defn date-string\n  [ts]\n  (if (not ts)\n    [:span \"(unknown date)\"]\n    (as->\n      (t/instant ts) x\n      (t/date-time x)\n      (t/format date-col-format x)\n      (string/replace x #\"AM\" \"am\")\n      (string/replace x #\"PM\" \"pm\"))))\n\n\n(defn uid-to-date\n  [uid]\n  (try\n    (let [[m d y] (string/split uid \"-\")\n          rejoin (string/join \"-\" [y m d])]\n      (t/date rejoin))\n    (catch js/Object _ nil)))\n\n\n(defn is-daily-note\n  [uid]\n  (boolean (uid-to-date uid)))\n\n\n;; -- Regex -----------------------------------------------------------\n\n;; https://stackoverflow.com/a/11672480\n(def regex-esc-char-map\n  (let [esc-chars \"()*&^%$#![]\"]\n    (zipmap esc-chars\n            (map #(str \"\\\\\" %) esc-chars))))\n\n\n(defn escape-str\n  \"Take a string and escape all regex special characters in it\"\n  [str]\n  (string/escape str regex-esc-char-map))\n\n\n;; -- specter --------------------------------------------------------\n\n\n(defn specter-recursive-path\n  \"Navigates across maps and lists to find the sub that\n   satisfies the function\"\n  [afn]\n  (recursive-path [] p\n    (s/cond-path\n      map? (s/multi-path [s/MAP-VALS p] afn)\n      sequential? [s/ALL p])))\n\n;; OS\n\n(defn get-os\n  []\n  (let [os (.. js/window -navigator -appVersion)]\n    (cond\n      (re-find #\"Windows\" os) :windows\n      (re-find #\"Linux\" os) :linux\n      (re-find #\"Mac\" os) :mac)))\n\n\n(defn shortcut-key?\n  \"Use meta for mac, ctrl for others.\"\n  [meta ctrl]\n  (let [os (get-os)]\n    (or (and (= os :mac) meta)\n        (and (= os :windows) ctrl)\n        (and (= os :linux) ctrl))))\n\n\n;; re-frame-10x\n\n(defn re-frame-10x-open?\n  []\n  (when config/debug?\n    (let [el-10x (getElement \"--re-frame-10x--\")\n          display-10x (.. el-10x -style -display)]\n      (not (= \"none\" display-10x)))))\n\n\n(defn open-10x\n  []\n  (when config/debug?\n    (let [el (js/document.querySelector \"#--re-frame-10x--\")]\n      (setProperties el (clj->js {\"style\" \"display: block\"})))))\n\n\n(defn hide-10x\n  []\n  (when config/debug?\n    (let [el (js/document.querySelector \"#--re-frame-10x--\")]\n      (setProperties el (clj->js {\"style\" \"display: none\"})))))\n\n\n(defn toggle-10x\n  []\n  (when config/debug?\n    (let [open? (re-frame-10x-open?)]\n      (if open?\n        (hide-10x)\n        (open-10x)))))\n\n\n(defn electron?\n  []\n  (let [user-agent (.. js/navigator -userAgent toLowerCase)]\n    (boolean (re-find #\"electron\" user-agent))))\n\n\n;;(goog-define COMMIT_URL \"\")\n\n\n(defn athens-version\n  []\n  (cond\n    (electron?) (.. (js/require \"electron\") -remote -app getVersion)))\n    ;;(not (string/blank? COMMIT_URL)) COMMIT_URL\n    ;;:else \"Web\"))\n\n\n;; Window\n\n(defn get-window-size\n  \"Reads window size from local-storage and returns the values as a vector\"\n  []\n  (let [ws (js/localStorage.getItem \"ws/window-size\")]\n    (if (nil? ws)\n      '[800 600]\n      (map #(js/parseInt %) (string/split ws \",\")))))\n"]}