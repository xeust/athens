{"version":3,"sources":["athens/views/textinput.cljs"],"mappings":";AAYA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKA,AAEK,AAAA,AAACC,AACK,AAAA,AAACA,AAEF,AAAA,AAACA,AAGU,AAAA,AAACA,AAIkB,AAAA,AAAcC,AACf,AAAA,AAAIC,AAGW,AAAA,AAAIA;AAG/D,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKC;AAQL,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKC,AAOK,AAAA,AAACJ,AACC,AAAA,AAAcC;AAO1B,AAAA,AAAAI,AAAMM;AAAN,AAAA,AAAAL,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAAA,AACiCS;AADjC,AAAAL,AAAAJ,AAAA,AACWM;AADX,AAAAF,AAAAJ,AAAA,AACiBO;AADjB,AAAAH,AAAAJ,AAAA,AACsBQ;AADtB,AAEE,AAAME,AAAO,AAAA,AAAA,AAAA,AAACC,AAAOF;AAArB,AACE,AAAIF;AAAJ,AAAA,AAAA,AAAA,AAAA,AAAA,AACQ,AAACK,AAAUf,AACR,AAACe,AAAU,AAACC,AAAMpB,AAAgBa,AACvB,AAAA,AAAA,AAACO,AAAMH,AAAe,AAACI,AAAI,AAACC,AAAQP,AAChD,AAACI,AAAUd,AAAYS;;AAJjC,AAAA,AAKU,AAACK,AAAU,AAACC,AAAMpB,AAAgBa,AACvB,AAAA,AAAA,AAACO,AAAMH,AAAe,AAACI,AAAI,AAACC,AAAQP","names":["athens.views.textinput/textinput-style","athens.style.color","athens.style/OPACITIES","athens.style/DEPTH-SHADOWS","athens.views.textinput/input-wrap","athens.views.textinput/input-icon","p__96928","map__96929","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","athens.views.textinput/textinput","style","icon","class","props","props-","cljs.core.dissoc","stylefy.core.use_style","cljs.core.merge","cljs.core/vec","cljs.core/flatten"],"sourcesContent":["(ns athens.views.textinput\n  (:require\n    [athens.db]\n    [athens.style :refer [color OPACITIES DEPTH-SHADOWS]]\n    [cljsjs.react]\n    [cljsjs.react.dom]\n    [stylefy.core :as stylefy :refer [use-style]]))\n\n\n;;; Styles\n\n\n(def textinput-style\n  {:min-height \"2rem\"\n   :color (color :body-text-color)\n   :caret-color (color :link-color)\n   :border-radius \"0.25rem\"\n   :background (color :background-minus-1)\n   :padding \"0.125rem 0.5rem\"\n   :flex-basis \"100%\"\n   :border [[\"1px solid \" (color :border-color)]]\n   :transition-property \"box-shadow, border, background\"\n   :transition-duration \"0.1s\"\n   :transition-timing-function \"ease\"\n   ::stylefy/manual [[:placeholder {:opacity (:opacity-med OPACITIES)}]\n                     [:&:hover {:box-shadow (:4 DEPTH-SHADOWS)}]\n                     [:&:focus :&:focus:hover {:outline \"none\"\n                                               :border \"1px solid\"\n                                               :box-shadow (:8 DEPTH-SHADOWS)}]]})\n\n\n(def input-wrap\n  {:position \"relative\"\n   :display \"inline-flex\"\n   :align-items \"stretch\"\n   :justify-content \"stretch\"\n   ::stylefy/manual [[:input {:padding-left \"1.75rem\"}]]})\n\n\n(def input-icon\n  {:position \"absolute\"\n   :top \"50%\"\n   :display \"flex\"\n   :pointer-events \"none\"\n   :transform \"translateY(-50%)\"\n   :left \"0.375rem\"\n   :color (color :body-text-color)\n   :opacity (:opacity-med OPACITIES)\n   ::stylefy/manual [[:svg {:font-size \"20px\"}]]})\n\n\n;;; Components\n\n\n(defn textinput\n  [{:keys [style icon class] :as props}]\n  (let [props- (dissoc props :style :icon :class)]\n    (if icon\n      [:div (use-style input-wrap)\n       [:input (use-style (merge textinput-style style)\n                          (merge props- {:class (vec (flatten class))}))]\n       [:span (use-style input-icon) icon]]\n      [:input (use-style (merge textinput-style style)\n                         (merge props- {:class (vec (flatten class))}))])))\n"]}