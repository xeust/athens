{
"version":3,
"file":"module$node_modules$$sentry$tracing$dist$browser$web_vitals$getTTFB.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAe,mEAAf,CAAwF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAgBhIC,MAAA,CAAOC,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAAEG,MAAO,CAAA,CAAT,CAA7C,CACA,KAAIC,aAAeN,OAAA,CAAQ,4EAAR,CAAnB,CACIO,UAAYA,QAAS,CAACC,QAAD,CAAW,CACJ,UAA5B,GAAIC,QAAJ,CAAaC,UAAb,CAEIC,UAAA,CAAWH,QAAX,CAAqB,CAArB,CAFJ,CAMII,gBAAA,CAAiB,UAAjB,CAA6BJ,QAA7B,CAP4B,CA2BpCN,QAAA,CAAQW,OAAR,CAAkBC,QAAS,CAACC,QAAD,CAAW,CAClC,IAAIC,OAASV,YAAA,CAAaW,UAAb,CAAwB,MAAxB,CACbV,UAAA,CAAU,QAAS,EAAG,CAClB,GAAI,CAEsB,IAAA,eAAA;GAAA,EAAA,eAAA,CAAA,WAAA,CAAA,gBAAA,CAAA,YAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAjB9B,IAAIW,OAASC,WAATD,CAAqBA,MAAzB,CACIE,gBAAkB,CAClBC,UAAW,YADO,CAElBC,UAAW,CAFO,CADtB,CAKSC,GAAT,KAASA,GAAT,GAAgBL,OAAhB,CACgB,iBAAZ,GAAIK,GAAJ,EAAyC,QAAzC,GAAiCA,GAAjC,GACIH,eAAA,CAAgBG,GAAhB,CADJ,CAC2BC,IAAA,CAAKC,GAAL,CAASP,MAAA,CAAOK,GAAP,CAAT,CAAuBL,MAAvB,CAA8BQ,eAA9B,CAA+C,CAA/C,CAD3B,CAIJ,gBAAA,CAAON,eAOuB,CACtBJ,MAAA,CAAOX,KAAP,CAAeW,MAAf,CAAsBW,KAAtB,CAA8BP,eAA9B,CAA8CQ,aAC9CZ,OAAA,CAAOa,OAAP,CAAiB,CAACT,eAAD,CACjBJ,OAAA,CAAOc,OAAP,CAAiB,CAAA,CACjBf,SAAA,CAASC,MAAT,CANA,CAQJ,MAAOe,KAAP,CAAc,EATI,CAAtB,CAFkC,CA7C0F;",
"sources":["node_modules/@sentry/tracing/dist/browser/web-vitals/getTTFB.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$sentry$tracing$dist$browser$web_vitals$getTTFB\"] = function(global,require,module,exports) {\n/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar initMetric_1 = require(\"./lib/initMetric\");\nvar afterLoad = function (callback) {\n    if (document.readyState === 'complete') {\n        // Queue a task so the callback runs after `loadEventEnd`.\n        setTimeout(callback, 0);\n    }\n    else {\n        // Use `pageshow` so the callback runs after `loadEventEnd`.\n        addEventListener('pageshow', callback);\n    }\n};\nvar getNavigationEntryFromPerformanceTiming = function () {\n    // Really annoying that TypeScript errors when using `PerformanceTiming`.\n    // Note: browsers that do not support navigation entries will fall back to using performance.timing\n    // (with the timestamps converted from epoch time to DOMHighResTimeStamp).\n    // eslint-disable-next-line deprecation/deprecation\n    var timing = performance.timing;\n    var navigationEntry = {\n        entryType: 'navigation',\n        startTime: 0,\n    };\n    for (var key in timing) {\n        if (key !== 'navigationStart' && key !== 'toJSON') {\n            navigationEntry[key] = Math.max(timing[key] - timing.navigationStart, 0);\n        }\n    }\n    return navigationEntry;\n};\nexports.getTTFB = function (onReport) {\n    var metric = initMetric_1.initMetric('TTFB');\n    afterLoad(function () {\n        try {\n            // Use the NavigationTiming L2 entry if available.\n            var navigationEntry = performance.getEntriesByType('navigation')[0] || getNavigationEntryFromPerformanceTiming();\n            metric.value = metric.delta = navigationEntry.responseStart;\n            metric.entries = [navigationEntry];\n            metric.isFinal = true;\n            onReport(metric);\n        }\n        catch (error) {\n            // Do nothing.\n        }\n    });\n};\n//# sourceMappingURL=getTTFB.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","initMetric_1","afterLoad","callback","document","readyState","setTimeout","addEventListener","getTTFB","exports.getTTFB","onReport","metric","initMetric","timing","performance","navigationEntry","entryType","startTime","key","Math","max","navigationStart","delta","responseStart","entries","isFinal","error"]
}
