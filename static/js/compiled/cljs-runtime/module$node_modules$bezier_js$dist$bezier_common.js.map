{
"version":3,
"file":"module$node_modules$bezier_js$dist$bezier_common.js",
"lineCount":52,
"mappings":"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",
"sources":["node_modules/bezier-js/dist/bezier.common.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$bezier_js$dist$bezier_common\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Bezier = void 0;\n// math-inlining.\nconst {\n  abs,\n  cos,\n  sin,\n  acos,\n  atan2,\n  sqrt,\n  pow\n} = Math; // cube root function yielding real roots\n\nfunction crt(v) {\n  return v < 0 ? -pow(-v, 1 / 3) : pow(v, 1 / 3);\n} // trig constants\n\n\nconst pi = Math.PI,\n      tau = 2 * pi,\n      quart = pi / 2,\n      // float precision significant decimal\nepsilon = 0.000001,\n      // extremas used in bbox calculation and similar algorithms\nnMax = Number.MAX_SAFE_INTEGER || 9007199254740991,\n      nMin = Number.MIN_SAFE_INTEGER || -9007199254740991,\n      // a zero coordinate, which is surprisingly useful\nZERO = {\n  x: 0,\n  y: 0,\n  z: 0\n}; // Bezier utility functions\n\nconst utils = {\n  // Legendre-Gauss abscissae with n=24 (x_i values, defined at i=n as the roots of the nth order Legendre polynomial Pn(x))\n  Tvalues: [-0.0640568928626056260850430826247450385909, 0.0640568928626056260850430826247450385909, -0.1911188674736163091586398207570696318404, 0.1911188674736163091586398207570696318404, -0.3150426796961633743867932913198102407864, 0.3150426796961633743867932913198102407864, -0.4337935076260451384870842319133497124524, 0.4337935076260451384870842319133497124524, -0.5454214713888395356583756172183723700107, 0.5454214713888395356583756172183723700107, -0.6480936519369755692524957869107476266696, 0.6480936519369755692524957869107476266696, -0.7401241915785543642438281030999784255232, 0.7401241915785543642438281030999784255232, -0.8200019859739029219539498726697452080761, 0.8200019859739029219539498726697452080761, -0.8864155270044010342131543419821967550873, 0.8864155270044010342131543419821967550873, -0.9382745520027327585236490017087214496548, 0.9382745520027327585236490017087214496548, -0.9747285559713094981983919930081690617411, 0.9747285559713094981983919930081690617411, -0.9951872199970213601799974097007368118745, 0.9951872199970213601799974097007368118745],\n  // Legendre-Gauss weights with n=24 (w_i values, defined by a function linked to in the Bezier primer article)\n  Cvalues: [0.1279381953467521569740561652246953718517, 0.1279381953467521569740561652246953718517, 0.1258374563468282961213753825111836887264, 0.1258374563468282961213753825111836887264, 0.121670472927803391204463153476262425607, 0.121670472927803391204463153476262425607, 0.1155056680537256013533444839067835598622, 0.1155056680537256013533444839067835598622, 0.1074442701159656347825773424466062227946, 0.1074442701159656347825773424466062227946, 0.0976186521041138882698806644642471544279, 0.0976186521041138882698806644642471544279, 0.086190161531953275917185202983742667185, 0.086190161531953275917185202983742667185, 0.0733464814110803057340336152531165181193, 0.0733464814110803057340336152531165181193, 0.0592985849154367807463677585001085845412, 0.0592985849154367807463677585001085845412, 0.0442774388174198061686027482113382288593, 0.0442774388174198061686027482113382288593, 0.0285313886289336631813078159518782864491, 0.0285313886289336631813078159518782864491, 0.0123412297999871995468056670700372915759, 0.0123412297999871995468056670700372915759],\n  arcfn: function (t, derivativeFn) {\n    const d = derivativeFn(t);\n    let l = d.x * d.x + d.y * d.y;\n\n    if (typeof d.z !== \"undefined\") {\n      l += d.z * d.z;\n    }\n\n    return sqrt(l);\n  },\n  compute: function (t, points, _3d) {\n    // shortcuts\n    if (t === 0) {\n      points[0].t = 0;\n      return points[0];\n    }\n\n    const order = points.length - 1;\n\n    if (t === 1) {\n      points[order].t = 1;\n      return points[order];\n    }\n\n    const mt = 1 - t;\n    let p = points; // constant?\n\n    if (order === 0) {\n      points[0].t = t;\n      return points[0];\n    } // linear?\n\n\n    if (order === 1) {\n      const ret = {\n        x: mt * p[0].x + t * p[1].x,\n        y: mt * p[0].y + t * p[1].y,\n        t: t\n      };\n\n      if (_3d) {\n        ret.z = mt * p[0].z + t * p[1].z;\n      }\n\n      return ret;\n    } // quadratic/cubic curve?\n\n\n    if (order < 4) {\n      let mt2 = mt * mt,\n          t2 = t * t,\n          a,\n          b,\n          c,\n          d = 0;\n\n      if (order === 2) {\n        p = [p[0], p[1], p[2], ZERO];\n        a = mt2;\n        b = mt * t * 2;\n        c = t2;\n      } else if (order === 3) {\n        a = mt2 * mt;\n        b = mt2 * t * 3;\n        c = mt * t2 * 3;\n        d = t * t2;\n      }\n\n      const ret = {\n        x: a * p[0].x + b * p[1].x + c * p[2].x + d * p[3].x,\n        y: a * p[0].y + b * p[1].y + c * p[2].y + d * p[3].y,\n        t: t\n      };\n\n      if (_3d) {\n        ret.z = a * p[0].z + b * p[1].z + c * p[2].z + d * p[3].z;\n      }\n\n      return ret;\n    } // higher order curves: use de Casteljau's computation\n\n\n    const dCpts = JSON.parse(JSON.stringify(points));\n\n    while (dCpts.length > 1) {\n      for (let i = 0; i < dCpts.length - 1; i++) {\n        dCpts[i] = {\n          x: dCpts[i].x + (dCpts[i + 1].x - dCpts[i].x) * t,\n          y: dCpts[i].y + (dCpts[i + 1].y - dCpts[i].y) * t\n        };\n\n        if (typeof dCpts[i].z !== \"undefined\") {\n          dCpts[i] = dCpts[i].z + (dCpts[i + 1].z - dCpts[i].z) * t;\n        }\n      }\n\n      dCpts.splice(dCpts.length - 1, 1);\n    }\n\n    dCpts[0].t = t;\n    return dCpts[0];\n  },\n  computeWithRatios: function (t, points, ratios, _3d) {\n    const mt = 1 - t,\n          r = ratios,\n          p = points;\n    let f1 = r[0],\n        f2 = r[1],\n        f3 = r[2],\n        f4 = r[3],\n        d; // spec for linear\n\n    f1 *= mt;\n    f2 *= t;\n\n    if (p.length === 2) {\n      d = f1 + f2;\n      return {\n        x: (f1 * p[0].x + f2 * p[1].x) / d,\n        y: (f1 * p[0].y + f2 * p[1].y) / d,\n        z: !_3d ? false : (f1 * p[0].z + f2 * p[1].z) / d,\n        t: t\n      };\n    } // upgrade to quadratic\n\n\n    f1 *= mt;\n    f2 *= 2 * mt;\n    f3 *= t * t;\n\n    if (p.length === 3) {\n      d = f1 + f2 + f3;\n      return {\n        x: (f1 * p[0].x + f2 * p[1].x + f3 * p[2].x) / d,\n        y: (f1 * p[0].y + f2 * p[1].y + f3 * p[2].y) / d,\n        z: !_3d ? false : (f1 * p[0].z + f2 * p[1].z + f3 * p[2].z) / d,\n        t: t\n      };\n    } // upgrade to cubic\n\n\n    f1 *= mt;\n    f2 *= 1.5 * mt;\n    f3 *= 3 * mt;\n    f4 *= t * t * t;\n\n    if (p.length === 4) {\n      d = f1 + f2 + f3 + f4;\n      return {\n        x: (f1 * p[0].x + f2 * p[1].x + f3 * p[2].x + f4 * p[3].x) / d,\n        y: (f1 * p[0].y + f2 * p[1].y + f3 * p[2].y + f4 * p[3].y) / d,\n        z: !_3d ? false : (f1 * p[0].z + f2 * p[1].z + f3 * p[2].z + f4 * p[3].z) / d,\n        t: t\n      };\n    }\n  },\n  derive: function (points, _3d) {\n    const dpoints = [];\n\n    for (let p = points, d = p.length, c = d - 1; d > 1; d--, c--) {\n      const list = [];\n\n      for (let j = 0, dpt; j < c; j++) {\n        dpt = {\n          x: c * (p[j + 1].x - p[j].x),\n          y: c * (p[j + 1].y - p[j].y)\n        };\n\n        if (_3d) {\n          dpt.z = c * (p[j + 1].z - p[j].z);\n        }\n\n        list.push(dpt);\n      }\n\n      dpoints.push(list);\n      p = list;\n    }\n\n    return dpoints;\n  },\n  between: function (v, m, M) {\n    return m <= v && v <= M || utils.approximately(v, m) || utils.approximately(v, M);\n  },\n  approximately: function (a, b, precision) {\n    return abs(a - b) <= (precision || epsilon);\n  },\n  length: function (derivativeFn) {\n    const z = 0.5,\n          len = utils.Tvalues.length;\n    let sum = 0;\n\n    for (let i = 0, t; i < len; i++) {\n      t = z * utils.Tvalues[i] + z;\n      sum += utils.Cvalues[i] * utils.arcfn(t, derivativeFn);\n    }\n\n    return z * sum;\n  },\n  map: function (v, ds, de, ts, te) {\n    const d1 = de - ds,\n          d2 = te - ts,\n          v2 = v - ds,\n          r = v2 / d1;\n    return ts + d2 * r;\n  },\n  lerp: function (r, v1, v2) {\n    const ret = {\n      x: v1.x + r * (v2.x - v1.x),\n      y: v1.y + r * (v2.y - v1.y)\n    };\n\n    if (!!v1.z && !!v2.z) {\n      ret.z = v1.z + r * (v2.z - v1.z);\n    }\n\n    return ret;\n  },\n  pointToString: function (p) {\n    let s = p.x + \"/\" + p.y;\n\n    if (typeof p.z !== \"undefined\") {\n      s += \"/\" + p.z;\n    }\n\n    return s;\n  },\n  pointsToString: function (points) {\n    return \"[\" + points.map(utils.pointToString).join(\", \") + \"]\";\n  },\n  copy: function (obj) {\n    return JSON.parse(JSON.stringify(obj));\n  },\n  angle: function (o, v1, v2) {\n    const dx1 = v1.x - o.x,\n          dy1 = v1.y - o.y,\n          dx2 = v2.x - o.x,\n          dy2 = v2.y - o.y,\n          cross = dx1 * dy2 - dy1 * dx2,\n          dot = dx1 * dx2 + dy1 * dy2;\n    return atan2(cross, dot);\n  },\n  // round as string, to avoid rounding errors\n  round: function (v, d) {\n    const s = \"\" + v;\n    const pos = s.indexOf(\".\");\n    return parseFloat(s.substring(0, pos + 1 + d));\n  },\n  dist: function (p1, p2) {\n    const dx = p1.x - p2.x,\n          dy = p1.y - p2.y;\n    return sqrt(dx * dx + dy * dy);\n  },\n  closest: function (LUT, point) {\n    let mdist = pow(2, 63),\n        mpos,\n        d;\n    LUT.forEach(function (p, idx) {\n      d = utils.dist(point, p);\n\n      if (d < mdist) {\n        mdist = d;\n        mpos = idx;\n      }\n    });\n    return {\n      mdist: mdist,\n      mpos: mpos\n    };\n  },\n  abcratio: function (t, n) {\n    // see ratio(t) note on http://pomax.github.io/bezierinfo/#abc\n    if (n !== 2 && n !== 3) {\n      return false;\n    }\n\n    if (typeof t === \"undefined\") {\n      t = 0.5;\n    } else if (t === 0 || t === 1) {\n      return t;\n    }\n\n    const bottom = pow(t, n) + pow(1 - t, n),\n          top = bottom - 1;\n    return abs(top / bottom);\n  },\n  projectionratio: function (t, n) {\n    // see u(t) note on http://pomax.github.io/bezierinfo/#abc\n    if (n !== 2 && n !== 3) {\n      return false;\n    }\n\n    if (typeof t === \"undefined\") {\n      t = 0.5;\n    } else if (t === 0 || t === 1) {\n      return t;\n    }\n\n    const top = pow(1 - t, n),\n          bottom = pow(t, n) + top;\n    return top / bottom;\n  },\n  lli8: function (x1, y1, x2, y2, x3, y3, x4, y4) {\n    const nx = (x1 * y2 - y1 * x2) * (x3 - x4) - (x1 - x2) * (x3 * y4 - y3 * x4),\n          ny = (x1 * y2 - y1 * x2) * (y3 - y4) - (y1 - y2) * (x3 * y4 - y3 * x4),\n          d = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);\n\n    if (d == 0) {\n      return false;\n    }\n\n    return {\n      x: nx / d,\n      y: ny / d\n    };\n  },\n  lli4: function (p1, p2, p3, p4) {\n    const x1 = p1.x,\n          y1 = p1.y,\n          x2 = p2.x,\n          y2 = p2.y,\n          x3 = p3.x,\n          y3 = p3.y,\n          x4 = p4.x,\n          y4 = p4.y;\n    return utils.lli8(x1, y1, x2, y2, x3, y3, x4, y4);\n  },\n  lli: function (v1, v2) {\n    return utils.lli4(v1, v1.c, v2, v2.c);\n  },\n  makeline: function (p1, p2) {\n    const x1 = p1.x,\n          y1 = p1.y,\n          x2 = p2.x,\n          y2 = p2.y,\n          dx = (x2 - x1) / 3,\n          dy = (y2 - y1) / 3;\n    return new Bezier(x1, y1, x1 + dx, y1 + dy, x1 + 2 * dx, y1 + 2 * dy, x2, y2);\n  },\n  findbbox: function (sections) {\n    let mx = nMax,\n        my = nMax,\n        MX = nMin,\n        MY = nMin;\n    sections.forEach(function (s) {\n      const bbox = s.bbox();\n      if (mx > bbox.x.min) mx = bbox.x.min;\n      if (my > bbox.y.min) my = bbox.y.min;\n      if (MX < bbox.x.max) MX = bbox.x.max;\n      if (MY < bbox.y.max) MY = bbox.y.max;\n    });\n    return {\n      x: {\n        min: mx,\n        mid: (mx + MX) / 2,\n        max: MX,\n        size: MX - mx\n      },\n      y: {\n        min: my,\n        mid: (my + MY) / 2,\n        max: MY,\n        size: MY - my\n      }\n    };\n  },\n  shapeintersections: function (s1, bbox1, s2, bbox2, curveIntersectionThreshold) {\n    if (!utils.bboxoverlap(bbox1, bbox2)) return [];\n    const intersections = [];\n    const a1 = [s1.startcap, s1.forward, s1.back, s1.endcap];\n    const a2 = [s2.startcap, s2.forward, s2.back, s2.endcap];\n    a1.forEach(function (l1) {\n      if (l1.virtual) return;\n      a2.forEach(function (l2) {\n        if (l2.virtual) return;\n        const iss = l1.intersects(l2, curveIntersectionThreshold);\n\n        if (iss.length > 0) {\n          iss.c1 = l1;\n          iss.c2 = l2;\n          iss.s1 = s1;\n          iss.s2 = s2;\n          intersections.push(iss);\n        }\n      });\n    });\n    return intersections;\n  },\n  makeshape: function (forward, back, curveIntersectionThreshold) {\n    const bpl = back.points.length;\n    const fpl = forward.points.length;\n    const start = utils.makeline(back.points[bpl - 1], forward.points[0]);\n    const end = utils.makeline(forward.points[fpl - 1], back.points[0]);\n    const shape = {\n      startcap: start,\n      forward: forward,\n      back: back,\n      endcap: end,\n      bbox: utils.findbbox([start, forward, back, end])\n    };\n\n    shape.intersections = function (s2) {\n      return utils.shapeintersections(shape, shape.bbox, s2, s2.bbox, curveIntersectionThreshold);\n    };\n\n    return shape;\n  },\n  getminmax: function (curve, d, list) {\n    if (!list) return {\n      min: 0,\n      max: 0\n    };\n    let min = nMax,\n        max = nMin,\n        t,\n        c;\n\n    if (list.indexOf(0) === -1) {\n      list = [0].concat(list);\n    }\n\n    if (list.indexOf(1) === -1) {\n      list.push(1);\n    }\n\n    for (let i = 0, len = list.length; i < len; i++) {\n      t = list[i];\n      c = curve.get(t);\n\n      if (c[d] < min) {\n        min = c[d];\n      }\n\n      if (c[d] > max) {\n        max = c[d];\n      }\n    }\n\n    return {\n      min: min,\n      mid: (min + max) / 2,\n      max: max,\n      size: max - min\n    };\n  },\n  align: function (points, line) {\n    const tx = line.p1.x,\n          ty = line.p1.y,\n          a = -atan2(line.p2.y - ty, line.p2.x - tx),\n          d = function (v) {\n      return {\n        x: (v.x - tx) * cos(a) - (v.y - ty) * sin(a),\n        y: (v.x - tx) * sin(a) + (v.y - ty) * cos(a)\n      };\n    };\n\n    return points.map(d);\n  },\n  roots: function (points, line) {\n    line = line || {\n      p1: {\n        x: 0,\n        y: 0\n      },\n      p2: {\n        x: 1,\n        y: 0\n      }\n    };\n    const order = points.length - 1;\n    const aligned = utils.align(points, line);\n\n    const reduce = function (t) {\n      return 0 <= t && t <= 1;\n    };\n\n    if (order === 2) {\n      const a = aligned[0].y,\n            b = aligned[1].y,\n            c = aligned[2].y,\n            d = a - 2 * b + c;\n\n      if (d !== 0) {\n        const m1 = -sqrt(b * b - a * c),\n              m2 = -a + b,\n              v1 = -(m1 + m2) / d,\n              v2 = -(-m1 + m2) / d;\n        return [v1, v2].filter(reduce);\n      } else if (b !== c && d === 0) {\n        return [(2 * b - c) / (2 * b - 2 * c)].filter(reduce);\n      }\n\n      return [];\n    } // see http://www.trans4mind.com/personal_development/mathematics/polynomials/cubicAlgebra.htm\n\n\n    const pa = aligned[0].y,\n          pb = aligned[1].y,\n          pc = aligned[2].y,\n          pd = aligned[3].y;\n    let d = -pa + 3 * pb - 3 * pc + pd,\n        a = 3 * pa - 6 * pb + 3 * pc,\n        b = -3 * pa + 3 * pb,\n        c = pa;\n\n    if (utils.approximately(d, 0)) {\n      // this is not a cubic curve.\n      if (utils.approximately(a, 0)) {\n        // in fact, this is not a quadratic curve either.\n        if (utils.approximately(b, 0)) {\n          // in fact in fact, there are no solutions.\n          return [];\n        } // linear solution:\n\n\n        return [-c / b].filter(reduce);\n      } // quadratic solution:\n\n\n      const q = sqrt(b * b - 4 * a * c),\n            a2 = 2 * a;\n      return [(q - b) / a2, (-b - q) / a2].filter(reduce);\n    } // at this point, we know we need a cubic solution:\n\n\n    a /= d;\n    b /= d;\n    c /= d;\n    const p = (3 * b - a * a) / 3,\n          p3 = p / 3,\n          q = (2 * a * a * a - 9 * a * b + 27 * c) / 27,\n          q2 = q / 2,\n          discriminant = q2 * q2 + p3 * p3 * p3;\n    let u1, v1, x1, x2, x3;\n\n    if (discriminant < 0) {\n      const mp3 = -p / 3,\n            mp33 = mp3 * mp3 * mp3,\n            r = sqrt(mp33),\n            t = -q / (2 * r),\n            cosphi = t < -1 ? -1 : t > 1 ? 1 : t,\n            phi = acos(cosphi),\n            crtr = crt(r),\n            t1 = 2 * crtr;\n      x1 = t1 * cos(phi / 3) - a / 3;\n      x2 = t1 * cos((phi + tau) / 3) - a / 3;\n      x3 = t1 * cos((phi + 2 * tau) / 3) - a / 3;\n      return [x1, x2, x3].filter(reduce);\n    } else if (discriminant === 0) {\n      u1 = q2 < 0 ? crt(-q2) : -crt(q2);\n      x1 = 2 * u1 - a / 3;\n      x2 = -u1 - a / 3;\n      return [x1, x2].filter(reduce);\n    } else {\n      const sd = sqrt(discriminant);\n      u1 = crt(-q2 + sd);\n      v1 = crt(q2 + sd);\n      return [u1 - v1 - a / 3].filter(reduce);\n    }\n  },\n  droots: function (p) {\n    // quadratic roots are easy\n    if (p.length === 3) {\n      const a = p[0],\n            b = p[1],\n            c = p[2],\n            d = a - 2 * b + c;\n\n      if (d !== 0) {\n        const m1 = -sqrt(b * b - a * c),\n              m2 = -a + b,\n              v1 = -(m1 + m2) / d,\n              v2 = -(-m1 + m2) / d;\n        return [v1, v2];\n      } else if (b !== c && d === 0) {\n        return [(2 * b - c) / (2 * (b - c))];\n      }\n\n      return [];\n    } // linear roots are even easier\n\n\n    if (p.length === 2) {\n      const a = p[0],\n            b = p[1];\n\n      if (a !== b) {\n        return [a / (a - b)];\n      }\n\n      return [];\n    }\n\n    return [];\n  },\n  curvature: function (t, d1, d2, _3d, kOnly) {\n    let num,\n        dnm,\n        adk,\n        dk,\n        k = 0,\n        r = 0; //\n    // We're using the following formula for curvature:\n    //\n    //              x'y\" - y'x\"\n    //   k(t) = ------------------\n    //           (x'\u00b2 + y'\u00b2)^(3/2)\n    //\n    // from https://en.wikipedia.org/wiki/Radius_of_curvature#Definition\n    //\n    // With it corresponding 3D counterpart:\n    //\n    //          sqrt( (y'z\" - y\"z')\u00b2 + (z'x\" - z\"x')\u00b2 + (x'y\" - x\"y')\u00b2)\n    //   k(t) = -------------------------------------------------------\n    //                     (x'\u00b2 + y'\u00b2 + z'\u00b2)^(3/2)\n    //\n\n    const d = utils.compute(t, d1);\n    const dd = utils.compute(t, d2);\n    const qdsum = d.x * d.x + d.y * d.y;\n\n    if (_3d) {\n      num = sqrt(pow(d.y * dd.z - dd.y * d.z, 2) + pow(d.z * dd.x - dd.z * d.x, 2) + pow(d.x * dd.y - dd.x * d.y, 2));\n      dnm = pow(qdsum + d.z * d.z, 3 / 2);\n    } else {\n      num = d.x * dd.y - d.y * dd.x;\n      dnm = pow(qdsum, 3 / 2);\n    }\n\n    if (num === 0 || dnm === 0) {\n      return {\n        k: 0,\n        r: 0\n      };\n    }\n\n    k = num / dnm;\n    r = dnm / num; // We're also computing the derivative of kappa, because\n    // there is value in knowing the rate of change for the\n    // curvature along the curve. And we're just going to\n    // ballpark it based on an epsilon.\n\n    if (!kOnly) {\n      // compute k'(t) based on the interval before, and after it,\n      // to at least try to not introduce forward/backward pass bias.\n      const pk = utils.curvature(t - 0.001, d1, d2, _3d, true).k;\n      const nk = utils.curvature(t + 0.001, d1, d2, _3d, true).k;\n      dk = (nk - k + (k - pk)) / 2;\n      adk = (abs(nk - k) + abs(k - pk)) / 2;\n    }\n\n    return {\n      k: k,\n      r: r,\n      dk: dk,\n      adk: adk\n    };\n  },\n  inflections: function (points) {\n    if (points.length < 4) return []; // FIXME: TODO: add in inflection abstraction for quartic+ curves?\n\n    const p = utils.align(points, {\n      p1: points[0],\n      p2: points.slice(-1)[0]\n    }),\n          a = p[2].x * p[1].y,\n          b = p[3].x * p[1].y,\n          c = p[1].x * p[2].y,\n          d = p[3].x * p[2].y,\n          v1 = 18 * (-3 * a + 2 * b + 3 * c - d),\n          v2 = 18 * (3 * a - b - 3 * c),\n          v3 = 18 * (c - a);\n\n    if (utils.approximately(v1, 0)) {\n      if (!utils.approximately(v2, 0)) {\n        let t = -v3 / v2;\n        if (0 <= t && t <= 1) return [t];\n      }\n\n      return [];\n    }\n\n    const trm = v2 * v2 - 4 * v1 * v3,\n          sq = Math.sqrt(trm),\n          d2 = 2 * v1;\n    if (utils.approximately(d2, 0)) return [];\n    return [(sq - v2) / d2, -(v2 + sq) / d2].filter(function (r) {\n      return 0 <= r && r <= 1;\n    });\n  },\n  bboxoverlap: function (b1, b2) {\n    const dims = [\"x\", \"y\"],\n          len = dims.length;\n\n    for (let i = 0, dim, l, t, d; i < len; i++) {\n      dim = dims[i];\n      l = b1[dim].mid;\n      t = b2[dim].mid;\n      d = (b1[dim].size + b2[dim].size) / 2;\n      if (abs(l - t) >= d) return false;\n    }\n\n    return true;\n  },\n  expandbox: function (bbox, _bbox) {\n    if (_bbox.x.min < bbox.x.min) {\n      bbox.x.min = _bbox.x.min;\n    }\n\n    if (_bbox.y.min < bbox.y.min) {\n      bbox.y.min = _bbox.y.min;\n    }\n\n    if (_bbox.z && _bbox.z.min < bbox.z.min) {\n      bbox.z.min = _bbox.z.min;\n    }\n\n    if (_bbox.x.max > bbox.x.max) {\n      bbox.x.max = _bbox.x.max;\n    }\n\n    if (_bbox.y.max > bbox.y.max) {\n      bbox.y.max = _bbox.y.max;\n    }\n\n    if (_bbox.z && _bbox.z.max > bbox.z.max) {\n      bbox.z.max = _bbox.z.max;\n    }\n\n    bbox.x.mid = (bbox.x.min + bbox.x.max) / 2;\n    bbox.y.mid = (bbox.y.min + bbox.y.max) / 2;\n\n    if (bbox.z) {\n      bbox.z.mid = (bbox.z.min + bbox.z.max) / 2;\n    }\n\n    bbox.x.size = bbox.x.max - bbox.x.min;\n    bbox.y.size = bbox.y.max - bbox.y.min;\n\n    if (bbox.z) {\n      bbox.z.size = bbox.z.max - bbox.z.min;\n    }\n  },\n  pairiteration: function (c1, c2, curveIntersectionThreshold) {\n    const c1b = c1.bbox(),\n          c2b = c2.bbox(),\n          r = 100000,\n          threshold = curveIntersectionThreshold || 0.5;\n\n    if (c1b.x.size + c1b.y.size < threshold && c2b.x.size + c2b.y.size < threshold) {\n      return [(r * (c1._t1 + c1._t2) / 2 | 0) / r + \"/\" + (r * (c2._t1 + c2._t2) / 2 | 0) / r];\n    }\n\n    let cc1 = c1.split(0.5),\n        cc2 = c2.split(0.5),\n        pairs = [{\n      left: cc1.left,\n      right: cc2.left\n    }, {\n      left: cc1.left,\n      right: cc2.right\n    }, {\n      left: cc1.right,\n      right: cc2.right\n    }, {\n      left: cc1.right,\n      right: cc2.left\n    }];\n    pairs = pairs.filter(function (pair) {\n      return utils.bboxoverlap(pair.left.bbox(), pair.right.bbox());\n    });\n    let results = [];\n    if (pairs.length === 0) return results;\n    pairs.forEach(function (pair) {\n      results = results.concat(utils.pairiteration(pair.left, pair.right, threshold));\n    });\n    results = results.filter(function (v, i) {\n      return results.indexOf(v) === i;\n    });\n    return results;\n  },\n  getccenter: function (p1, p2, p3) {\n    const dx1 = p2.x - p1.x,\n          dy1 = p2.y - p1.y,\n          dx2 = p3.x - p2.x,\n          dy2 = p3.y - p2.y,\n          dx1p = dx1 * cos(quart) - dy1 * sin(quart),\n          dy1p = dx1 * sin(quart) + dy1 * cos(quart),\n          dx2p = dx2 * cos(quart) - dy2 * sin(quart),\n          dy2p = dx2 * sin(quart) + dy2 * cos(quart),\n          // chord midpoints\n    mx1 = (p1.x + p2.x) / 2,\n          my1 = (p1.y + p2.y) / 2,\n          mx2 = (p2.x + p3.x) / 2,\n          my2 = (p2.y + p3.y) / 2,\n          // midpoint offsets\n    mx1n = mx1 + dx1p,\n          my1n = my1 + dy1p,\n          mx2n = mx2 + dx2p,\n          my2n = my2 + dy2p,\n          // intersection of these lines:\n    arc = utils.lli8(mx1, my1, mx1n, my1n, mx2, my2, mx2n, my2n),\n          r = utils.dist(arc, p1); // arc start/end values, over mid point:\n\n    let s = atan2(p1.y - arc.y, p1.x - arc.x),\n        m = atan2(p2.y - arc.y, p2.x - arc.x),\n        e = atan2(p3.y - arc.y, p3.x - arc.x),\n        _; // determine arc direction (cw/ccw correction)\n\n\n    if (s < e) {\n      // if s<m<e, arc(s, e)\n      // if m<s<e, arc(e, s + tau)\n      // if s<e<m, arc(e, s + tau)\n      if (s > m || m > e) {\n        s += tau;\n      }\n\n      if (s > e) {\n        _ = e;\n        e = s;\n        s = _;\n      }\n    } else {\n      // if e<m<s, arc(e, s)\n      // if m<e<s, arc(s, e + tau)\n      // if e<s<m, arc(s, e + tau)\n      if (e < m && m < s) {\n        _ = e;\n        e = s;\n        s = _;\n      } else {\n        e += tau;\n      }\n    } // assign and done.\n\n\n    arc.s = s;\n    arc.e = e;\n    arc.r = r;\n    return arc;\n  },\n  numberSort: function (a, b) {\n    return a - b;\n  }\n};\n/**\n * Poly Bezier\n * @param {[type]} curves [description]\n */\n\nclass PolyBezier {\n  constructor(curves) {\n    this.curves = [];\n    this._3d = false;\n\n    if (!!curves) {\n      this.curves = curves;\n      this._3d = this.curves[0]._3d;\n    }\n  }\n\n  valueOf() {\n    return this.toString();\n  }\n\n  toString() {\n    return \"[\" + this.curves.map(function (curve) {\n      return utils.pointsToString(curve.points);\n    }).join(\", \") + \"]\";\n  }\n\n  addCurve(curve) {\n    this.curves.push(curve);\n    this._3d = this._3d || curve._3d;\n  }\n\n  length() {\n    return this.curves.map(function (v) {\n      return v.length();\n    }).reduce(function (a, b) {\n      return a + b;\n    });\n  }\n\n  curve(idx) {\n    return this.curves[idx];\n  }\n\n  bbox() {\n    const c = this.curves;\n    var bbox = c[0].bbox();\n\n    for (var i = 1; i < c.length; i++) {\n      utils.expandbox(bbox, c[i].bbox());\n    }\n\n    return bbox;\n  }\n\n  offset(d) {\n    const offset = [];\n    this.curves.forEach(function (v) {\n      offset.push(...v.offset(d));\n    });\n    return new PolyBezier(offset);\n  }\n\n}\n/**\n  A javascript Bezier curve library by Pomax.\n\n  Based on http://pomax.github.io/bezierinfo\n\n  This code is MIT licensed.\n**/\n// math-inlining.\n\n\nconst {\n  abs: abs$1,\n  min,\n  max,\n  cos: cos$1,\n  sin: sin$1,\n  acos: acos$1,\n  sqrt: sqrt$1\n} = Math;\nconst pi$1 = Math.PI;\n/**\n * Bezier curve constructor.\n *\n * ...docs pending...\n */\n\nclass Bezier {\n  constructor(coords) {\n    let args = coords && coords.forEach ? coords : Array.from(arguments).slice();\n    let coordlen = false;\n\n    if (typeof args[0] === \"object\") {\n      coordlen = args.length;\n      const newargs = [];\n      args.forEach(function (point) {\n        [\"x\", \"y\", \"z\"].forEach(function (d) {\n          if (typeof point[d] !== \"undefined\") {\n            newargs.push(point[d]);\n          }\n        });\n      });\n      args = newargs;\n    }\n\n    let higher = false;\n    const len = args.length;\n\n    if (coordlen) {\n      if (coordlen > 4) {\n        if (arguments.length !== 1) {\n          throw new Error(\"Only new Bezier(point[]) is accepted for 4th and higher order curves\");\n        }\n\n        higher = true;\n      }\n    } else {\n      if (len !== 6 && len !== 8 && len !== 9 && len !== 12) {\n        if (arguments.length !== 1) {\n          throw new Error(\"Only new Bezier(point[]) is accepted for 4th and higher order curves\");\n        }\n      }\n    }\n\n    const _3d = this._3d = !higher && (len === 9 || len === 12) || coords && coords[0] && typeof coords[0].z !== \"undefined\";\n\n    const points = this.points = [];\n\n    for (let idx = 0, step = _3d ? 3 : 2; idx < len; idx += step) {\n      var point = {\n        x: args[idx],\n        y: args[idx + 1]\n      };\n\n      if (_3d) {\n        point.z = args[idx + 2];\n      }\n\n      points.push(point);\n    }\n\n    const order = this.order = points.length - 1;\n    const dims = this.dims = [\"x\", \"y\"];\n    if (_3d) dims.push(\"z\");\n    this.dimlen = dims.length;\n    const aligned = utils.align(points, {\n      p1: points[0],\n      p2: points[order]\n    });\n    this._linear = !aligned.some(p => abs$1(p.y) > 0.0001);\n    this._lut = [];\n    this._t1 = 0;\n    this._t2 = 1;\n    this.update();\n  }\n\n  static quadraticFromPoints(p1, p2, p3, t) {\n    if (typeof t === \"undefined\") {\n      t = 0.5;\n    } // shortcuts, although they're really dumb\n\n\n    if (t === 0) {\n      return new Bezier(p2, p2, p3);\n    }\n\n    if (t === 1) {\n      return new Bezier(p1, p2, p2);\n    } // real fitting.\n\n\n    const abc = Bezier.getABC(2, p1, p2, p3, t);\n    return new Bezier(p1, abc.A, p3);\n  }\n\n  static cubicFromPoints(S, B, E, t, d1) {\n    if (typeof t === \"undefined\") {\n      t = 0.5;\n    }\n\n    const abc = Bezier.getABC(3, S, B, E, t);\n\n    if (typeof d1 === \"undefined\") {\n      d1 = utils.dist(B, abc.C);\n    }\n\n    const d2 = d1 * (1 - t) / t;\n    const selen = utils.dist(S, E),\n          lx = (E.x - S.x) / selen,\n          ly = (E.y - S.y) / selen,\n          bx1 = d1 * lx,\n          by1 = d1 * ly,\n          bx2 = d2 * lx,\n          by2 = d2 * ly; // derivation of new hull coordinates\n\n    const e1 = {\n      x: B.x - bx1,\n      y: B.y - by1\n    },\n          e2 = {\n      x: B.x + bx2,\n      y: B.y + by2\n    },\n          A = abc.A,\n          v1 = {\n      x: A.x + (e1.x - A.x) / (1 - t),\n      y: A.y + (e1.y - A.y) / (1 - t)\n    },\n          v2 = {\n      x: A.x + (e2.x - A.x) / t,\n      y: A.y + (e2.y - A.y) / t\n    },\n          nc1 = {\n      x: S.x + (v1.x - S.x) / t,\n      y: S.y + (v1.y - S.y) / t\n    },\n          nc2 = {\n      x: E.x + (v2.x - E.x) / (1 - t),\n      y: E.y + (v2.y - E.y) / (1 - t)\n    }; // ...done\n\n    return new Bezier(S, nc1, nc2, E);\n  }\n\n  static getUtils() {\n    return utils;\n  }\n\n  getUtils() {\n    return Bezier.getUtils();\n  }\n\n  static get PolyBezier() {\n    return PolyBezier;\n  }\n\n  valueOf() {\n    return this.toString();\n  }\n\n  toString() {\n    return utils.pointsToString(this.points);\n  }\n\n  toSVG() {\n    if (this._3d) return false;\n    const p = this.points,\n          x = p[0].x,\n          y = p[0].y,\n          s = [\"M\", x, y, this.order === 2 ? \"Q\" : \"C\"];\n\n    for (let i = 1, last = p.length; i < last; i++) {\n      s.push(p[i].x);\n      s.push(p[i].y);\n    }\n\n    return s.join(\" \");\n  }\n\n  setRatios(ratios) {\n    if (ratios.length !== this.points.length) {\n      throw new Error(\"incorrect number of ratio values\");\n    }\n\n    this.ratios = ratios;\n    this._lut = []; //  invalidate any precomputed LUT\n  }\n\n  verify() {\n    const print = this.coordDigest();\n\n    if (print !== this._print) {\n      this._print = print;\n      this.update();\n    }\n  }\n\n  coordDigest() {\n    return this.points.map(function (c, pos) {\n      return \"\" + pos + c.x + c.y + (c.z ? c.z : 0);\n    }).join(\"\");\n  }\n\n  update() {\n    // invalidate any precomputed LUT\n    this._lut = [];\n    this.dpoints = utils.derive(this.points, this._3d);\n    this.computedirection();\n  }\n\n  computedirection() {\n    const points = this.points;\n    const angle = utils.angle(points[0], points[this.order], points[1]);\n    this.clockwise = angle > 0;\n  }\n\n  length() {\n    return utils.length(this.derivative.bind(this));\n  }\n\n  static getABC(order = 2, S, B, E, t = 0.5) {\n    const u = utils.projectionratio(t, order),\n          um = 1 - u,\n          C = {\n      x: u * S.x + um * E.x,\n      y: u * S.y + um * E.y\n    },\n          s = utils.abcratio(t, order),\n          A = {\n      x: B.x + (B.x - C.x) / s,\n      y: B.y + (B.y - C.y) / s\n    };\n    return {\n      A,\n      B,\n      C,\n      S,\n      E\n    };\n  }\n\n  getABC(t, B) {\n    B = B || this.get(t);\n    let S = this.points[0];\n    let E = this.points[this.order];\n    return Bezier.getABC(this.order, S, B, E, t);\n  }\n\n  getLUT(steps) {\n    this.verify();\n    steps = steps || 100;\n\n    if (this._lut.length === steps) {\n      return this._lut;\n    }\n\n    this._lut = []; // We want a range from 0 to 1 inclusive, so\n    // we decrement and then use <= rather than <:\n\n    steps--;\n\n    for (let i = 0, p, t; i < steps; i++) {\n      t = i / (steps - 1);\n      p = this.compute(t);\n      p.t = t;\n\n      this._lut.push(p);\n    }\n\n    return this._lut;\n  }\n\n  on(point, error) {\n    error = error || 5;\n    const lut = this.getLUT(),\n          hits = [];\n\n    for (let i = 0, c, t = 0; i < lut.length; i++) {\n      c = lut[i];\n\n      if (utils.dist(c, point) < error) {\n        hits.push(c);\n        t += i / lut.length;\n      }\n    }\n\n    if (!hits.length) return false;\n    return t /= hits.length;\n  }\n\n  project(point) {\n    // step 1: coarse check\n    const LUT = this.getLUT(),\n          l = LUT.length - 1,\n          closest = utils.closest(LUT, point),\n          mpos = closest.mpos,\n          t1 = (mpos - 1) / l,\n          t2 = (mpos + 1) / l,\n          step = 0.1 / l; // step 2: fine check\n\n    let mdist = closest.mdist,\n        t = t1,\n        ft = t,\n        p;\n    mdist += 1;\n\n    for (let d; t < t2 + step; t += step) {\n      p = this.compute(t);\n      d = utils.dist(point, p);\n\n      if (d < mdist) {\n        mdist = d;\n        ft = t;\n      }\n    }\n\n    ft = ft < 0 ? 0 : ft > 1 ? 1 : ft;\n    p = this.compute(ft);\n    p.t = ft;\n    p.d = mdist;\n    return p;\n  }\n\n  get(t) {\n    return this.compute(t);\n  }\n\n  point(idx) {\n    return this.points[idx];\n  }\n\n  compute(t) {\n    if (this.ratios) {\n      return utils.computeWithRatios(t, this.points, this.ratios, this._3d);\n    }\n\n    return utils.compute(t, this.points, this._3d, this.ratios);\n  }\n\n  raise() {\n    const p = this.points,\n          np = [p[0]],\n          k = p.length;\n\n    for (let i = 1, pi, pim; i < k; i++) {\n      pi = p[i];\n      pim = p[i - 1];\n      np[i] = {\n        x: (k - i) / k * pi.x + i / k * pim.x,\n        y: (k - i) / k * pi.y + i / k * pim.y\n      };\n    }\n\n    np[k] = p[k - 1];\n    return new Bezier(np);\n  }\n\n  derivative(t) {\n    return utils.compute(t, this.dpoints[0]);\n  }\n\n  dderivative(t) {\n    return utils.compute(t, this.dpoints[1]);\n  }\n\n  align() {\n    let p = this.points;\n    return new Bezier(utils.align(p, {\n      p1: p[0],\n      p2: p[p.length - 1]\n    }));\n  }\n\n  curvature(t) {\n    return utils.curvature(t, this.dpoints[0], this.dpoints[1], this._3d);\n  }\n\n  inflections() {\n    return utils.inflections(this.points);\n  }\n\n  normal(t) {\n    return this._3d ? this.__normal3(t) : this.__normal2(t);\n  }\n\n  __normal2(t) {\n    const d = this.derivative(t);\n    const q = sqrt$1(d.x * d.x + d.y * d.y);\n    return {\n      x: -d.y / q,\n      y: d.x / q\n    };\n  }\n\n  __normal3(t) {\n    // see http://stackoverflow.com/questions/25453159\n    const r1 = this.derivative(t),\n          r2 = this.derivative(t + 0.01),\n          q1 = sqrt$1(r1.x * r1.x + r1.y * r1.y + r1.z * r1.z),\n          q2 = sqrt$1(r2.x * r2.x + r2.y * r2.y + r2.z * r2.z);\n    r1.x /= q1;\n    r1.y /= q1;\n    r1.z /= q1;\n    r2.x /= q2;\n    r2.y /= q2;\n    r2.z /= q2; // cross product\n\n    const c = {\n      x: r2.y * r1.z - r2.z * r1.y,\n      y: r2.z * r1.x - r2.x * r1.z,\n      z: r2.x * r1.y - r2.y * r1.x\n    };\n    const m = sqrt$1(c.x * c.x + c.y * c.y + c.z * c.z);\n    c.x /= m;\n    c.y /= m;\n    c.z /= m; // rotation matrix\n\n    const R = [c.x * c.x, c.x * c.y - c.z, c.x * c.z + c.y, c.x * c.y + c.z, c.y * c.y, c.y * c.z - c.x, c.x * c.z - c.y, c.y * c.z + c.x, c.z * c.z]; // normal vector:\n\n    const n = {\n      x: R[0] * r1.x + R[1] * r1.y + R[2] * r1.z,\n      y: R[3] * r1.x + R[4] * r1.y + R[5] * r1.z,\n      z: R[6] * r1.x + R[7] * r1.y + R[8] * r1.z\n    };\n    return n;\n  }\n\n  hull(t) {\n    let p = this.points,\n        _p = [],\n        q = [],\n        idx = 0;\n    q[idx++] = p[0];\n    q[idx++] = p[1];\n    q[idx++] = p[2];\n\n    if (this.order === 3) {\n      q[idx++] = p[3];\n    } // we lerp between all points at each iteration, until we have 1 point left.\n\n\n    while (p.length > 1) {\n      _p = [];\n\n      for (let i = 0, pt, l = p.length - 1; i < l; i++) {\n        pt = utils.lerp(t, p[i], p[i + 1]);\n        q[idx++] = pt;\n\n        _p.push(pt);\n      }\n\n      p = _p;\n    }\n\n    return q;\n  }\n\n  split(t1, t2) {\n    // shortcuts\n    if (t1 === 0 && !!t2) {\n      return this.split(t2).left;\n    }\n\n    if (t2 === 1) {\n      return this.split(t1).right;\n    } // no shortcut: use \"de Casteljau\" iteration.\n\n\n    const q = this.hull(t1);\n    const result = {\n      left: this.order === 2 ? new Bezier([q[0], q[3], q[5]]) : new Bezier([q[0], q[4], q[7], q[9]]),\n      right: this.order === 2 ? new Bezier([q[5], q[4], q[2]]) : new Bezier([q[9], q[8], q[6], q[3]]),\n      span: q\n    }; // make sure we bind _t1/_t2 information!\n\n    result.left._t1 = utils.map(0, 0, 1, this._t1, this._t2);\n    result.left._t2 = utils.map(t1, 0, 1, this._t1, this._t2);\n    result.right._t1 = utils.map(t1, 0, 1, this._t1, this._t2);\n    result.right._t2 = utils.map(1, 0, 1, this._t1, this._t2); // if we have no t2, we're done\n\n    if (!t2) {\n      return result;\n    } // if we have a t2, split again:\n\n\n    t2 = utils.map(t2, t1, 1, 0, 1);\n    return result.right.split(t2).left;\n  }\n\n  extrema() {\n    const result = {};\n    let roots = [];\n    this.dims.forEach(function (dim) {\n      let mfn = function (v) {\n        return v[dim];\n      };\n\n      let p = this.dpoints[0].map(mfn);\n      result[dim] = utils.droots(p);\n\n      if (this.order === 3) {\n        p = this.dpoints[1].map(mfn);\n        result[dim] = result[dim].concat(utils.droots(p));\n      }\n\n      result[dim] = result[dim].filter(function (t) {\n        return t >= 0 && t <= 1;\n      });\n      roots = roots.concat(result[dim].sort(utils.numberSort));\n    }.bind(this));\n    result.values = roots.sort(utils.numberSort).filter(function (v, idx) {\n      return roots.indexOf(v) === idx;\n    });\n    return result;\n  }\n\n  bbox() {\n    const extrema = this.extrema(),\n          result = {};\n    this.dims.forEach(function (d) {\n      result[d] = utils.getminmax(this, d, extrema[d]);\n    }.bind(this));\n    return result;\n  }\n\n  overlaps(curve) {\n    const lbbox = this.bbox(),\n          tbbox = curve.bbox();\n    return utils.bboxoverlap(lbbox, tbbox);\n  }\n\n  offset(t, d) {\n    if (typeof d !== \"undefined\") {\n      const c = this.get(t),\n            n = this.normal(t);\n      const ret = {\n        c: c,\n        n: n,\n        x: c.x + n.x * d,\n        y: c.y + n.y * d\n      };\n\n      if (this._3d) {\n        ret.z = c.z + n.z * d;\n      }\n\n      return ret;\n    }\n\n    if (this._linear) {\n      const nv = this.normal(0),\n            coords = this.points.map(function (p) {\n        const ret = {\n          x: p.x + t * nv.x,\n          y: p.y + t * nv.y\n        };\n\n        if (p.z && nv.z) {\n          ret.z = p.z + t * nv.z;\n        }\n\n        return ret;\n      });\n      return [new Bezier(coords)];\n    }\n\n    return this.reduce().map(function (s) {\n      if (s._linear) {\n        return s.offset(t)[0];\n      }\n\n      return s.scale(t);\n    });\n  }\n\n  simple() {\n    if (this.order === 3) {\n      const a1 = utils.angle(this.points[0], this.points[3], this.points[1]);\n      const a2 = utils.angle(this.points[0], this.points[3], this.points[2]);\n      if (a1 > 0 && a2 < 0 || a1 < 0 && a2 > 0) return false;\n    }\n\n    const n1 = this.normal(0);\n    const n2 = this.normal(1);\n    let s = n1.x * n2.x + n1.y * n2.y;\n\n    if (this._3d) {\n      s += n1.z * n2.z;\n    }\n\n    return abs$1(acos$1(s)) < pi$1 / 3;\n  }\n\n  reduce() {\n    // TODO: examine these var types in more detail...\n    let i,\n        t1 = 0,\n        t2 = 0,\n        step = 0.01,\n        segment,\n        pass1 = [],\n        pass2 = []; // first pass: split on extrema\n\n    let extrema = this.extrema().values;\n\n    if (extrema.indexOf(0) === -1) {\n      extrema = [0].concat(extrema);\n    }\n\n    if (extrema.indexOf(1) === -1) {\n      extrema.push(1);\n    }\n\n    for (t1 = extrema[0], i = 1; i < extrema.length; i++) {\n      t2 = extrema[i];\n      segment = this.split(t1, t2);\n      segment._t1 = t1;\n      segment._t2 = t2;\n      pass1.push(segment);\n      t1 = t2;\n    } // second pass: further reduce these segments to simple segments\n\n\n    pass1.forEach(function (p1) {\n      t1 = 0;\n      t2 = 0;\n\n      while (t2 <= 1) {\n        for (t2 = t1 + step; t2 <= 1 + step; t2 += step) {\n          segment = p1.split(t1, t2);\n\n          if (!segment.simple()) {\n            t2 -= step;\n\n            if (abs$1(t1 - t2) < step) {\n              // we can never form a reduction\n              return [];\n            }\n\n            segment = p1.split(t1, t2);\n            segment._t1 = utils.map(t1, 0, 1, p1._t1, p1._t2);\n            segment._t2 = utils.map(t2, 0, 1, p1._t1, p1._t2);\n            pass2.push(segment);\n            t1 = t2;\n            break;\n          }\n        }\n      }\n\n      if (t1 < 1) {\n        segment = p1.split(t1, 1);\n        segment._t1 = utils.map(t1, 0, 1, p1._t1, p1._t2);\n        segment._t2 = p1._t2;\n        pass2.push(segment);\n      }\n    });\n    return pass2;\n  }\n\n  scale(d) {\n    const order = this.order;\n    let distanceFn = false;\n\n    if (typeof d === \"function\") {\n      distanceFn = d;\n    }\n\n    if (distanceFn && order === 2) {\n      return this.raise().scale(distanceFn);\n    } // TODO: add special handling for degenerate (=linear) curves.\n\n\n    const clockwise = this.clockwise;\n    const r1 = distanceFn ? distanceFn(0) : d;\n    const r2 = distanceFn ? distanceFn(1) : d;\n    const v = [this.offset(0, 10), this.offset(1, 10)];\n    const points = this.points;\n    const np = [];\n    const o = utils.lli4(v[0], v[0].c, v[1], v[1].c);\n\n    if (!o) {\n      throw new Error(\"cannot scale this curve. Try reducing it first.\");\n    } // move all points by distance 'd' wrt the origin 'o'\n    // move end points by fixed distance along normal.\n\n\n    [0, 1].forEach(function (t) {\n      const p = np[t * order] = utils.copy(points[t * order]);\n      p.x += (t ? r2 : r1) * v[t].n.x;\n      p.y += (t ? r2 : r1) * v[t].n.y;\n    });\n\n    if (!distanceFn) {\n      // move control points to lie on the intersection of the offset\n      // derivative vector, and the origin-through-control vector\n      [0, 1].forEach(t => {\n        if (order === 2 && !!t) return;\n        const p = np[t * order];\n        const d = this.derivative(t);\n        const p2 = {\n          x: p.x + d.x,\n          y: p.y + d.y\n        };\n        np[t + 1] = utils.lli4(p, p2, o, points[t + 1]);\n      });\n      return new Bezier(np);\n    } // move control points by \"however much necessary to\n    // ensure the correct tangent to endpoint\".\n\n\n    [0, 1].forEach(function (t) {\n      if (order === 2 && !!t) return;\n      var p = points[t + 1];\n      var ov = {\n        x: p.x - o.x,\n        y: p.y - o.y\n      };\n      var rc = distanceFn ? distanceFn((t + 1) / order) : d;\n      if (distanceFn && !clockwise) rc = -rc;\n      var m = sqrt$1(ov.x * ov.x + ov.y * ov.y);\n      ov.x /= m;\n      ov.y /= m;\n      np[t + 1] = {\n        x: p.x + rc * ov.x,\n        y: p.y + rc * ov.y\n      };\n    });\n    return new Bezier(np);\n  }\n\n  outline(d1, d2, d3, d4) {\n    d2 = typeof d2 === \"undefined\" ? d1 : d2;\n    const reduced = this.reduce(),\n          len = reduced.length,\n          fcurves = [];\n    let bcurves = [],\n        p,\n        alen = 0,\n        tlen = this.length();\n    const graduated = typeof d3 !== \"undefined\" && typeof d4 !== \"undefined\";\n\n    function linearDistanceFunction(s, e, tlen, alen, slen) {\n      return function (v) {\n        const f1 = alen / tlen,\n              f2 = (alen + slen) / tlen,\n              d = e - s;\n        return utils.map(v, 0, 1, s + f1 * d, s + f2 * d);\n      };\n    } // form curve oulines\n\n\n    reduced.forEach(function (segment) {\n      const slen = segment.length();\n\n      if (graduated) {\n        fcurves.push(segment.scale(linearDistanceFunction(d1, d3, tlen, alen, slen)));\n        bcurves.push(segment.scale(linearDistanceFunction(-d2, -d4, tlen, alen, slen)));\n      } else {\n        fcurves.push(segment.scale(d1));\n        bcurves.push(segment.scale(-d2));\n      }\n\n      alen += slen;\n    }); // reverse the \"return\" outline\n\n    bcurves = bcurves.map(function (s) {\n      p = s.points;\n\n      if (p[3]) {\n        s.points = [p[3], p[2], p[1], p[0]];\n      } else {\n        s.points = [p[2], p[1], p[0]];\n      }\n\n      return s;\n    }).reverse(); // form the endcaps as lines\n\n    const fs = fcurves[0].points[0],\n          fe = fcurves[len - 1].points[fcurves[len - 1].points.length - 1],\n          bs = bcurves[len - 1].points[bcurves[len - 1].points.length - 1],\n          be = bcurves[0].points[0],\n          ls = utils.makeline(bs, fs),\n          le = utils.makeline(fe, be),\n          segments = [ls].concat(fcurves).concat([le]).concat(bcurves);\n    return new PolyBezier(segments);\n  }\n\n  outlineshapes(d1, d2, curveIntersectionThreshold) {\n    d2 = d2 || d1;\n    const outline = this.outline(d1, d2).curves;\n    const shapes = [];\n\n    for (let i = 1, len = outline.length; i < len / 2; i++) {\n      const shape = utils.makeshape(outline[i], outline[len - i], curveIntersectionThreshold);\n      shape.startcap.virtual = i > 1;\n      shape.endcap.virtual = i < len / 2 - 1;\n      shapes.push(shape);\n    }\n\n    return shapes;\n  }\n\n  intersects(curve, curveIntersectionThreshold) {\n    if (!curve) return this.selfintersects(curveIntersectionThreshold);\n\n    if (curve.p1 && curve.p2) {\n      return this.lineIntersects(curve);\n    }\n\n    if (curve instanceof Bezier) {\n      curve = curve.reduce();\n    }\n\n    return this.curveintersects(this.reduce(), curve, curveIntersectionThreshold);\n  }\n\n  lineIntersects(line) {\n    const mx = min(line.p1.x, line.p2.x),\n          my = min(line.p1.y, line.p2.y),\n          MX = max(line.p1.x, line.p2.x),\n          MY = max(line.p1.y, line.p2.y);\n    return utils.roots(this.points, line).filter(t => {\n      var p = this.get(t);\n      return utils.between(p.x, mx, MX) && utils.between(p.y, my, MY);\n    });\n  }\n\n  selfintersects(curveIntersectionThreshold) {\n    // \"simple\" curves cannot intersect with their direct\n    // neighbour, so for each segment X we check whether\n    // it intersects [0:x-2][x+2:last].\n    const reduced = this.reduce(),\n          len = reduced.length - 2,\n          results = [];\n\n    for (let i = 0, result, left, right; i < len; i++) {\n      left = reduced.slice(i, i + 1);\n      right = reduced.slice(i + 2);\n      result = this.curveintersects(left, right, curveIntersectionThreshold);\n      results.push(...result);\n    }\n\n    return results;\n  }\n\n  curveintersects(c1, c2, curveIntersectionThreshold) {\n    const pairs = []; // step 1: pair off any overlapping segments\n\n    c1.forEach(function (l) {\n      c2.forEach(function (r) {\n        if (l.overlaps(r)) {\n          pairs.push({\n            left: l,\n            right: r\n          });\n        }\n      });\n    }); // step 2: for each pairing, run through the convergence algorithm.\n\n    let intersections = [];\n    pairs.forEach(function (pair) {\n      const result = utils.pairiteration(pair.left, pair.right, curveIntersectionThreshold);\n\n      if (result.length > 0) {\n        intersections = intersections.concat(result);\n      }\n    });\n    return intersections;\n  }\n\n  arcs(errorThreshold) {\n    errorThreshold = errorThreshold || 0.5;\n    return this._iterate(errorThreshold, []);\n  }\n\n  _error(pc, np1, s, e) {\n    const q = (e - s) / 4,\n          c1 = this.get(s + q),\n          c2 = this.get(e - q),\n          ref = utils.dist(pc, np1),\n          d1 = utils.dist(pc, c1),\n          d2 = utils.dist(pc, c2);\n    return abs$1(d1 - ref) + abs$1(d2 - ref);\n  }\n\n  _iterate(errorThreshold, circles) {\n    let t_s = 0,\n        t_e = 1,\n        safety; // we do a binary search to find the \"good `t` closest to no-longer-good\"\n\n    do {\n      safety = 0; // step 1: start with the maximum possible arc\n\n      t_e = 1; // points:\n\n      let np1 = this.get(t_s),\n          np2,\n          np3,\n          arc,\n          prev_arc; // booleans:\n\n      let curr_good = false,\n          prev_good = false,\n          done; // numbers:\n\n      let t_m = t_e,\n          prev_e = 1; // step 2: find the best possible arc\n\n      do {\n        prev_good = curr_good;\n        prev_arc = arc;\n        t_m = (t_s + t_e) / 2;\n        np2 = this.get(t_m);\n        np3 = this.get(t_e);\n        arc = utils.getccenter(np1, np2, np3); //also save the t values\n\n        arc.interval = {\n          start: t_s,\n          end: t_e\n        };\n\n        let error = this._error(arc, np1, t_s, t_e);\n\n        curr_good = error <= errorThreshold;\n        done = prev_good && !curr_good;\n        if (!done) prev_e = t_e; // this arc is fine: we can move 'e' up to see if we can find a wider arc\n\n        if (curr_good) {\n          // if e is already at max, then we're done for this arc.\n          if (t_e >= 1) {\n            // make sure we cap at t=1\n            arc.interval.end = prev_e = 1;\n            prev_arc = arc; // if we capped the arc segment to t=1 we also need to make sure that\n            // the arc's end angle is correct with respect to the bezier end point.\n\n            if (t_e > 1) {\n              let d = {\n                x: arc.x + arc.r * cos$1(arc.e),\n                y: arc.y + arc.r * sin$1(arc.e)\n              };\n              arc.e += utils.angle({\n                x: arc.x,\n                y: arc.y\n              }, d, this.get(1));\n            }\n\n            break;\n          } // if not, move it up by half the iteration distance\n\n\n          t_e = t_e + (t_e - t_s) / 2;\n        } else {\n          // this is a bad arc: we need to move 'e' down to find a good arc\n          t_e = t_m;\n        }\n      } while (!done && safety++ < 100);\n\n      if (safety >= 100) {\n        break;\n      } // console.log(\"L835: [F] arc found\", t_s, prev_e, prev_arc.x, prev_arc.y, prev_arc.s, prev_arc.e);\n\n\n      prev_arc = prev_arc ? prev_arc : arc;\n      circles.push(prev_arc);\n      t_s = prev_e;\n    } while (t_e < 1);\n\n    return circles;\n  }\n\n}\n\nexports.Bezier = Bezier;\n\n};"],
"names":["shadow$provide","global","require","module","exports","crt","v","pow","Object","defineProperty","value","Bezier","abs","cos","sin","acos","atan2","sqrt","Math","pi","PI","tau","quart","nMax","Number","MAX_SAFE_INTEGER","nMin","MIN_SAFE_INTEGER","ZERO","x","y","z","utils","Tvalues","Cvalues","arcfn","t","derivativeFn","d","l","compute","points","_3d","order","length","mt","p","ret","mt2","t2","b","c","a","dCpts","JSON","parse","stringify","i","splice","computeWithRatios","ratios","f1","f2","f3","f4","derive","dpoints","list","j","dpt","push","between","m","M","approximately","precision","epsilon","len","sum","map","ds","de","ts","te","lerp","r","v1","v2","pointToString","s","pointsToString","join","copy","obj","angle","o","dx1","dy1","dx2","dy2","round","pos","indexOf","parseFloat","substring","dist","p1","p2","dx","dy","closest","LUT","point","mdist","mpos","forEach","idx","abcratio","n","bottom","projectionratio","top","lli8","x1","y1","x2","y2","x3","y3","x4","y4","lli4","p3","p4","lli","makeline","findbbox","sections","mx","my","MX","MY","bbox","min","max","mid","size","shapeintersections","s1","bbox1","s2","bbox2","curveIntersectionThreshold","bboxoverlap","intersections","a2","startcap","forward","back","endcap","a1","l1","virtual","l2","iss","intersects","c1","c2","makeshape","fpl","start","end","shape","shape.intersections","getminmax","curve","concat","get","align","line","tx","ty","roots","aligned","reduce","m1","m2","filter","pa","pb","pc","q","q2","discriminant","mp3","phi","cosphi","t1","crtr","u1","sd","droots","curvature","d1","d2","kOnly","adk","dk","dd","qdsum","num","dnm","k","pk","nk","inflections","slice","v3","sq","b1","b2","dims","dim","expandbox","_bbox","pairiteration","c1b","c2b","threshold","_t1","_t2","cc1","split","cc2","pairs","left","right","pair","results","getccenter","dx1p","dy1p","dx2p","dy2p","mx1","my1","mx2","my2","arc","e","_","numberSort","PolyBezier","constructor","curves","valueOf","toString","addCurve","offset","abs$1","cos$1","sin$1","acos$1","sqrt$1","pi$1","coords","args","Array","from","arguments","coordlen","newargs","higher","Error","step","dimlen","_linear","some","_lut","update","quadraticFromPoints","abc","getABC","A","cubicFromPoints","S","B","E","C","selen","lx","ly","nc1","nc2","getUtils","toSVG","last","setRatios","verify","print","coordDigest","_print","computedirection","clockwise","derivative","bind","u","um","getLUT","steps","on","error","lut","hits","project","ft","raise","np","pim","dderivative","normal","__normal3","__normal2","r1","r2","q1","R","hull","_p","pt","result","span","extrema","mfn","sort","values","overlaps","lbbox","tbbox","nv","scale","simple","n1","n2","segment","pass1","pass2","distanceFn","rc","outline","d3","d4","linearDistanceFunction","tlen","alen","slen","reduced","fcurves","bcurves","graduated","reverse","fe","be","ls","bs","fs","le","segments","outlineshapes","shapes","selfintersects","lineIntersects","curveintersects","arcs","errorThreshold","_iterate","_error","np1","ref","circles","t_s","t_e","safety","np2","np3","prev_arc","curr_good","prev_good","t_m","prev_e","interval","done"]
}
