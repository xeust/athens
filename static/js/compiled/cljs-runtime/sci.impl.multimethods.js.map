{"version":3,"sources":["sci/impl/multimethods.cljc"],"mappings":"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","names":["var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","sci.impl.multimethods/check-valid-options","seq97437","G__97441","cljs.core/first","cljs.core/next","self__4723__auto__","options","valid-keys","cljs.core/seq","cljs.core.apply","cljs.core/disj","cljs.core/hash-set","cljs.core/keys","js/Error","cljs.core/str","p1__97435#","cljs.core.map","cljs.core/rest","sci.impl.multimethods/defmulti","seq97468","G__97469","G__97470","G__97471","G__97472","_","ctx","mm-name","docstring","m","cljs.core/map?","dispatch-fn","cljs.core.assoc","cljs.core/meta","cljs.core.conj","cljs.core/with-meta","cljs.core._EQ_","cljs.core/count","cljs.core.sequence","cljs.core.concat","cljs.core/List","cljs.core/vec","cljs.core/array-map","cljs.core/hash-map","default","cljs.core.get","hierarchy","sci.impl.hierarchies/global-hierarchy","sci.impl.multimethods.check_valid_options","cljs.core.symbol","cljs.core/name","sci.impl.multimethods/multi-fn?-impl","x","cljs.core/MultiFn","sci.impl.multimethods/multi-fn-impl","name","method-table","prefer-table","method-cache","cached-hierarchy","sci.impl.multimethods/multi-fn-add-method-impl","multifn","dispatch-val","f","cljs.core/-add-method","sci.impl.multimethods/defmethod","seq97497","G__97498","G__97499","G__97500","G__97501","fn-tail"],"sourcesContent":["(ns sci.impl.multimethods\n  {:no-doc true}\n  (:refer-clojure :exclude [defmulti defmethod])\n  (:require [sci.impl.hierarchies :refer [global-hierarchy]]))\n\n(defn ^:private check-valid-options\n  \"Throws an exception if the given option map contains keys not listed\n  as valid, else returns nil.\"\n  [options & valid-keys]\n  (when (seq (apply disj (apply hash-set (keys options)) valid-keys))\n    (throw\n     (new #?(:clj IllegalArgumentException :cljs js/Error)\n          (apply str \"Only these options are valid: \"\n                 (first valid-keys)\n                 (map #(str \", \" %) (rest valid-keys)))))))\n\n(defn defmulti\n  \"Creates a new multimethod with the associated dispatch function.\n  The docstring and attr-map are optional.\n\n  Options are key-value pairs and may be one of:\n\n  :default\n\n  The default dispatch value, defaults to :default\n\n  :hierarchy\n\n  The value used for hierarchical dispatch (e.g. ::square is-a ::shape)\n\n  Hierarchies are type-like relationships that do not depend upon type\n  inheritance. By default Clojure's multimethods dispatch off of a\n  global hierarchy map.  However, a hierarchy relationship can be\n  created with the derive function used to augment the root ancestor\n  created with make-hierarchy.\n\n  Multimethods expect the value of the hierarchy option to be supplied as\n  a reference type e.g. a var (i.e. via the Var-quote dispatch macro #'\n  or the var special form).\"\n  {:arglists '([name docstring? attr-map? dispatch-fn & options])}\n  [_ _ ctx mm-name & options]\n  (let [docstring   (if (string? (first options))\n                      (first options)\n                      nil)\n        options     (if (string? (first options))\n                      (next options)\n                      options)\n        m           (if (map? (first options))\n                      (first options)\n                      {})\n        options     (if (map? (first options))\n                      (next options)\n                      options)\n        dispatch-fn (first options)\n        options     (next options)\n        m           (if docstring\n                      (assoc m :doc docstring)\n                      m)\n        m           (if (meta mm-name)\n                      (conj (meta mm-name) m)\n                      m)\n        mm-name (with-meta mm-name m)]\n    (when (= (count options) 1)\n      (throw (new #?(:clj Exception :cljs js/Error)\n                  \"The syntax for defmulti has changed. Example: (defmulti name dispatch-fn :default dispatch-value)\")))\n\n    (let [options   (apply hash-map options)\n          default   (get options :default :default)\n          hierarchy (get options :hierarchy (global-hierarchy ctx))]\n      (check-valid-options options :default :hierarchy)\n      #?(:clj `(let [v# (def ~mm-name)]\n                 (when-not (and (clojure.core/has-root-impl v#) (clojure.core/multi-fn?-impl (deref v#)))\n                   (def ~mm-name\n                     (clojure.core/multi-fn-impl ~(name mm-name) ~dispatch-fn ~default ~hierarchy))))\n         :cljs `(defonce ~(with-meta mm-name m)\n                  (let [method-table# (atom {})\n                        prefer-table# (atom {})\n                        method-cache# (atom {})\n                        cached-hierarchy# (atom {})]\n                    (clojure.core/multi-fn-impl ~(symbol (name mm-name)) ~dispatch-fn ~default ~hierarchy\n                                                method-table# prefer-table# method-cache# cached-hierarchy#)))))))\n\n(defn multi-fn?-impl [x]\n  (instance? #?(:clj clojure.lang.MultiFn\n                :cljs cljs.core/MultiFn) x))\n\n(defn multi-fn-impl #?(:clj [name dispatch-fn default hierarchy]\n                       :cljs [name dispatch-fn default hierarchy\n                              method-table prefer-table method-cache cached-hierarchy])\n  (new #?(:clj clojure.lang.MultiFn\n          :cljs cljs.core/MultiFn) name dispatch-fn default hierarchy\n       #?@(:cljs [method-table prefer-table method-cache cached-hierarchy])))\n\n(defn multi-fn-add-method-impl\n  [multifn dispatch-val f]\n  #?(:clj (.addMethod ^clojure.lang.MultiFn multifn dispatch-val f)\n     :cljs (-add-method multifn dispatch-val f)))\n\n(defn defmethod\n  \"Creates and installs a new method of multimethod associated with dispatch-value. \"\n  [_ _ multifn dispatch-val & fn-tail]\n  `(clojure.core/multi-fn-add-method-impl ~multifn ~dispatch-val (fn ~@fn-tail)))\n"]}