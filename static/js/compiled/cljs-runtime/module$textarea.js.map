{
"version":3,
"file":"module$textarea.js",
"lineCount":5,
"mappings":"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",
"sources":["textarea.js"],
"sourcesContent":["shadow$provide[\"module$textarea\"] = function(global,require,module,exports) {\n/* jshint browser: true */\n\n(function () {\n\n// We'll copy the properties below into the mirror div.\n// Note that some browsers, such as Firefox, do not concatenate properties\n// into their shorthand (e.g. padding-top, padding-bottom etc. -> padding),\n// so we have to list every single property explicitly.\nvar properties = [\n  'direction',  // RTL support\n  'boxSizing',\n  'width',  // on Chrome and IE, exclude the scrollbar, so the mirror div wraps exactly as the textarea does\n  'height',\n  'overflowX',\n  'overflowY',  // copy the scrollbar for IE\n\n  'borderTopWidth',\n  'borderRightWidth',\n  'borderBottomWidth',\n  'borderLeftWidth',\n  'borderStyle',\n\n  'paddingTop',\n  'paddingRight',\n  'paddingBottom',\n  'paddingLeft',\n\n  // https://developer.mozilla.org/en-US/docs/Web/CSS/font\n  'fontStyle',\n  'fontVariant',\n  'fontWeight',\n  'fontStretch',\n  'fontSize',\n  'fontSizeAdjust',\n  'lineHeight',\n  'fontFamily',\n\n  'textAlign',\n  'textTransform',\n  'textIndent',\n  'textDecoration',  // might not make a difference, but better be safe\n\n  'letterSpacing',\n  'wordSpacing',\n\n  'tabSize',\n  'MozTabSize'\n\n];\n\nvar isBrowser = (typeof window !== 'undefined');\nvar isFirefox = (isBrowser && window.mozInnerScreenX != null);\n\nfunction getCaretCoordinates(element, position, options) {\n  if (!isBrowser) {\n    throw new Error('textarea-caret-position#getCaretCoordinates should only be called in a browser');\n  }\n\n  var debug = options && options.debug || false;\n  if (debug) {\n    var el = document.querySelector('#input-textarea-caret-position-mirror-div');\n    if (el) el.parentNode.removeChild(el);\n  }\n\n  // The mirror div will replicate the textarea's style\n  var div = document.createElement('div');\n  div.id = 'input-textarea-caret-position-mirror-div';\n  document.body.appendChild(div);\n\n  var style = div.style;\n  var computed = window.getComputedStyle ? window.getComputedStyle(element) : element.currentStyle;  // currentStyle for IE < 9\n  var isInput = element.nodeName === 'INPUT';\n\n  // Default textarea styles\n  style.whiteSpace = 'pre-wrap';\n  if (!isInput)\n    style.wordWrap = 'break-word';  // only for textarea-s\n\n  // Position off-screen\n  style.position = 'absolute';  // required to return coordinates properly\n  if (!debug)\n    style.visibility = 'hidden';  // not 'display: none' because we want rendering\n\n  // Transfer the element's properties to the div\n  properties.forEach(function (prop) {\n    if (isInput && prop === 'lineHeight') {\n      // Special case for <input>s because text is rendered centered and line height may be != height\n      if (computed.boxSizing === \"border-box\") {\n        var height = parseInt(computed.height);\n        var outerHeight =\n          parseInt(computed.paddingTop) +\n          parseInt(computed.paddingBottom) +\n          parseInt(computed.borderTopWidth) +\n          parseInt(computed.borderBottomWidth);\n        var targetHeight = outerHeight + parseInt(computed.lineHeight);\n        if (height > targetHeight) {\n          style.lineHeight = height - outerHeight + \"px\";\n        } else if (height === targetHeight) {\n          style.lineHeight = computed.lineHeight;\n        } else {\n          style.lineHeight = 0;\n        }\n      } else {\n        style.lineHeight = computed.height;\n      }\n    } else {\n      style[prop] = computed[prop];\n    }\n  });\n\n  if (isFirefox) {\n    // Firefox lies about the overflow property for textareas: https://bugzilla.mozilla.org/show_bug.cgi?id=984275\n    if (element.scrollHeight > parseInt(computed.height))\n      style.overflowY = 'scroll';\n  } else {\n    style.overflow = 'hidden';  // for Chrome to not render a scrollbar; IE keeps overflowY = 'scroll'\n  }\n\n  div.textContent = element.value.substring(0, position);\n  // The second special handling for input type=\"text\" vs textarea:\n  // spaces need to be replaced with non-breaking spaces - http://stackoverflow.com/a/13402035/1269037\n  if (isInput)\n    div.textContent = div.textContent.replace(/\\s/g, '\\u00a0');\n\n  var span = document.createElement('span');\n  // Wrapping must be replicated *exactly*, including when a long word gets\n  // onto the next line, with whitespace at the end of the line before (#7).\n  // The  *only* reliable way to do that is to copy the *entire* rest of the\n  // textarea's content into the <span> created at the caret position.\n  // For inputs, just '.' would be enough, but no need to bother.\n  span.textContent = element.value.substring(position) || '.';  // || because a completely empty faux span doesn't render at all\n  div.appendChild(span);\n\n  var coordinates = {\n    top: span.offsetTop + parseInt(computed['borderTopWidth']),\n    left: span.offsetLeft + parseInt(computed['borderLeftWidth']),\n    height: parseInt(computed['lineHeight'])\n  };\n\n  if (debug) {\n    span.style.backgroundColor = '#aaa';\n  } else {\n    document.body.removeChild(div);\n  }\n\n  return coordinates;\n}\n\nif (typeof module != 'undefined' && typeof module.exports != 'undefined') {\n  module.exports = getCaretCoordinates;\n} else if(isBrowser) {\n  window.getCaretCoordinates = getCaretCoordinates;\n}\n\n}());\n\n};"],
"names":["shadow$provide","global","require","module","exports","getCaretCoordinates","element","position","options","isBrowser","Error","debug","el","document","querySelector","parentNode","removeChild","div","createElement","id","body","appendChild","style","computed","window","getComputedStyle","currentStyle","isInput","nodeName","whiteSpace","wordWrap","visibility","properties","forEach","prop","boxSizing","height","parseInt","outerHeight","paddingTop","paddingBottom","borderTopWidth","borderBottomWidth","targetHeight","lineHeight","isFirefox","scrollHeight","overflowY","overflow","textContent","value","substring","replace","span","coordinates","top","offsetTop","left","offsetLeft","backgroundColor","mozInnerScreenX"]
}
