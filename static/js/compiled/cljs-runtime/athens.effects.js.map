{"version":3,"sources":["athens/effects.cljs"],"mappings":"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","names":["athens.effects/get-pk","in","js/athens","js/athens.effects","js/athens.effects.full-str","athens.effects/full-str","cljs.core.get","cljs.core/re-find","js/RegExp","js/document","js/athens.effects.deta","athens.effects/deta","js/module$node_modules$deta$index","js/athens.effects.notes","athens.effects/notes","athens.effects/new-titles-to-tx-data","new-titles","assert-titles","now","athens.util/now-ts","cljs.core.filter","x","athens.db/search-exact-node-title","cljs.core/contains?","cljs.core.map","t","athens.util/gen-block-uid","athens.effects/old-titles-to-tx-data","old-titles","new-str","with-db","title","node","athens.db/pull-nil","and__4115__auto__","clojure.string/includes?","cljs.core/empty?","cljs.core._EQ_","athens.db/linked-refs-count","temp__5735__auto__","eid","athens.effects/new-refs-to-tx-data","new-block-refs","e","ref-uid","map__60491","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","block","G__60492","G__60493","cljs.core/deref","G__60494","datascript.core/q","athens.db/dsdb","athens.effects/new-page-refs-to-tx-data","new-page-refs","source-eid","page-id","athens.effects/old-block-refs-to-tx-data","old-block-refs","athens.db/e-by-av","athens.effects/old-page-refs-to-tx-data","old-page-refs","map__60496","page","old-pages-eids","cljs.core/set","cljs.core/second","cljs.core/not","athens.effects/parse-for-links","with-tx","with-tx-data","p1__60498#","cljs.core/last","p1__60499#","cljs.core.nth","p1__60500#","cljs.core/group-by","cljs.core/first","cljs.core.mapv","p__60506","vec__60507","_eid","datoms","p1__60501#","cljs.core.sort_by","cljs.core.mapcat","p__60502","vec__60503","assertion","retraction","assert-string","retract-string","assert-data","athens.walk/walk-string","retract-data","tx-data","cljs.core.concat","athens.effects/ph-link-created!","outputs","cljs.core.doall","p__60520","vec__60521","_e","a","_v","_t","t-or-f","p__60510","vec__60511","_a","v","_t-or-f","num-refs","G__60514","G__60515","G__60516","datascript.core/pull","cljs.core/count","block-or-page","G__60517","G__60518","G__60519","js/posthog","cljs.core/clj->js","athens.effects/walk-transact","cljs.core.prn","cljs.pprint.pprint","e60524","datascript.core.with$","more-tx-data","final-tx-data","cljs.core/vec","posh.reagent/transact!","athens.effects/latest-dump","datascript.transit/write-transit-str","c__43699__auto__","cljs.core.async.chan","cljs.core.async.impl.dispatch/run","f__43700__auto__","switch__43629__auto__","state_60541","state_val_60542","inst_60525","inst_60526","cljs.core.async.interop/p->c","cljs.core.async.impl.ioc-helpers/take!","inst_60528","inst_60529","cljs.core/ExceptionInfo","inst_60530","cljs.core/ex-data","inst_60531","inst_60532","inst_60533","statearr-60543","statearr-60544","statearr-60545","inst_60535","statearr-60546","statearr-60547","inst_60538","inst_60539","cljs.core.async.impl.ioc-helpers/return-chan","statearr-60548","state-machine__43630__auto__","ret-value__43631__auto__","result__43632__auto__","cljs.core/keyword-identical?","ex__43633__auto__","e60549","statearr-60550","cljs.core/seq","statearr-60551","state__43701__auto__","statearr-60552","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","athens.effects/resp","js/Error","js/alert","re-frame.core/reg-fx","new-db","datascript.core.reset_conn_BANG_","str","state_60592","state_val_60593","statearr-60594","inst_60553","inst_60554","inst_60556","statearr-60595","inst_60566","inst_60568","inst_60569","inst_60570","inst_60571","inst_60572","inst_60573","inst_60574","statearr-60596","inst_60563","statearr-60597","inst_60586","inst_60587","statearr-60598","inst_60557","inst_60558","inst_60559","inst_60560","inst_60561","statearr-60599","statearr-60600","statearr-60601","inst_60576","statearr-60602","inst_60577","inst_60578","inst_60579","inst_60580","inst_60581","statearr-60603","statearr-60604","statearr-60605","statearr-60606","statearr-60607","statearr-60608","inst_60583","statearr-60609","inst_60590","statearr-60610","e60611","statearr-60612","statearr-60613","statearr-60614","athens.effects/db-str","athens.effects/new-db","datascript.transit/read-transit-str","athens.effects/next-resp","p__60615","vec__60616","key","value","js/localStorage.setItem","db","p__60619","map__60620","url","method","opts","on-success","on-failure","state_60664","state_val_60665","inst_60631","inst_60633","inst_60634","statearr-60666","statearr-60667","statearr-60668","G__60669","cljs.core/Keyword","statearr-60670","statearr-60671","statearr-60672","statearr-60673","statearr-60674","statearr-60675","inst_60644","statearr-60676","statearr-60677","inst_60654","inst_60656","inst_60657","statearr-60678","statearr-60679","statearr-60680","inst_60628","inst_60629","inst_60662","statearr-60681","statearr-60682","statearr-60683","inst_60649","statearr-60684","inst_60652","inst_60653","statearr-60685","statearr-60686","statearr-60687","inst_60647","statearr-60688","statearr-60689","inst_60659","inst_60660","statearr-60690","inst_60636","inst_60637","inst_60638","inst_60639","inst_60640","statearr-60691","statearr-60692","statearr-60693","e60694","statearr-60695","statearr-60696","statearr-60697","cljs-http.client/post","cljs-http.client/get","cljs-http.client/put","cljs-http.client/delete","re-frame.core/dispatch","cljs.core.conj","timers","cljs.core.atom","p__60698","map__60699","action","id","event","wait","G__60701","cljs.core.swap_BANG_","cljs.core/assoc","js/setTimeout","js/clearTimeout","cljs.core/dissoc","p__60702","vec__60703","uid","index","active-el","vec__60706","embed-id","athens.db/uid-and-embed-id","html-id","el","js/document.querySelector","or__4126__auto__","goog.dom.selection/setCursorPosition","p__60709","vec__60710","start","end","target","p__60713","vec__60714","tag","properties","stylefy.core/tag","message"],"sourcesContent":["(ns athens.effects\n  (:require\n    [cljs.core.async :refer (go)]\n    [cljs.core.async.interop :refer-macros (<p!)]\n    [\"deta\" :as Deta]\n    [athens.db :as db]\n    [athens.util :as util]\n    [athens.walk :as walk]\n    [cljs-http.client :as http]\n    [cljs.core.async :refer [go <!]]\n    [cljs.pprint :refer [pprint]]\n    [clojure.string :as str]\n    [datascript.core :as d]\n    [datascript.transit :as dt]\n    [day8.re-frame.async-flow-fx]\n    [goog.dom.selection :refer [setCursorPosition]]\n    [posh.reagent :as p :refer [transact!]]\n    [re-frame.core :refer [dispatch reg-fx]]\n    [stylefy.core :as stylefy]))\n\n\n;;; Deta init\n\n(defn get-pk [in]\n  (defonce full-str (str \"(^|;)\\\\s*\" in \"\\\\s*=\\\\s*([^;]+)\"))\n  (get (re-find (js/RegExp. full-str) (.-cookie js/document)) 2)\n)\n\n(defonce deta (Deta (get-pk \"pk\")))\n\n(defonce notes (.Base deta \"athens_notes\"))\n\n\n;;; Effects\n\n(defn new-titles-to-tx-data\n  \"Filter: node/title doesn't exist yet in the db or in the titles being asserted (e.g. when renaming a page and changing it's references).\n  Map: new node/title entity.\"\n  [new-titles assert-titles]\n  (let [now (util/now-ts)]\n    (->> new-titles\n         (filter (fn [x]\n                   (and (nil? (db/search-exact-node-title x))\n                        (not (contains? assert-titles x)))))\n         (map (fn [t]\n                {:node/title  t\n                 :block/uid   (util/gen-block-uid)\n                 :create/time now\n                 :edit/time   now})))))\n\n\n(defn old-titles-to-tx-data\n  \"Purpose is to remove orphan pages. However, if entire entity is retracted, orphan pages are still created.\n\n  Filter: new-str doesn't include link, page exists, page has no children, and has no other [[linked refs]].\n  Map: retractEntity\"\n  [old-titles new-str with-db]\n  (->> old-titles\n       (filter (fn [title]\n                 (let [node (db/pull-nil with-db '[*] [:node/title title])]\n                   (and (not (clojure.string/includes? new-str title))\n                        node\n                        (empty? (:block/children node))\n                        (= 1 (db/linked-refs-count title))))))\n       (map (fn [title]\n              (when-let [eid (:db/id (db/pull-nil with-db '[*] [:node/title title]))]\n                [:db/retractEntity eid])))))\n\n\n(defn new-refs-to-tx-data\n  \"Filter: ((ref-uid)) points to a valid block (no :node/title).\n  Map: add block/ref relationship.\"\n  [new-block-refs e]\n  (->> new-block-refs\n       (filter (fn [ref-uid]\n                 (let [block (d/q '[:find (pull ?e [*]) .\n                                    :in $ ?uid\n                                    :where [?e :block/uid ?uid]]\n                                  @db/dsdb ref-uid)\n                       {:keys [node/title]} block]\n                   (and block (nil? title)))))\n       (map (fn [ref-uid] [:db/add e :block/refs [:block/uid ref-uid]]))))\n\n\n(defn new-page-refs-to-tx-data\n  \"Filter: No filter.\n  Map: add block/ref relationship.\"\n  [new-page-refs source-eid]\n  (->> new-page-refs\n       (map (fn [page-id] [:db/add source-eid :block/refs page-id]))))\n\n\n(defn old-block-refs-to-tx-data\n  \"Filter: new-str doesn't include block ref anymore, ((ref-uid)) points to an actual block, and block/ref relationship exists.\n  Map: retract relationship.\"\n  [old-block-refs e new-str]\n  (->> old-block-refs\n       (filter (fn [ref-uid]\n                 (let [eid (db/e-by-av :block/uid ref-uid)]\n                   (and eid\n                        (not (str/includes? new-str (str \"((\" ref-uid \"))\")))))))\n       (map (fn [ref-uid] [:db/retract e :block/refs [:block/uid ref-uid]]))))\n\n\n(defn old-page-refs-to-tx-data\n  \"Filter: [[page]] points to a page and block/ref relationship does exist.\n  Map: retract block/ref relationship.\n\n  Edge Cases:\n  1. Merging two pages (renaming a page to a title that already exists).\n  - This attempt to update all the Linked References strings\n  - Querying with-db rather than the current-db to check that entity retraction already takes care of block/ref retraction.\n\n  2. Deleting an orphan page, i.e. deleting a [[link]] when the [[link]] has no children and no other linked references\n  - In this case, we can't use with-db, because the orphan page retraction happens in old-titles-to-tx-data.\n  - Pass `old-titles` and check that the block/ref being deleted is not there to avoid double retraction.\n  - Don't use :db.fn/retractAttribute because :db.cardinality/many\"\n  [old-page-refs source-eid new-str with-db old-titles]\n  (->> old-page-refs\n       (filter (fn [page-id]\n                 (let [page (db/pull-nil with-db '[*] page-id)\n                       old-pages-eids (set (map second old-titles))\n                       {:keys [node/title]} page]\n                   (and (not (str/includes? new-str (str \"[[\" title \"]]\")))\n                        page\n                        title\n                        (not (get old-pages-eids (:db/id page)))))))\n       (map (fn [page-id]\n              (when-let [page (db/pull-nil with-db '[*] page-id)]\n                [:db/retract source-eid :block/refs [:block/uid (:block/uid page)]])))))\n\n\n(defn parse-for-links\n  \"When block/string is asserted, parse for links and block refs to add.\n  When block/string is retracted, parse for links and block refs to remove.\n  Retractions need to look at asserted block/string. Use empty string if only retract.\"\n  [with-tx]\n  (let [with-tx-data  (:tx-data with-tx)\n        with-db       (:db-after with-tx)\n        assert-titles (->> with-tx-data\n                           (filter #(and (= (second %) :node/title)\n                                         (true? (last %))))\n                           (map #(nth % 2))\n                           set)]\n    (->> with-tx-data\n         (filter #(= (second %) :block/string))\n         ;; group-by entity\n         (group-by first)\n         ;; map sort-by so [true false] gives us [assertion retraction], [assertion], or [retraction]\n         (mapv (fn [[_eid datoms]]\n                 (sort-by #(-> % last not) datoms)))\n         (mapcat (fn [[assertion retraction]]\n                   (cond\n                     ;; [assertion retraction]\n                     (and (true? (last assertion)) (false? (last retraction)))\n                     (let [eid            (first assertion)\n                           assert-string  (nth assertion 2)\n                           retract-string (nth retraction 2)\n                           assert-data    (walk/walk-string assert-string)\n                           retract-data   (walk/walk-string retract-string)\n                           new-block-refs (new-refs-to-tx-data (:block/refs assert-data) eid)\n                           old-titles     (old-titles-to-tx-data (:node/titles retract-data) assert-string with-db)\n                           new-titles     (new-titles-to-tx-data (:node/titles assert-data) assert-titles)\n                           new-page-refs  (new-page-refs-to-tx-data (:page/refs assert-data) eid)\n                           old-block-refs (old-block-refs-to-tx-data (:block/refs retract-data) eid assert-string)\n                           old-page-refs  (old-page-refs-to-tx-data (:page/refs retract-data) eid assert-string with-db old-titles)\n                           tx-data        (concat []\n                                                  new-titles\n                                                  new-block-refs\n                                                  new-page-refs\n                                                  old-titles\n                                                  old-block-refs\n                                                  old-page-refs)]\n                       tx-data)\n\n                     ;; [assertion]\n                     (and (true? (last assertion)) (nil? retraction))\n                     (let [eid            (first assertion)\n                           assert-string  (nth assertion 2)\n                           assert-data    (walk/walk-string assert-string)\n                           new-titles     (new-titles-to-tx-data (:node/titles assert-data) assert-titles)\n                           new-page-refs  (new-page-refs-to-tx-data (:page/refs assert-data) eid)\n                           new-block-refs (new-refs-to-tx-data (:block/refs assert-data) eid)\n                           tx-data        (concat []\n                                                  new-titles\n                                                  new-block-refs\n                                                  new-page-refs)]\n                       tx-data)\n\n                     ;; [retraction]\n                     ;; :block/string itself is rarely retracted directly.\n                     (and (false? (last assertion)) (nil? retraction))\n                     (let [eid            (first retraction)\n                           assert-string  \"\"\n                           retract-string (nth retraction 2)\n                           retract-data   (walk/walk-string retract-string)\n                           old-titles     (old-titles-to-tx-data (:node/titles retract-data) assert-string with-db)\n                           old-block-refs (old-block-refs-to-tx-data (:block/refs retract-data) eid assert-string)\n                           old-page-refs  (old-page-refs-to-tx-data (:page/refs retract-data) eid assert-string with-db old-titles)\n                           tx-data        (concat []\n                                                  old-titles\n                                                  old-block-refs\n                                                  old-page-refs)]\n                       tx-data)))))))\n\n\n(defn ph-link-created!\n  \"Only creates `link-created` events for now.\n  TODO: link-deleted events\"\n  [outputs]\n  (doall (->> outputs\n              (filter (fn [[_e a _v _t t-or-f]]\n                        (and (= a :block/refs)\n                             t-or-f)))\n              (map (fn [[e _a v _t _t-or-f]]\n                     (let [num-refs (-> (d/pull @db/dsdb '[:block/_refs] v)\n                                        :block/_refs\n                                        count)\n                           block-or-page (if (:node/title (d/pull @db/dsdb '[:node/title :block/string] e))\n                                           :page\n                                           :block)]\n                       {:refs num-refs\n                        :attr block-or-page})))\n              (map (fn [x]\n                     (.. js/posthog (capture \"link-created\", (clj->js x))))))))\n\n\n(defn walk-transact\n  [tx-data]\n  (prn \"TX RAW INPUTS\")\n  (pprint tx-data)\n  (try\n    (let [with-tx (d/with @db/dsdb tx-data)]\n      (prn \"TX WITH\")                                       ;; tx-data normalized by datascript to flat datoms\n      (pprint (:tx-data with-tx))\n      (let [more-tx-data  (parse-for-links with-tx)\n            final-tx-data (vec (concat tx-data more-tx-data))]\n        (prn \"TX MORE\")                                     ;; parsed tx-data, e.g. asserting/retracting pages and references\n        (pprint more-tx-data)\n        (prn \"TX FINAL INPUTS\")                             ;; parsing block/string (and node/title) to derive asserted or retracted titles and block refs\n        (pprint final-tx-data)\n        (let [outputs (:tx-data (transact! db/dsdb final-tx-data))]\n          (prn \"TX OUTPUTS\")\n          (def latest-dump (dt/write-transit-str @db/dsdb))\n          (go \n            (def resp (<p! (.put notes latest-dump \"athens_db_str\")))\n          )\n          (pprint outputs))))\n\n    (catch js/Error e\n      (js/alert (str e))\n      (prn \"EXCEPTION\" e))))\n\n\n(reg-fx\n  :transact!\n  (fn [tx-data]\n    (walk-transact tx-data)))\n\n\n(reg-fx\n  :reset-conn!\n  (fn [new-db]\n    (d/reset-conn! db/dsdb new-db)))\n\n\n(reg-fx\n  :reset-conn-deta!\n  (fn [str]\n    (go\n      (let [resp (<p! (.get notes \"athens_db_str\"))]\n        (if resp \n          (do\n            (def db-str (.-value resp))\n            (def new-db (dt/read-transit-str db-str))\n            (d/reset-conn! db/dsdb new-db)\n            (def next-resp (<p! (.put notes db-str \"athens_db_str\")))\n          )\n          nil\n        )\n      ))))\n\n\n(reg-fx\n  :local-storage/set!\n  (fn [[key value]]\n    (js/localStorage.setItem key value)))\n\n\n(reg-fx\n  :local-storage/set-db!\n  (fn [db]\n    (js/localStorage.setItem \"datascript/DB\" (dt/write-transit-str db))))\n\n\n(reg-fx\n  :http\n  (fn [{:keys [url method opts on-success on-failure]}]\n    (go\n      (let [http-fn (case method\n                      :post http/post :get http/get\n                      :put http/put :delete http/delete)\n            res     (<! (http-fn url opts))\n            {:keys [success body] :as all} res]\n        (if success\n          (dispatch (conj on-success body))\n          (dispatch (conj on-failure all)))))))\n\n\n(reg-fx\n  :timeout\n  (let [timers (atom {})]\n    (fn [{:keys [action id event wait]}]\n      (case action\n        :start (swap! timers assoc id (js/setTimeout #(dispatch event) wait))\n        :clear (do (js/clearTimeout (get @timers id))\n                   (swap! timers dissoc id))))))\n\n\n;; Using DOM, focus the target block.\n;; There can actually be multiple elements with the same #editable-uid-UID HTML id\n;; The same unique datascript block can be rendered multiple times: node-page, right sidebar, linked/unlinked references\n;; In this case, find the all the potential HTML blocks with that uid. The one that shares the same closest ancestor as the\n;; activeElement (where the text caret is before the new focus happens), is the container of the block to focus on.\n\n;; If an index is passed, set cursor to that index.\n\n;; TODO: some issues\n;; - auto-focus on textarea\n;; - searching for common-ancestor on inside of setTimeout vs outside\n;;   - element sometimes hasn't been created yet (enter), sometimes has been just destroyed (backspace)\n;; - uid sometimes nil\n\n(reg-fx\n  :editing/focus\n  (fn [[uid index]]\n    (if (nil? uid)\n      (when-let [active-el (.-activeElement js/document)]\n        (.blur active-el))\n      (js/setTimeout (fn []\n                       (let [[uid embed-id]  (db/uid-and-embed-id uid)\n                             html-id         (str \"editable-uid-\" uid)\n                             ;;targets (js/document.querySelectorAll html-id)\n                             ;;n       (count (array-seq targets))\n                             el              (js/document.querySelector\n                                               (if embed-id\n                                                 (or\n                                                   ;; find exact embed block\n                                                   (str \"textarea[id='\" html-id \"-embed-\" embed-id \"']\")\n                                                   ;; find embedded that starts with current html id (embed id changed due to re-render)\n                                                   (str \"textarea[id^='\" html-id \"-embed-']\"))\n                                                 ;; take default\n                                                 (str \"#\" html-id)))]\n                         #_(cond\n                             (zero? n) (prn \"No targets\")\n                             (= 1 n) (prn \"One target\")\n                             (< 1 n) (prn \"Several targets\"))\n                         (when el\n                           (.focus el)\n                           (when index\n                             (setCursorPosition el index)))))\n                     100))))\n\n\n;; todo(abhinav)\n;; think of this + up/down + editing/focus for common up down press\n;; and cursor goes to apt position rather than last visited point in the block(current)\n;; inspirations - intelli-j's up/down\n(reg-fx\n  :set-cursor-position\n  (fn [[uid start end]]\n    (js/setTimeout (fn []\n                     (when-let [target (js/document.querySelector (str \"#editable-uid-\" uid))]\n                       (.focus target)\n                       (set! (.-selectionStart target) start)\n                       (set! (.-selectionEnd target) end)))\n                   100)))\n\n\n(reg-fx\n  :stylefy/tag\n  (fn [[tag properties]]\n    (stylefy/tag tag properties)))\n\n\n(reg-fx\n  :alert/js!\n  (fn [message]\n    (js/alert message)))\n"]}