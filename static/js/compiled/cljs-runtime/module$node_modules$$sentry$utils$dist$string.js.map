{
"version":3,
"file":"module$node_modules$$sentry$utils$dist$string.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAe,6CAAf,CAAkE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAC1GC,MAAA,CAAOC,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAAEG,MAAO,CAAA,CAAT,CAA7C,CACA,KAAIC,KAAON,OAAA,CAAQ,2CAAR,CAeXE,QAAA,CAAQK,QAAR,CAPAA,QAAiB,CAACC,GAAD,CAAMC,GAAN,CAAW,CACZ,IAAK,EAAjB,GAAIA,GAAJ,GAAsBA,GAAtB,CAA4B,CAA5B,CACA,OAAmB,QAAnB,GAAI,MAAOD,IAAX,EAAuC,CAAvC,GAA+BC,GAA/B,CACWD,GADX,CAGOA,GAAA,CAAIE,MAAJ,EAAcD,GAAd,CAAoBD,GAApB,CAA0BA,GAAA,CAAIG,MAAJ,CAAW,CAAX,CAAcF,GAAd,CAA1B,CAA+C,KAL9B,CA8C5BP,QAAA,CAAQU,QAAR,CA9BAA,QAAiB,CAACC,IAAD,CAAOC,KAAP,CAAc,CAE3B,IAAIC,GAAKC,IAALD,CAAaL,MACjB,IAAU,GAAV,EAAIK,EAAJ,CACI,MAAOC,KAEPF,MAAJ,CAAYC,EAAZ,GAEID,KAFJ,CAEYC,EAFZ,CAIIE,MAAAA,CAAQC,IAAA,CAAKT,GAAL,CAASK,KAAT,CAAiB,EAAjB,CAAqB,CAArB,CACA,EAAZ,CAAIG,KAAJ,GACIA,KADJ;AACY,CADZ,CAGA,KAAIE,IAAMD,IAAA,CAAKE,GAAL,CAASH,KAAT,CAAiB,GAAjB,CAAsBF,EAAtB,CACNI,IAAJ,CAAUJ,EAAV,CAAe,CAAf,GACII,GADJ,CACUJ,EADV,CAGII,IAAJ,GAAYJ,EAAZ,GACIE,KADJ,CACYC,IAAA,CAAKT,GAAL,CAASU,GAAT,CAAe,GAAf,CAAoB,CAApB,CADZ,CAGAH,KAAA,CAAUA,IAAA,CAAQK,KAAR,CAAcJ,KAAd,CAAqBE,GAArB,CACE,EAAZ,CAAIF,KAAJ,GACID,IADJ,CACc,UADd,CAC2BA,IAD3B,CAGIG,IAAJ,CAAUJ,EAAV,GACIC,IADJ,EACe,SADf,CAGA,OAAOA,KA5BoB,CAuD/Bd,QAAA,CAAQoB,QAAR,CAjBAA,QAAiB,CAACC,KAAD,CAAQC,SAAR,CAAmB,CAChC,GAAI,CAACC,KAAA,CAAMC,OAAN,CAAcH,KAAd,CAAL,CACI,MAAO,EAIX,KAFA,IAAII,OAAS,EAAb,CAESC,EAAI,CAAb,CAAgBA,CAAhB,CAAoBL,KAApB,CAA0Bb,MAA1B,CAAkCkB,CAAA,EAAlC,CAAuC,CACnC,IAAIvB,MAAQkB,KAAA,CAAMK,CAAN,CACZ,IAAI,CACAD,MAAA,CAAOE,IAAP,CAAYC,MAAA,CAAOzB,KAAP,CAAZ,CADA,CAGJ,MAAO0B,CAAP,CAAU,CACNJ,MAAA,CAAOE,IAAP,CAAY,8BAAZ,CADM,CALyB,CASvC,MAAOF,OAAA,CAAOK,IAAP,CAAYR,SAAZ,CAfyB,CAmCpCtB,QAAA,CAAQ+B,iBAAR,CAZAA,QAA0B,CAAC5B,KAAD,CAAQ6B,OAAR,CAAiB,CACvC,MAAK5B,KAAA,CAAK6B,QAAL,CAAc9B,KAAd,CAAL;AAGIC,IAAA,CAAK8B,QAAL,CAAcF,OAAd,CAAJ,CACWA,OAAA,CAAQG,IAAR,CAAahC,KAAb,CADX,CAGuB,QAAvB,GAAI,MAAO6B,QAAX,CACsC,EADtC,GACW7B,KAAA,CAAMiC,OAAN,CAAcJ,OAAd,CADX,CAGO,CAAA,CATP,CACW,CAAA,CAF4B,CAvF+D;",
"sources":["node_modules/@sentry/utils/dist/string.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$sentry$utils$dist$string\"] = function(global,require,module,exports) {\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar is_1 = require(\"./is\");\n/**\n * Truncates given string to the maximum characters count\n *\n * @param str An object that contains serializable values\n * @param max Maximum number of characters in truncated string\n * @returns string Encoded\n */\nfunction truncate(str, max) {\n    if (max === void 0) { max = 0; }\n    if (typeof str !== 'string' || max === 0) {\n        return str;\n    }\n    return str.length <= max ? str : str.substr(0, max) + \"...\";\n}\nexports.truncate = truncate;\n/**\n * This is basically just `trim_line` from\n * https://github.com/getsentry/sentry/blob/master/src/sentry/lang/javascript/processor.py#L67\n *\n * @param str An object that contains serializable values\n * @param max Maximum number of characters in truncated string\n * @returns string Encoded\n */\nfunction snipLine(line, colno) {\n    var newLine = line;\n    var ll = newLine.length;\n    if (ll <= 150) {\n        return newLine;\n    }\n    if (colno > ll) {\n        // eslint-disable-next-line no-param-reassign\n        colno = ll;\n    }\n    var start = Math.max(colno - 60, 0);\n    if (start < 5) {\n        start = 0;\n    }\n    var end = Math.min(start + 140, ll);\n    if (end > ll - 5) {\n        end = ll;\n    }\n    if (end === ll) {\n        start = Math.max(end - 140, 0);\n    }\n    newLine = newLine.slice(start, end);\n    if (start > 0) {\n        newLine = \"'{snip} \" + newLine;\n    }\n    if (end < ll) {\n        newLine += ' {snip}';\n    }\n    return newLine;\n}\nexports.snipLine = snipLine;\n/**\n * Join values in array\n * @param input array of values to be joined together\n * @param delimiter string to be placed in-between values\n * @returns Joined values\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction safeJoin(input, delimiter) {\n    if (!Array.isArray(input)) {\n        return '';\n    }\n    var output = [];\n    // eslint-disable-next-line @typescript-eslint/prefer-for-of\n    for (var i = 0; i < input.length; i++) {\n        var value = input[i];\n        try {\n            output.push(String(value));\n        }\n        catch (e) {\n            output.push('[value cannot be serialized]');\n        }\n    }\n    return output.join(delimiter);\n}\nexports.safeJoin = safeJoin;\n/**\n * Checks if the value matches a regex or includes the string\n * @param value The string value to be checked against\n * @param pattern Either a regex or a string that must be contained in value\n */\nfunction isMatchingPattern(value, pattern) {\n    if (!is_1.isString(value)) {\n        return false;\n    }\n    if (is_1.isRegExp(pattern)) {\n        return pattern.test(value);\n    }\n    if (typeof pattern === 'string') {\n        return value.indexOf(pattern) !== -1;\n    }\n    return false;\n}\nexports.isMatchingPattern = isMatchingPattern;\n//# sourceMappingURL=string.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","is_1","truncate","str","max","length","substr","snipLine","line","colno","ll","newLine","start","Math","end","min","slice","safeJoin","input","delimiter","Array","isArray","output","i","push","String","e","join","isMatchingPattern","pattern","isString","isRegExp","test","indexOf"]
}
