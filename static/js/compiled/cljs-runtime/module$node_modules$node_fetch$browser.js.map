{
"version":3,
"file":"module$node_modules$node_fetch$browser.js",
"lineCount":1,
"mappings":"AAAAA,cAAA,CAAe,sCAAf,CAA2D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAc/FH,MAAJ,CAVgBI,QAAS,EAAG,CAI3B,GAAoB,WAApB,GAAI,MAAOC,KAAX,CAAmC,MAAOA,KAC1C,IAAsB,WAAtB,GAAI,MAAOC,OAAX,CAAqC,MAAOA,OAC5C,IAAsB,WAAtB,GAAI,MAAON,OAAX,CAAqC,MAAOA,OAC5C,MAAUO,MAAJ,CAAU,gCAAV,CAAN,CAP2B,CAUf,EAKb,IAHAL,MAGA,CAHOC,OAGP,CAHiBA,OAGjB,CAH2BH,MAG3B,CAHkCQ,KAGlC,CACCL,OAAA,CAAQM,OAAR,CAAkBT,MAAA,CAAOQ,KAAP,CAAaE,IAAb,CAAkBV,MAAlB,CAGnBG,QAAA,CAAQQ,OAAR,CAAkBX,MAAlB,CAAyBW,OACzBR,QAAA,CAAQS,OAAR,CAAkBZ,MAAlB,CAAyBY,OACzBT,QAAA,CAAQU,QAAR,CAAmBb,MAAnB,CAA0Ba,QAzByE;",
"sources":["node_modules/node-fetch/browser.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$node_fetch$browser\"] = function(global,require,module,exports) {\n\"use strict\";\n\n// ref: https://github.com/tc39/proposal-global\nvar getGlobal = function () {\n\t// the only reliable means to get the global object is\n\t// `Function('return this')()`\n\t// However, this causes CSP violations in Chrome apps.\n\tif (typeof self !== 'undefined') { return self; }\n\tif (typeof window !== 'undefined') { return window; }\n\tif (typeof global !== 'undefined') { return global; }\n\tthrow new Error('unable to locate global object');\n}\n\nvar global = getGlobal();\n\nmodule.exports = exports = global.fetch;\n\n// Needed for TypeScript and Webpack.\nif (global.fetch) {\n\texports.default = global.fetch.bind(global);\n}\n\nexports.Headers = global.Headers;\nexports.Request = global.Request;\nexports.Response = global.Response;\n};"],
"names":["shadow$provide","global","require","module","exports","getGlobal","self","window","Error","fetch","default","bind","Headers","Request","Response"]
}
