shadow$provide.module$node_modules$$sentry$integrations$dist$captureconsole=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});var types_1=require("module$node_modules$$sentry$types$dist$index"),utils_1=require("module$node_modules$$sentry$utils$dist$index");global=utils_1.getGlobalObject();require=function(){function CaptureConsole(options){void 0===options&&(options={});this.name=CaptureConsole.id;this._levels="log info warn error debug assert".split(" ");
options.levels&&(this._levels=options.levels)}CaptureConsole.prototype.setupOnce=function(_,getCurrentHub){"console"in global&&this._levels.forEach(function(level){level in global.console&&utils_1.fill(global.console,level,function(originalConsoleLevel){return function(){for(var args=[],_i=0;_i<arguments.length;_i++)args[_i]=arguments[_i];var hub=getCurrentHub();hub.getIntegration(CaptureConsole)&&hub.withScope(function(scope){scope.setLevel(types_1.Severity.fromString(level));scope.setExtra("arguments",
args);scope.addEventProcessor(function(event){event.logger="console";return event});var message=utils_1.safeJoin(args," ");"assert"===level?!1===args[0]&&(message="Assertion failed: "+(utils_1.safeJoin(args.slice(1)," ")||"console.assert"),scope.setExtra("arguments",args.slice(1)),hub.captureMessage(message)):hub.captureMessage(message)});originalConsoleLevel&&Function.prototype.apply.call(originalConsoleLevel,global.console,args)}})})};CaptureConsole.id="CaptureConsole";return CaptureConsole}();
exports.CaptureConsole=require}
//# sourceMappingURL=module$node_modules$$sentry$integrations$dist$captureconsole.js.map
