{"version":3,"sources":["athens/parse_renderer.cljs"],"mappings":"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","names":["athens.parse-renderer/page-link","athens.style.color","athens.style/OPACITIES","athens.parse-renderer/hashtag","athens.parse-renderer/image","athens.parse-renderer/url-link","athens.parse-renderer/block-ref","athens.parse-renderer/parse-title","title-coll","cljs.core.map","el","clojure.string.join","cljs.core.get_in","athens.parse-renderer/pull-node-from-string","title","posh.reagent/pull","athens.db/dsdb","athens.parse-renderer/render-page-link","node","stylefy.core.use_style","cljs.core.into","e","athens.router.navigate_uid","cljs.core/deref","athens.parse-renderer/components","js/athens","js/athens.parse-renderer","js/athens.parse-renderer.component","method-table__4619__auto__","cljs.core.atom","prefer-table__4620__auto__","method-cache__4621__auto__","cached-hierarchy__4622__auto__","hierarchy__4623__auto__","cljs.core.get","fexpr__95693","cljs.core/MultiFn","cljs.core.symbol","athens.parse-renderer/component","content","_uid","cljs.core/some","p__95695","vec__95697","cljs.core.nth","pattern","render","cljs.core/re-matches","_","athens.parse-renderer/transform","tree","uid","G__95702","G__95703","instaparse.core/transform","contents","cljs.core.concat","cljs.core/first","p1__95700#","ref-uid","block","p1__95701#","cljs.core._EQ_","athens.parse-renderer/parse-and-render","p__95711","map__95712","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","url","alt","p__95725","map__95726","text","e95710","js/module$node_modules$katex$dist$katex.render","cljs.core/clj->js","js/console.warn","string","result","athens.parser/parse-to-ast","instaparse.core/failure?","cljs.core.pr_str","instaparse.core/get-failure","cljs.core/vec"],"sourcesContent":["^:cljstyle/ignore\n(ns athens.parse-renderer\n  (:require\n    [\"katex\" :as katex]\n    [\"katex/dist/contrib/mhchem\"]\n    [athens.db :as db]\n    [athens.parser :as parser]\n    [athens.router :refer [navigate-uid]]\n    [athens.style :refer [color OPACITIES]]\n    [clojure.string :as str]\n    [instaparse.core :as insta]\n    [posh.reagent :refer [pull #_q]]\n    [stylefy.core :as stylefy :refer [use-style]]))\n\n\n(declare parse-and-render)\n\n\n;;; Styles\n\n(def page-link\n  {:cursor \"pointer\"\n   :text-decoration \"none\"\n   :color (color :link-color)\n   :display \"inline\"\n   :border-radius \"0.25rem\"\n   ::stylefy/manual [[:.formatting {:color (color :body-text-color)\n                                    :opacity (:opacity-low OPACITIES)}]\n                     [:&:hover {:z-index 1\n                                :background (color :link-color :opacity-lower)\n                                :box-shadow (str \"0px 0px 0px 1px \" (color :link-color :opacity-lower))}]]})\n\n\n(def hashtag\n  {::stylefy/mode [[:hover {:text-decoration \"underline\" :cursor \"pointer\"}]]\n   ::stylefy/manual [[:.formatting {:opacity (:opacity-low OPACITIES)}]]})\n\n\n(def image {:border-radius \"0.125rem\"})\n\n\n(def url-link\n  {:cursor \"pointer\"\n   :text-decoration \"none\"\n   :color (color :link-color)\n   ::stylefy/mode [[:hover {:text-decoration \"underline\"}]]})\n\n\n(def block-ref\n  {:font-size \"0.9em\"\n   :transition \"background 0.05s ease\"\n   :border-bottom [[\"1px\" \"solid\" (color :highlight-color)]]\n   ::stylefy/mode [[:hover {:background-color (color :highlight-color :opacity-lower)\n                            :cursor \"alias\"}]]})\n\n\n(defn parse-title\n  \"Title coll is a sequence of plain strings or hiccup elements. If string, return string, otherwise parse the hiccup\n  for its plain-text representation.\"\n  [title-coll]\n  (->> (map (fn [el]\n              (if (string? el)\n                el\n                (str \"[[\" (clojure.string/join (get-in el [3 2])) \"]]\"))) title-coll)\n       (str/join \"\")))\n\n\n;;; Helper functions for recursive link rendering\n(defn pull-node-from-string\n  \"Gets a block's node from the display string name (or partially parsed string tree)\"\n  [title-coll]\n  (let [title (parse-title title-coll)]\n    (pull db/dsdb '[*] [:node/title title])))\n\n\n(defn render-page-link\n  \"Renders a page link given the title of the page.\"\n  [title]\n  (let [node (pull-node-from-string title)]\n    [:span (use-style page-link {:class \"page-link\"})\n     [:span {:class \"formatting\"} \"[[\"]\n     (into [:span {:on-click (fn [e]\n                               (.. e stopPropagation) ;; prevent bubbling up click handler for nested links\n                               (navigate-uid (:block/uid @node) e))}]\n           title)\n     [:span {:class \"formatting\"} \"]]\"]]))\n\n;; -- Component ---\n\n(def components\n  {#\"\\[\\[TODO\\]\\]\"                :todo\n   #\"\\[\\[DONE\\]\\]\"                :done\n   #\"\\[\\[youtube\\]\\]\\:.*\"         :youtube\n   #\"iframe\\:.*\"                  :iframe\n   #\"SELF\"                        :self\n   #\"\\[\\[embed\\]\\]: \\(\\(.+\\)\\)\"   :block-embed})\n\n\n(defmulti component\n  (fn [content _uid]\n    (some (fn [[pattern render]]\n            (when (re-matches pattern content)\n              render))\n          components)))\n\n\n(defmethod component :default\n  [content _]\n  [:button content])\n\n\n;;; Components\n\n\n;; Instaparse transforming docs: https://github.com/Engelberg/instaparse#transforming-the-tree\n(defn transform\n  \"Transforms Instaparse output to Hiccup.\"\n  [tree uid]\n  (insta/transform\n    {:block         (fn [& contents]\n                      (concat [:span {:class \"block\"}] contents))\n     ;; for more information regarding how custom components are parsed, see `doc/components.md`\n     :component     (fn [& contents]\n                      (component (first contents) uid))\n     :page-link     (fn [& title-coll] (render-page-link title-coll))\n     :hashtag       (fn [& title-coll]\n                      (let [node (pull-node-from-string title-coll)]\n                        [:span (use-style hashtag {:class    \"hashtag\"\n                                                   :on-click #(navigate-uid (:block/uid @node) %)})\n                         [:span {:class \"formatting\"} \"#\"]\n                         [:span {:class \"contents\"} title-coll]]))\n     :block-ref     (fn [ref-uid]\n                      (let [block (pull db/dsdb '[*] [:block/uid ref-uid])]\n                        (if @block\n                          [:span (use-style block-ref {:class \"block-ref\"})\n                           [:span {:class \"contents\" :on-click #(navigate-uid ref-uid %)}\n                            (if (= uid ref-uid)\n                              [parse-and-render \"{{SELF}}\"]\n                              [parse-and-render (:block/string @block) ref-uid])]]\n                          (str \"((\" ref-uid \"))\"))))\n     :url-image     (fn [{url :url alt :alt}]\n                      [:img (use-style image {:class \"url-image\"\n                                              :alt   alt\n                                              :src   url})])\n     :url-link      (fn [{url :url} text]\n                      [:a (use-style url-link {:class \"url-link\"\n                                               :href  url\n                                               :target \"_blank\"})\n                       text])\n     :bold          (fn [text]\n                      [:strong {:class \"contents bold\"} text])\n     :italic        (fn [text]\n                      [:i {:class \"contents italic\"} text])\n     :strikethrough (fn [text]\n                      [:del {:class \"contents del\"} text])\n     :underline     (fn [text]\n                      [:u {:class \"contents underline\"} text])\n     :highlight     (fn [text]\n                      [:mark {:class \"contents highlight\"} text])\n     :pre-formatted (fn [text]\n                      [:code text])\n     :latex         (fn [text]\n                      [:span {:ref (fn [el]\n                                     (when el\n                                       (try\n                                         (katex/render text el (clj->js\n                                                                 {:throwOnError false}))\n                                         (catch :default e\n                                           (js/console.warn \"Unexpected KaTeX error\" e)\n                                           (aset el \"innerHTML\" text)))))}])}\n    tree))\n\n\n(defn parse-and-render\n  \"Converts a string of block syntax to Hiccup, with fallback formatting if it can\u2019t be parsed.\"\n  [string uid]\n  (let [result (parser/parse-to-ast string)]\n    (if (insta/failure? result)\n      [:span\n       {:title (pr-str (insta/get-failure result))\n        :style {:color \"red\"}}\n       string]\n      [vec (transform result uid)])))\n"]}